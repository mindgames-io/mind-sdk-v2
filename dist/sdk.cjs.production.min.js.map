{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/KashiAction.ts","../src/enums/Fee.ts","../src/enums/OrderStatus.ts","../src/constants/addresses.ts","../src/constants/kashi.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Aurora.ts","../src/constants/natives.ts","../src/constants/index.ts","../src/constants/numbers.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/functions/sqrt.ts","../src/entities/ConstantProductPool.ts","../src/functions/computePairAddress.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/types/MultiRouterTypes.ts","../src/types/LimitOrderTypes.ts","../src/entities/eip712.ts","../src/utils/MultiRouterMath.ts","../src/entities/MultiRouter.ts","../src/router.ts","../src/limitorder.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421613,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  AURORA = 1313161554,\n  AURORA_TESTNET = 1313161555,\n  AURORA_PRIVATENET = 1313161556\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","export enum KashiAction {\n  ADD_ASSET = 1,\n  REPAY = 2,\n  REMOVE_ASSET = 3,\n  REMOVE_COLLATERAL = 4,\n  BORROW = 5,\n  GET_REPAY_SHARE = 6,\n  GET_REPAY_PART = 7,\n  ACCRUE = 8,\n\n  // Functions that don't need accrue to be called\n  ADD_COLLATERAL = 10,\n  UPDATE_EXCHANGE_RATE = 11,\n\n  // Function on BentoBox\n  BENTO_DEPOSIT = 20,\n  BENTO_WITHDRAW = 21,\n  BENTO_TRANSFER = 22,\n  BENTO_TRANSFER_MULTIPLE = 23,\n  BENTO_SETAPPROVAL = 24,\n\n  // Any external call (except to BentoBox)\n  CALL = 30\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  DEFAULT = 30\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING'\n}\n","import { AddressMap } from \"../types\";\nimport { ChainId } from \"../enums\";\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n  [ChainId.ROPSTEN]: \"0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C\",\n  [ChainId.KOVAN]: \"0xb7a4F3E9097C08dA09517b5aB877F7a917224ede\",\n  [ChainId.MATIC]: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n  [ChainId.FANTOM]: \"0x04068DA6C83AFCFA0e13ba15A6696662335D5B75\",\n  [ChainId.BSC]: \"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\",\n  [ChainId.HARMONY]: \"0x985458E523dB3d53125813eD68c274899e9DfAb4\",\n  [ChainId.HECO]: \"0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B\",\n  [ChainId.OKEX]: \"0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85\",\n  [ChainId.XDAI]: \"0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83\",\n  [ChainId.ARBITRUM]: \"0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8\",\n  [ChainId.AURORA]: \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\"\n};\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\",\n  [ChainId.ROPSTEN]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.RINKEBY]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.GÖRLI]: \"0xE298D7455c9A83272960458D01556BE78535C64c\",\n  [ChainId.KOVAN]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.MATIC_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.XDAI]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.BSC]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.BSC_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.ARBITRUM]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.ARBITRUM_TESTNET]: \"0xE298D7455c9A83272960458D01556BE78535C64c\",\n  [ChainId.MOONBEAM_TESTNET]: \"0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5\",\n  [ChainId.AVALANCHE]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.AVALANCHE_TESTNET]: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n  [ChainId.HECO]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.HECO_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.HARMONY]: \"0x9014B937069918bd319f80e8B3BB4A2cf6FAA5F7\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.OKEX_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.CELO]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.PALM]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.AURORA]: \"0x78f406B41C81eb4144C321ADa5902BBF5de28538\",\n  [ChainId.AURORA_TESTNET]: \"0x73E3B9e3584358a39c48DE028A6039DB2e38a896\",\n  [ChainId.AURORA_PRIVATENET]: \"0x78f406B41C81eb4144C321ADa5902BBF5de28538\"\n};\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\",\n  [ChainId.RINKEBY]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.ROPSTEN]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.GÖRLI]: \"0xBD86FAe02323E03Fe34dC4C8960477b2E201A34a\",\n  [ChainId.KOVAN]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.MATIC_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.XDAI]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.BSC]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.BSC_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.ARBITRUM]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.ARBITRUM_TESTNET]: \"0xBD86FAe02323E03Fe34dC4C8960477b2E201A34a\",\n  [ChainId.MOONBEAM_TESTNET]: \"0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef\",\n  [ChainId.AVALANCHE]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.AVALANCHE_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.HECO]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.HECO_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.HARMONY]: \"0x24ad62502d1C652Cc7684081169D04896aC20f30\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.OKEX_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.CELO]: \"0x1421bDe4B10e8dd459b3BCb598810B1337D56842\",\n  [ChainId.PALM]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.AURORA]: \"0xcCC7B6CD8764E84Be19BD13b25850C4ac24aa2C0\",\n  [ChainId.AURORA_TESTNET]: \"0xb165D400794BEF40cEd89B784920EB952cedE024\",\n  [ChainId.AURORA_PRIVATENET]: \"0xcCC7B6CD8764E84Be19BD13b25850C4ac24aa2C0\"\n};\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\",\n  [ChainId.ROPSTEN]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.RINKEBY]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.GÖRLI]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.KOVAN]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE\",\n  [ChainId.BSC]: \"0x947950BcC74888a40Ffa2593C5798F11Fc9124C4\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0xd4d42F0b6DEF4CE0383636770eF773390d85c61A\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x3579758b48372B65e0d4257E1AFA4775A366Ac57\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"0x8D760497554eecC3B9036fb0364156ef2F0D02BC\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0xa685F488DEe49b75469E9e866965daBc8Ed6083d\",\n  [ChainId.AURORA_TESTNET]: \"0x597c3b35fe89af28f0338B63d7d8e3319501393e\",\n  [ChainId.AURORA_PRIVATENET]: \"0xa685F488DEe49b75469E9e866965daBc8Ed6083d\"\n};\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd\",\n  [ChainId.ROPSTEN]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.RINKEBY]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.GÖRLI]: \"0x3985ae471c18E44757ef743616eB520697dE1EC2\",\n  [ChainId.KOVAN]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x3985ae471c18E44757ef743616eB520697dE1EC2\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0xe653f898b1F216884bC1Fdd5B47b9933B5F4e5FB\",\n  [ChainId.AURORA_TESTNET]: \"0xc58a0FF26AB29587A0D9e24131c9f23D51B6C67f\",\n  [ChainId.AURORA_PRIVATENET]: \"0xe653f898b1F216884bC1Fdd5B47b9933B5F4e5FB\"\n};\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272\",\n  [ChainId.ROPSTEN]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.RINKEBY]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.GÖRLI]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.KOVAN]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x7D4b00A486261De367B91eCd7233Ab85303fEaa6\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0xbe334d7208366B3E4Fb40348576227b524d8CBA0\",\n  [ChainId.AURORA_TESTNET]: \"0xd61a5f2Eda48F2e141fBD1496F7B4aE34a1cD2E1\",\n  [ChainId.AURORA_PRIVATENET]: \"0xbe334d7208366B3E4Fb40348576227b524d8CBA0\"\n};\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50\",\n  [ChainId.ROPSTEN]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.RINKEBY]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.GÖRLI]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.KOVAN]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x709Cb74F372d6168E665c180cED1d52E8a31A396\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0x274676D087B066beD2d0010b89e763BBfAC8a1b2\",\n  [ChainId.AURORA_TESTNET]: \"0xbA01db73cE9b1e0Ea48E3363Ab63fccf1eedC8e0\",\n  [ChainId.AURORA_PRIVATENET]: \"0x274676D087B066beD2d0010b89e763BBfAC8a1b2\"\n};\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.ROPSTEN]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.RINKEBY]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.GÖRLI]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.KOVAN]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.ARBITRUM]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x5Fe063101d59F20fB1CE97239156B8170f57b71A\",\n  [ChainId.CELO]: \"0x9aac9048fC8139667D6a2597B902865bfdc225d3\",\n  [ChainId.FANTOM]: \"0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287\",\n  [ChainId.BSC]: \"0xa9193376D09C7f31283C54e56D013fCF370Cd9D9\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.PALM]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.MOONRIVER]: \"0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5\",\n  [ChainId.AURORA]: \"0xD4A13F9F555b15CaB14738F1dA6f654845F68e4b\",\n  [ChainId.AURORA_TESTNET]: \"0x05f928E1EA9D0398790FbB4e6ED0d5719fF6aBB7\",\n  [ChainId.AURORA_PRIVATENET]: \"0xD4A13F9F555b15CaB14738F1dA6f654845F68e4b\"\n};\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  [ChainId.ROPSTEN]: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n  [ChainId.RINKEBY]: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n  [ChainId.GÖRLI]: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n  [ChainId.KOVAN]: \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\",\n  [ChainId.ARBITRUM]: \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x3C5696EC7f7A963060137194c5a544072db3b2C1\",\n  [ChainId.BSC]: \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n  [ChainId.FANTOM]: \"0x74b23882a30290451A17c44f4F05243b6b58C76d\",\n  [ChainId.MATIC]: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n  [ChainId.OKEX]: \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n  [ChainId.HECO]: \"0x64FF637fB478863B7468bc97D30a5bF3A428a1fD\",\n  [ChainId.HARMONY]: \"0x6983D1E6DEf3690C4d616b13597A09e6193EA013\",\n  [ChainId.XDAI]: \"0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1\",\n  [ChainId.AVALANCHE]: \"0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15\",\n  [ChainId.AURORA]: \"0xfDFfbb456257B5423770e37E43725fEF1DDD0B68\",\n  [ChainId.AURORA_TESTNET]: \"0xbE911044046fBe5F9B2783702661A5C87F5ECbD8\",\n  [ChainId.AURORA_PRIVATENET]: \"0xfDFfbb456257B5423770e37E43725fEF1DDD0B68\"\n};\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n  [ChainId.FANTOM_TESTNET]: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n  [ChainId.MATIC]: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n  [ChainId.MATIC_TESTNET]: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n  [ChainId.XDAI]: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\",\n  [ChainId.BSC]: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n  [ChainId.BSC_TESTNET]: \"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\",\n  [ChainId.MOONBEAM_TESTNET]: \"0xe73763DB808ecCDC0E36bC8E32510ED126910394\",\n  [ChainId.AVALANCHE]: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n  [ChainId.AVALANCHE_TESTNET]: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n  [ChainId.HECO]: \"0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F\",\n  [ChainId.HECO_TESTNET]: \"0x5B2DA6F42CA09C77D577a12BeaD0446148830687\",\n  [ChainId.HARMONY]: \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\",\n  [ChainId.HARMONY_TESTNET]: \"0x7a2afac38517d512E55C0bCe3b6805c10a04D60F\",\n  [ChainId.OKEX]: \"0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15\",\n  [ChainId.OKEX_TESTNET]: \"0x2219845942d28716c0F7C605765fABDcA1a7d9E0\",\n  [ChainId.CELO]: \"0x471EcE3750Da237f93B8E339c536989b8978a438\",\n  [ChainId.PALM]: \"0xF98cABF0a963452C5536330408B2590567611a71\",\n  [ChainId.MOONRIVER]: \"0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d\",\n  [ChainId.AURORA]: WETH9_ADDRESS[ChainId.AURORA],\n  [ChainId.AURORA_TESTNET]: WETH9_ADDRESS[ChainId.AURORA_TESTNET],\n  [ChainId.AURORA_PRIVATENET]: WETH9_ADDRESS[ChainId.AURORA_PRIVATENET]\n};\n\nexport const CELL_WNEAR: AddressMap = {\n  [ChainId.AURORA]: \"0xcA5eD5745890C66026400F9b805466fB3984A345\",\n  [ChainId.AURORA_TESTNET]: \"0x6fA71f29e5c00116AA510930648C612Fa5587165\",\n  [ChainId.AURORA_PRIVATENET]: \"0xcA5eD5745890C66026400F9b805466fB3984A345\"\n};\n\nexport const CELL_WETH: AddressMap = {\n  [ChainId.AURORA]: \"0xD305204424F1232473aaD082111c2750f6d3e485\",\n  [ChainId.AURORA_TESTNET]: \"0x3313a8c97aE89eAa408C1E794f29c2B432c4C6eE\",\n  [ChainId.AURORA_PRIVATENET]: \"0xD305204424F1232473aaD082111c2750f6d3e485\"\n};\n\nexport const CELL_RUSD: AddressMap = {\n  [ChainId.AURORA]: \"0x7EB3c48b9d2A50d394686C95582C1ed22d6aa457\",\n  [ChainId.AURORA_TESTNET]: \"0x40bDD43044E8E3dBB8E94CC67b0AB2442C51C0BC\",\n  [ChainId.AURORA_PRIVATENET]: \"0x7EB3c48b9d2A50d394686C95582C1ed22d6aa457\"\n};\n\nexport const CELL_WBTC: AddressMap = {\n  [ChainId.AURORA]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\",\n  [ChainId.AURORA_TESTNET]: \"0x8D8A94588D092C3B4Acd6Bb8BF009b6258320eed\",\n  [ChainId.AURORA_PRIVATENET]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\"\n};\n\nexport const WETH_USDC: AddressMap = {\n  [ChainId.ARBITRUM]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\"\n};\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.ROPSTEN]: \"0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF\",\n  [ChainId.RINKEBY]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.GÖRLI]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.KOVAN]: \"0x9A0D9920D92c178a58D99B455898Df2df22A2eE4\",\n  [ChainId.FANTOM]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x0319000133d3AdA02600f0875d2cf03D442C3367\",\n  [ChainId.MATIC_TESTNET]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.XDAI]: \"0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324\",\n  [ChainId.BSC]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.BSC_TESTNET]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.ARBITRUM]: \"0x74c764D41B77DBbb4fe771daB1939B00b146894A\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x7a6DA9903d0a481F40b8336c1463487BC8C0407e\",\n  [ChainId.BSC]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x1766733112408b95239aD1951925567CB1203084\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9\",\n  [ChainId.BSC]: \"0x1766733112408b95239aD1951925567CB1203084\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x1766733112408b95239aD1951925567CB1203084\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x545820d5Cc05248da112419fEfb18522c63C8e12\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x73BE093B84c773fe8eE0f76DDc0829E45c215415\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93\",\n  [ChainId.BSC]: \"0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0xbe7D5968296843756109D42946D01195320922EF\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xDB6C4EDd9545d3b815dA85E6429B699c418886f9\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x07b6e34EeCF38B02e83b6B4702699717e298967E\",\n  [ChainId.BSC]: \"0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0x860D841bfD1cfEf72A14B2b734005799F07dC7ED\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const PEGGED_ORACLE_ADDRESS =\n  \"0x6cbfbB38498Df0E1e7A4506593cDB02db9001564\";\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS =\n  \"0x66F03B0d30838A3fee971928627ea6F59B236065\";\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS =\n  \"0x0D51b575591F8f74a2763Ade75D3CDCf6789266f\";\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.MATIC]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.XDAI]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.BSC]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.ARBITRUM]: \"0xB2B5C26B6868be10fF77e4E233fD231ceB90162a\"\n};\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F\",\n  [ChainId.BSC]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0x37B3287292De241278fB5FCa514a756E0BE924f8\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x9917C083FF9FbD29Df1367FBF7F2388A9a202431\"\n};\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.XDAI]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.HARMONY]: \"0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287\",\n  [ChainId.ARBITRUM]: \"0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3\"\n};\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d\"\n};\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  [ChainId.GÖRLI]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  [ChainId.ROPSTEN]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  [ChainId.RINKEBY]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n};\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2\",\n  [ChainId.ROPSTEN]: \"0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2\"\n};\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982\",\n  [ChainId.ROPSTEN]: \"0x84d1f7202e0e7dac211617017ca72a2cb5e2b955\"\n};\n\nexport const INIT_CODE_HASH = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"\",\n  [ChainId.AURORA]:\n    \"0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed\",\n  [ChainId.AURORA_TESTNET]:\n    \"0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed\",\n  [ChainId.AURORA_PRIVATENET]:\n    \"0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed\",\n  [ChainId.ARBITRUM]:\n    \"0x1e945012ec2c9d8fe6135daea3b8ff4eab0f4089308d5c6c1e336ed4bdbac5f8\",\n  [ChainId.ARBITRUM_TESTNET]:\n    \"0x1e945012ec2c9d8fe6135daea3b8ff4eab0f4089308d5c6c1e336ed4bdbac5f8\"\n};\n\nexport const LP_IDENTIFIER_NAME = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"\",\n  [ChainId.AURORA]: \"Cell LP Token\",\n  [ChainId.AURORA_TESTNET]: \"tCell LP Token\",\n  [ChainId.AURORA_PRIVATENET]: \"tCell LP Token\",\n  [ChainId.ARBITRUM]: \"Cortex LP Token\",\n  [ChainId.ARBITRUM_TESTNET]: \"tCortex LP Token\"\n};\n\nexport const LP_IDENTIFIER_SYMBOL = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"\",\n  [ChainId.AURORA]: \"CELL-LP\",\n  [ChainId.AURORA_TESTNET]: \"tCELL-LP\",\n  [ChainId.AURORA_PRIVATENET]: \"tCELL-LP\",\n  [ChainId.ARBITRUM]: \"CRX-LP\",\n  [ChainId.ARBITRUM_TESTNET]: \"tCRX-LP\"\n};\n","import { BigNumber } from '@ethersproject/bignumber'\n\n// Functions that need accrue to be called\nexport const ACTION_ADD_ASSET = 1\nexport const ACTION_REPAY = 2\nexport const ACTION_REMOVE_ASSET = 3\nexport const ACTION_REMOVE_COLLATERAL = 4\nexport const ACTION_BORROW = 5\nexport const ACTION_GET_REPAY_SHARE = 6\nexport const ACTION_GET_REPAY_PART = 7\nexport const ACTION_ACCRUE = 8\n\n// Functions that don't need accrue to be called\nexport const ACTION_ADD_COLLATERAL = 10\nexport const ACTION_UPDATE_EXCHANGE_RATE = 11\n\n// Function on BentoBox\nexport const ACTION_BENTO_DEPOSIT = 20\nexport const ACTION_BENTO_WITHDRAW = 21\nexport const ACTION_BENTO_TRANSFER = 22\nexport const ACTION_BENTO_TRANSFER_MULTIPLE = 23\nexport const ACTION_BENTO_SETAPPROVAL = 24\n\n// Any external call (except to BentoBox)\nexport const ACTION_CALL = 30\n\nexport const MINIMUM_TARGET_UTILIZATION = BigNumber.from('700000000000000000') // 70%\n\nexport const MAXIMUM_TARGET_UTILIZATION = BigNumber.from('800000000000000000') // 80%\n\nexport const UTILIZATION_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION.sub(MAXIMUM_TARGET_UTILIZATION)\n\nexport const STARTING_INTEREST_PER_YEAR = BigNumber.from(317097920)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1% APR\n\nexport const MINIMUM_INTEREST_PER_YEAR = BigNumber.from(79274480)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 0.25% APR\n\nexport const MAXIMUM_INTEREST_PER_YEAR = BigNumber.from(317097920000)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1000% APR\n\nexport const INTEREST_ELASTICITY = BigNumber.from('28800000000000000000000000000000000000000') // Half or double in 28800 seconds (8 hours) if linear\n\nexport const FACTOR_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const PROTOCOL_FEE = BigNumber.from('10000') // 10%\n\nexport const PROTOCOL_FEE_DIVISOR = BigNumber.from('100000')\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from \"./addresses\";\n\nimport { ChainId } from \"../enums\";\nimport { Token } from \"../entities/Token\";\nimport { TokenMap } from \"../types/TokenMap\";\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    USDC_ADDRESS[ChainId.MAINNET],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    USDC_ADDRESS[ChainId.ROPSTEN],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.KOVAN]: new Token(\n    ChainId.KOVAN,\n    USDC_ADDRESS[ChainId.KOVAN],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    USDC_ADDRESS[ChainId.MATIC],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    USDC_ADDRESS[ChainId.FANTOM],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    USDC_ADDRESS[ChainId.BSC],\n    18,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    USDC_ADDRESS[ChainId.HARMONY],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    USDC_ADDRESS[ChainId.HECO],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    USDC_ADDRESS[ChainId.OKEX],\n    18,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    USDC_ADDRESS[ChainId.XDAI],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    USDC_ADDRESS[ChainId.ARBITRUM],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.AURORA]: new Token(\n    ChainId.AURORA,\n    USDC_ADDRESS[ChainId.AURORA],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  )\n};\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    WETH9_ADDRESS[ChainId.MAINNET],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    WETH9_ADDRESS[ChainId.ROPSTEN],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    WETH9_ADDRESS[ChainId.RINKEBY],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.GÖRLI]: new Token(\n    ChainId.GÖRLI,\n    WETH9_ADDRESS[ChainId.GÖRLI],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.KOVAN]: new Token(\n    ChainId.KOVAN,\n    WETH9_ADDRESS[ChainId.KOVAN],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    WETH9_ADDRESS[ChainId.ARBITRUM],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    WETH9_ADDRESS[ChainId.BSC],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    WETH9_ADDRESS[ChainId.FANTOM],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    WETH9_ADDRESS[ChainId.MATIC],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    WETH9_ADDRESS[ChainId.OKEX],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    WETH9_ADDRESS[ChainId.HECO],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    WETH9_ADDRESS[ChainId.HARMONY],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    WETH9_ADDRESS[ChainId.XDAI],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    WETH9_ADDRESS[ChainId.AVALANCHE],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  )\n};\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    WNATIVE_ADDRESS[ChainId.FANTOM],\n    18,\n    \"WFTM\",\n    \"Wrapped FTM\"\n  ),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    \"FTM\",\n    \"Wrapped FTM\"\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    WNATIVE_ADDRESS[ChainId.MATIC],\n    18,\n    \"WMATIC\",\n    \"Wrapped Matic\"\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    \"WMATIC\",\n    \"Wrapped Matic\"\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    WNATIVE_ADDRESS[ChainId.XDAI],\n    18,\n    \"WXDAI\",\n    \"Wrapped xDai\"\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    WNATIVE_ADDRESS[ChainId.BSC],\n    18,\n    \"WBNB\",\n    \"Wrapped BNB\"\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    \"WBNB\",\n    \"Wrapped BNB\"\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE],\n    18,\n    \"WAVAX\",\n    \"Wrapped AVAX\"\n  ),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    \"WAVAX\",\n    \"Wrapped AVAX\"\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    WNATIVE_ADDRESS[ChainId.HECO],\n    18,\n    \"WHT\",\n    \"Wrapped HT\"\n  ),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    \"WHT\",\n    \"Wrapped HT\"\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    WNATIVE_ADDRESS[ChainId.HARMONY],\n    18,\n    \"WONE\",\n    \"Wrapped ONE\"\n  ),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    \"WONE\",\n    \"Wrapped ONE\"\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    WNATIVE_ADDRESS[ChainId.OKEX],\n    18,\n    \"WOKT\",\n    \"Wrapped OKExChain\"\n  ),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    \"WOKT\",\n    \"Wrapped OKExChain\"\n  ),\n  [ChainId.CELO]: new Token(\n    ChainId.CELO,\n    WNATIVE_ADDRESS[ChainId.CELO],\n    18,\n    \"CELO\",\n    \"Celo\"\n  ),\n  [ChainId.PALM]: new Token(\n    ChainId.PALM,\n    WNATIVE_ADDRESS[ChainId.PALM],\n    18,\n    \"WPALM\",\n    \"Wrapped Palm\"\n  ),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    \"WMOVR\",\n    \"Wrapped Moonriver\"\n  ),\n  [ChainId.AURORA]: new Token(\n    ChainId.AURORA,\n    WNATIVE_ADDRESS[ChainId.AURORA],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  ),\n  [ChainId.AURORA_TESTNET]: new Token(\n    ChainId.AURORA_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AURORA_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  ),\n  [ChainId.AURORA_PRIVATENET]: new Token(\n    ChainId.AURORA_PRIVATENET,\n    WNATIVE_ADDRESS[ChainId.AURORA_PRIVATENET],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  )\n};\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Aurora extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Aurora')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Aurora } = {}\n\n  public static onChain(chainId: number): Aurora {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Aurora(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Aurora,\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.AURORA]: Aurora.onChain(ChainId.AURORA),\n  [ChainId.AURORA_TESTNET]: Aurora.onChain(ChainId.AURORA_TESTNET),\n  [ChainId.AURORA_PRIVATENET]: Aurora.onChain(ChainId.AURORA_PRIVATENET)\n}\n","import JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './kashi'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const LAMBDA_URL = 'https://9epjsvomc4.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const SOCKET_URL = 'wss://hfimt374ge.execute-api.us-east-1.amazonaws.com/dev'\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      )\n    ]\n  )\n","import { Fee } from '../enums'\nimport { Token } from '../entities'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst MASTER_DEPLOYER_ADDRESS = '0xa2A7Aa74cb94f37221FD49F5BA6F3fF876092700'\n\nconst CONSTANT_PRODUCT_POOL_CREATION_CODE =\n  '0x6101806040523480156200001257600080fd5b5060405162004195380380620041958339810160408190526200003591620005d2565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c0016040516020818303038152906040528051906020012060808181525050506000806000808580602001905181019062000132919062000572565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b6001600160a01b038416301415620002365760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b6001600160a01b038316301415620002815760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b612710821115620002c85760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b038816916200030c9190620006b9565b600060405180830381855afa9150503d806000811462000349576040519150601f19603f3d011682016040523d82523d6000602084013e6200034e565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03891691620003979190620006b9565b600060405180830381855afa9150503d8060008114620003d4576040519150601f19603f3d011682016040523d82523d6000602084013e620003d9565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b038a1691620004229190620006b9565b600060405180830381855afa9150503d80600081146200045f576040519150601f19603f3d011682016040523d82523d6000602084013e62000464565b606091505b506001600160601b031960608a811b82166101405289901b166101605260a087905261271087900360c0528451909250620004aa9150840160209081019085016200069f565b6004558151620004c490830160209081019084016200054b565b60601b6001600160601b03191660e0528051620004eb90602090830181019083016200054b565b6001600160601b0319606091821b8116610100529089901b1661012052600160095583156200052a57600880546001600160e01b0316600160e01b1790555b50505050505050505062000739565b8051620005468162000720565b919050565b6000602082840312156200055e57600080fd5b81516200056b8162000720565b9392505050565b600080600080608085870312156200058957600080fd5b8451620005968162000720565b6020860151909450620005a98162000720565b6040860151606087015191945092508015158114620005c757600080fd5b939692955090935050565b60008060408385031215620005e657600080fd5b82516001600160401b0380821115620005fe57600080fd5b818501915085601f8301126200061357600080fd5b8151818111156200062857620006286200070a565b604051601f8201601f19908116603f011681019083821181831017156200065357620006536200070a565b816040528281528860208487010111156200066d57600080fd5b62000680836020830160208801620006d7565b8096505050505050620006966020840162000539565b90509250929050565b600060208284031215620006b257600080fd5b5051919050565b60008251620006cd818460208701620006d7565b9190910192915050565b60005b83811015620006f4578181015183820152602001620006da565b8381111562000704576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200073657600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61390062000895600039600081816105b301528181610791015281816108c00152818161096e01528181610ff6015281816110fe01528181611336015281816113a5015281816115e701528181611fc30152818161204a01526129e701526000818161032e0152818161070d01528181610a5301528181610b8201528181610fca01528181611095015281816112e2015281816114860152818161157901528181611d24015281816120830152818161216e01526128e801526000818161058c015281816118070152611c240152600081816103f901528181612650015281816127c6015281816128ac0152612a900152600081816102e20152612eb3015260006125520152600081816104200152818161315501526131c00152600081816103d2015261233901526139006000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063627dd56a1161012a578063a69840a8116100bd578063c14ad8021161008c578063d21220a711610071578063d21220a7146105ae578063d505accf146105d5578063dd62ed3e146105e857600080fd5b8063c14ad8021461057e578063cf58879a1461058757600080fd5b8063a69840a81461051e578063a8f1f52e14610545578063a9059cbb14610558578063af8c09bf1461056b57600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104a55780637ecebe00146104b857806392bc3219146104d857806395d89b41146104e257600080fd5b8063627dd56a1461045457806367e4ac2c1461046757806370a082311461047c5780637464fc3d1461049c57600080fd5b80632a07b6c7116101a25780634da31827116101715780634da31827146103f457806354cf2aeb1461041b5780635909c0d5146104425780635a3d54931461044b57600080fd5b80632a07b6c71461036c57806330adf81f1461038c578063313ce567146103b35780633644e515146103cd57600080fd5b80630c0a0cd2116101de5780630c0a0cd2146102dd5780630dfe16811461032957806318160ddd1461035057806323b872dd1461035957600080fd5b8063053da1c81461021057806306fdde03146102365780630902f1ac1461027f578063095ea7b3146102ba575b600080fd5b61022361021e366004613566565b610613565b6040519081526020015b60405180910390f35b6102726040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161022d9190613716565b610287610c3e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161022d565b6102cd6102c8366004613449565b610ca7565b604051901515815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61022360005481565b6102cd6103673660046134ae565b610d20565b61037f61037a366004613566565b610e6c565b60405161022d91906136b1565b6102237f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103bb601281565b60405160ff909116815260200161022d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61022360055481565b61022360065481565b610223610462366004613566565b6111e1565b61046f611557565b60405161022d9190613657565b61022361048a36600461327d565b60016020526000908152604090205481565b61022360075481565b6102236104b3366004613566565b611656565b6102236104c636600461327d565b60036020526000908152604090205481565b6104e0611bb2565b005b6102726040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102237f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b610223610553366004613566565b611cad565b6102cd610566366004613449565b611de0565b610223610579366004613566565b611e65565b61022360045481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6104e06105e33660046134ef565b61220e565b6102236105f6366004613475565b600260209081526000928352604080842090915290825290205481565b6000600954600114610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260095560008080808061069d87890189613305565b9450945094509450945060008060006107056008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561096c5761078a85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b98506107b87f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107f4908790600401613716565b600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506000806108316128a5565b9150915086856dffffffffffffffffffffffffffff16830310156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b6108be8282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161095d929190918252602082015260400190565b60405180910390a45050610c2a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b610a4c85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661254a565b9850610a7a7f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610ab6908790600401613716565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050600080610af36128a5565b9150915086846dffffffffffffffffffffffffffff1682031015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b610b808282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610c1f929190918252602082015260400190565b60405180910390a450505b505060016009555094979650505050505050565b6000806000610c9c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d0f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610dbd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610db7908490613792565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610df2908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5a9086815260200190565b60405180910390a35060019392505050565b6060600954600114610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b6002600955600080610eee84860186613414565b915091506000806000610f506008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f616128a5565b60008054308252600160205260409091205492945090925090610f85878784612e33565b90910190600082610f968684613755565b610fa09190613741565b9050600083610faf8685613755565b610fb99190613741565b9050610fc53084612ee2565b610ff17f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b61101d7f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b8186039550808503945061103486868b8b8b612b1d565b6110466110418688613755565b612f75565b6007556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161105f579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110e6576110e6613847565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c60018151811061114f5761114f613847565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111c2929190918252602082015260400190565b60405180910390a35050600160095550979a9950505050505050505050565b600060095460011461124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611264858701876132be565b92509250925060008060006112c86008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112d96128a5565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156113a3577f00000000000000000000000000000000000000000000000000000000000000009050866dffffffffffffffffffffffffffff168403915061139782886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff1661254a565b9a508a830392506114bf565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b50506008546dffffffffffffffffffffffffffff6e01000000000000000000000000000090910481168203907f0000000000000000000000000000000000000000000000000000000000000000906114b7908390888116908a1661254a565b9a508a840393505b6114cb818c8b8b6125ad565b6114d88484898989612b1d565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610c1f929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115ab576115ab613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061161957611619613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006009546001146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560006116d78385018561327d565b905060008060006117376008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806117486128a5565b600054919350915061175b868683612e33565b0160006117786dffffffffffffffffffffffffffff881685613792565b905060006117966dffffffffffffffffffffffffffff881685613792565b90506000806117c784848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff166130fa565b909250905060006117ef6117db8389613792565b6117e5858b613792565b6110419190613755565b905085611a705761180360006103e86131fd565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a391906132a1565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119dd578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194191906135d8565b9d508d1580159061197257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8e14155b6119d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c49515549444954590000000000000000000000604482015260640161067d565b611a6a565b73ffffffffffffffffffffffffffffffffffffffff811615611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f5200000000000000000000000000000000000000604482015260640161067d565b611a676103e883613792565b9d505b50611ab8565b6000611a926110416dffffffffffffffffffffffffffff808e16908f16613755565b90508087611aa08285613792565b611aaa9190613755565b611ab49190613741565b9d50505b8c611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015260640161067d565b611b298c8e6131fd565b611b3688888d8d8d612b1d565b611b43611041888a613755565b600755604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a91015b60405180910390a35050600160095550989b9a5050505050505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691611c4f919061363b565b600060405180830381855afa9150503d8060008114611c8a576040519150601f19603f3d011682016040523d82523d6000602084013e611c8f565b606091505b5091505080806020019051810190611ca791906135d8565b60045550565b60008080611cbd84860186613449565b91509150600080611d1d6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611da857611da183836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1661254a565b9450611dd6565b611dd383826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b94505b5050505092915050565b33600090815260016020526040812080548391908390611e01908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d0f9086815260200190565b6000600954600114611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611ee8858701876132be565b9250925092506000806000611f4c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611f5d6128a5565b60008054308252600160205260409091205492945090925090611f81878784612e33565b90910190600082611f928684613755565b611f9c9190613741565b9050600083611fab8685613755565b611fb59190613741565b9050611fc13084612ee2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156120815761204482838b6dffffffffffffffffffffffffffff1603838b6dffffffffffffffffffffffffffff160361254a565b016120717f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b9b5050918a90039160008b6121a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e000000000000000000000000604482015260640161067d565b61216581828a6dffffffffffffffffffffffffffff1603848c6dffffffffffffffffffffffffffff160361254a565b820191506121957f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b509a50928a9003928a60005b6121ae86868b8b8b612b1d565b6121bb6110418688613755565b600755604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364969101611b92565b42841015612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061246c57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6124d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e41545552450000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000806125777f000000000000000000000000000000000000000000000000000000000000000086613755565b90508061258661271086613755565b6125909190613729565b61259a8483613755565b6125a49190613741565b95945050505050565b801561272f576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f00000000000000000000000000000000000000000000000000000000000000009091169161267c9161363b565b6000604051808303816000865af19150503d80600081146126b9576040519150601f19603f3d011682016040523d82523d6000602084013e6126be565b606091505b5050905080612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c45440000000000000000000000000000000000604482015260640161067d565b5061289f565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f000000000000000000000000000000000000000000000000000000000000000016916127f09161363b565b6000604051808303816000865af19150503d806000811461282d576040519150601f19603f3d011682016040523d82523d6000602084013e612832565b606091505b505090508061289d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161067d565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f00000000000000000000000000000000000000000000000000000000000000003060405160240161293b92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612989919061363b565b600060405180830381855afa9150503d80600081146129c4576040519150601f19603f3d011682016040523d82523d6000602084013e6129c9565b606091505b50915050808060200190518101906129e191906135d8565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612abd919061363b565b600060405180830381855afa9150503d8060008114612af8576040519150601f19603f3d011682016040523d82523d6000602084013e612afd565b606091505b5091505080806020019051810190612b1591906135d8565b925050509091565b6dffffffffffffffffffffffffffff8511801590612b4957506dffffffffffffffffffffffffffff8411155b612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015260640161067d565b6008547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612c3357600880546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612df3565b6000612c44640100000000426137d5565b90508163ffffffff168163ffffffff1614158015612c7157506dffffffffffffffffffffffffffff841615155b8015612c8c57506dffffffffffffffffffffffffffff831615155b15612d515781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612cd757612cd7613818565b600580549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612d3257612d32613818565b0490508263ffffffff1681026006600082825401925050819055505050505b6008805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6007546000908015612eda576000612e616110416dffffffffffffffffffffffffffff808816908916613755565b905081811115612ed857612710816004548484612e7e9190613792565b612e889088613755565b612e929190613755565b612e9c9190613741565b612ea69190613741565b92508215612ed857612ed87f0000000000000000000000000000000000000000000000000000000000000000846131fd565b505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f17908490613792565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612f8457506000919050565b8160017001000000000000000000000000000000008210612faa5760809190911c9060401b5b680100000000000000008210612fc55760409190911c9060201b5b6401000000008210612fdc5760209190911c9060101b5b620100008210612ff15760109190911c9060081b5b61010082106130055760089190911c9060041b5b601082106130185760049190911c9060021b5b600882106130245760011b5b600181858161303557613035613818565b048201901c9050600181858161304d5761304d613818565b048201901c9050600181858161306557613065613818565b048201901c9050600181858161307d5761307d613818565b048201901c9050600181858161309557613095613818565b048201901c905060018185816130ad576130ad613818565b048201901c905060018185816130c5576130c5613818565b048201901c905060008185816130dd576130dd613818565b0490508082106130ed57806130ef565b815b93505050505b919050565b600080831580613108575082155b15613118575060009050806131f4565b6000846131258589613755565b61312f9190613741565b905085811161318a576131456127106002613755565b61314f8288613792565b613179907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131839190613741565b91506131f2565b6000846131978789613755565b6131a19190613741565b90506131b06127106002613755565b6131ba828a613792565b6131e4907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131ee9190613741565b9350505b505b94509492505050565b8060008082825461320e9190613729565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f69565b803580151581146130f557600080fd5b60006020828403121561328f57600080fd5b813561329a816138a5565b9392505050565b6000602082840312156132b357600080fd5b815161329a816138a5565b6000806000606084860312156132d357600080fd5b83356132de816138a5565b925060208401356132ee816138a5565b91506132fc6040850161326d565b90509250925092565b600080600080600060a0868803121561331d57600080fd5b8535613328816138a5565b94506020860135613338816138a5565b93506133466040870161326d565b925060608601359150608086013567ffffffffffffffff8082111561336a57600080fd5b818801915088601f83011261337e57600080fd5b81358181111561339057613390613876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133d6576133d6613876565b816040528281528b60208487010111156133ef57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561342757600080fd5b8235613432816138a5565b91506134406020840161326d565b90509250929050565b6000806040838503121561345c57600080fd5b8235613467816138a5565b946020939093013593505050565b6000806040838503121561348857600080fd5b8235613493816138a5565b915060208301356134a3816138a5565b809150509250929050565b6000806000606084860312156134c357600080fd5b83356134ce816138a5565b925060208401356134de816138a5565b929592945050506040919091013590565b600080600080600080600060e0888a03121561350a57600080fd5b8735613515816138a5565b96506020880135613525816138a5565b95506040880135945060608801359350608088013560ff8116811461354957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806020838503121561357957600080fd5b823567ffffffffffffffff8082111561359157600080fd5b818501915085601f8301126135a557600080fd5b8135818111156135b457600080fd5b8660208285010111156135c657600080fd5b60209290920196919550909350505050565b6000602082840312156135ea57600080fd5b5051919050565b600081518084526136098160208601602086016137a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161364d8184602087016137a9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156136a557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613673565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613709578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016136ce565b5091979650505050505050565b60208152600061329a60208301846135f1565b6000821982111561373c5761373c6137e9565b500190565b60008261375057613750613818565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561378d5761378d6137e9565b500290565b6000828210156137a4576137a46137e9565b500390565b60005b838110156137c45781810151838201526020016137ac565b8381111561289f5750506000910152565b6000826137e4576137e4613818565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138c757600080fd5b5056fea264697066735822122004f193ad403a2048e6ef0c1fc9da9b9f522fe2ad030c99737c73f0f04901cf7464736f6c63430008070033'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: CONSTANT_PRODUCT_POOL_CREATION_CODE,\n    deployData,\n    masterDeployerAddress: MASTER_DEPLOYER_ADDRESS\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class ConstantProductPool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = 25, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n      fee,\n      twap\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = 25,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997 // 3%\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { ChainId } from 'enums'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  chainId\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  chainId: ChainId\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[chainId]\n  )\n}\n","import {\n  FACTORY_ADDRESS,\n  FIVE,\n  LP_IDENTIFIER_NAME,\n  LP_IDENTIFIER_SYMBOL,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ZERO,\n  _1000,\n  _997\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const chainId = tokenA.chainId\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[chainId],\n      tokenA,\n      tokenB,\n      chainId\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      LP_IDENTIFIER_NAME[currencyAmounts[0].currency.chainId],\n      LP_IDENTIFIER_SYMBOL[currencyAmounts[0].currency.chainId]\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity'\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\nexport interface RouteLeg {\n  address: string\n  token: RToken\n  swapPortion: number // For router contract\n  absolutePortion: number // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial'\n}\nexport interface MultiRoute {\n  status: RouteStatus\n  amountIn: number\n  amountOut: number\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n}\n","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' }\n  ]\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' }\n  ]\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, STOP_LIMIT_ORDER_ADDRESS } from '../constants'\nimport { bentoTypes, name, types } from '../types'\n\nimport { ChainId } from 'enums'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString()\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval\n    },\n    privateKey\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n  RConcentratedLiquidityPool,\n  CL_MIN_TICK,\n  CL_MAX_TICK\n} from '../types/MultiRouterTypes'\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D)\n      .div(r0)\n      .mul(D)\n      .div(r1)\n      .div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(\n        nA\n          .div(A_PRECISION)\n          .sub(1)\n          .mul(D)\n          .add(dP.mul(3))\n      )\n    if (\n      D.sub(prevD)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION)\n    .div(nA)\n    .add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y\n      .mul(y)\n      .add(c)\n      .div(\n        y\n          .mul(2)\n          .add(b)\n          .sub(D)\n      )\n    if (\n      y\n        .sub(yPrev)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\n  if (pool.ticks.length === 0) return 0\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\n  let currentPrice = pool.sqrtPrice\n  let currentLiquidity = pool.liquidity\n  let outAmount = 0\n  let input = inAmount\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\n\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0\n\n    if (direction) {\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n        input = 0\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice)\n        currentPrice = nextTickPrice\n        input -= maxDx\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross--\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\n        input = 0\n      } else {\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        currentPrice = nextTickPrice\n        input -= maxDy\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross++\n      }\n    }\n\n    outAmount += output * (1 - pool.fee)\n    //console.log('out', outAmount);\n  }\n\n  return outAmount\n}\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t)\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10\n  return Math.abs(a / b - 1) < accuracy\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min, max\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(valueBN: BigNumber | undefined, value: number): BigNumber {\n  if (valueBN !== undefined) return valueBN\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(value) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(value / Math.pow(2, shift))\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return res\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pool, RToken, RouteLeg, MultiRoute, RouteStatus } from '../types/MultiRouterTypes'\nimport { ASSERT, calcInByOut, calcOutByIn, closeValues, calcPrice } from '../utils/MultiRouterMath'\n\nexport class Edge {\n  readonly GasConsumption = 40_000\n  readonly MINIMUM_LIQUIDITY = 1000\n  pool: Pool\n  vert0: Vertice\n  vert1: Vertice\n\n  canBeUsed: boolean\n  direction: boolean\n  amountInPrevious: number // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number // How many liquidity were passed from vert0 to vert1\n  bestEdgeIncome: number // debug data\n\n  constructor(p: Pool, v0: Vertice, v1: Vertice) {\n    this.pool = p\n    this.vert0 = v0\n    this.vert1 = v1\n    this.amountInPrevious = 0\n    this.amountOutPrevious = 0\n    this.canBeUsed = true\n    this.direction = true\n    this.bestEdgeIncome = 0\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1\n  }\n\n  calcOutput(v: Vertice, amountIn: number) {\n    const pool = this.pool\n    let out,\n      gas = this.amountInPrevious ? 0 : this.GasConsumption\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          out = this.amountInPrevious - calcInByOut(pool, this.amountOutPrevious - amountIn, true)\n        } else {\n          out = calcOutByIn(pool, amountIn - this.amountOutPrevious, false) + this.amountInPrevious\n        }\n        if (amountIn === this.amountOutPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption\n        }\n      } else {\n        out = calcOutByIn(pool, this.amountOutPrevious + amountIn, false) - this.amountInPrevious\n      }\n    } else {\n      if (this.direction) {\n        out = calcOutByIn(pool, this.amountInPrevious + amountIn, true) - this.amountOutPrevious\n      } else {\n        if (amountIn === this.amountInPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption\n        }\n        if (amountIn < this.amountInPrevious) {\n          out = this.amountOutPrevious - calcInByOut(pool, this.amountInPrevious - amountIn, false)\n        } else {\n          out = calcOutByIn(pool, amountIn - this.amountInPrevious, true) + this.amountOutPrevious\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return [out, gas]\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.reserve1.toString())\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.MINIMUM_LIQUIDITY\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.MINIMUM_LIQUIDITY\n      }\n    } else {\n      const r0 = parseInt(this.pool.reserve0.toString())\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.MINIMUM_LIQUIDITY\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.MINIMUM_LIQUIDITY\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut\n      const outInc = from === this.vert0 ? amountOut : -amountIn\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      if (inNew * outNew < 0) console.log('333')\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        directionNew = true\n        amountInNew = inNew\n        amountOutNew = outNew\n      } else {\n        directionNew = false\n        amountInNew = -inNew\n        amountOutNew = -outNew\n      }\n    } else console.error('Error 221')\n\n    if (directionNew) {\n      const calc = calcOutByIn(this.pool, amountInNew, directionNew)\n      const res = closeValues(amountOutNew, calc, 1e-6)\n      if (!res) console.log('Err 225-1 !!', amountOutNew, calc, Math.abs(calc / amountOutNew - 1))\n      return res\n    } else {\n      const calc = calcOutByIn(this.pool, amountOutNew, directionNew)\n      const res = closeValues(amountInNew, calc, 1e-6)\n      if (!res) console.log('Err 225-2!!', amountInNew, calc, Math.abs(calc / amountInNew - 1))\n      return res\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        this.direction = true\n        this.amountInPrevious = inNew\n        this.amountOutPrevious = outNew\n      } else {\n        this.direction = false\n        this.amountInPrevious = -inNew\n        this.amountOutPrevious = -outNew\n      }\n    } else console.error('Error 221')\n\n    ASSERT(() => {\n      if (this.direction)\n        return closeValues(this.amountOutPrevious, calcOutByIn(this.pool, this.amountInPrevious, this.direction), 1e-6)\n      else {\n        return closeValues(this.amountInPrevious, calcOutByIn(this.pool, this.amountOutPrevious, this.direction), 1e-6)\n      }\n    }, `Error 225`)\n  }\n}\n\nexport class Vertice {\n  token: RToken\n  edges: Edge[]\n\n  price: number\n  gasPrice: number\n\n  bestIncome: number // temp data used for findBestPath algorithm\n  gasSpent: number // temp data used for findBestPath algorithm\n  bestTotal: number // temp data used for findBestPath algorithm\n  bestSource?: Edge // temp data used for findBestPath algorithm\n  checkLine: number // debug data\n\n  constructor(t: RToken) {\n    this.token = t\n    this.edges = []\n    this.price = 0\n    this.gasPrice = 0\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  getNeibour(e?: Edge) {\n    if (!e) return\n    return e.vert0 === this ? e.vert1 : e.vert0\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[]\n  edges: Edge[]\n  tokens: Map<RToken, Vertice>\n\n  constructor(pools: Pool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = []\n    this.edges = []\n    this.tokens = new Map()\n    pools.forEach(p => {\n      const v0 = this.getOrCreateVertice(p.token0)\n      const v1 = this.getOrCreateVertice(p.token1)\n      const edge = new Edge(p, v0, v1)\n      v0.edges.push(edge)\n      v1.edges.push(edge)\n      this.edges.push(edge)\n    })\n    const baseVert = this.tokens.get(baseToken)\n    if (baseVert) {\n      this.setPrices(baseVert, 1, gasPrice)\n    }\n  }\n\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return\n    from.price = price\n    from.gasPrice = gasPrice\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0\n      if (v.price !== 0) return\n      let p = calcPrice(e.pool, 0, false)\n      if (from === e.vert0) p = 1 / p\n      this.setPrices(v, price * p, gasPrice / p)\n    })\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token)\n    if (vert) return vert\n    vert = new Vertice(token)\n    this.vertices.push(vert)\n    this.tokens.set(token, vert)\n    return vert\n  }\n\n  exportPath(from: RToken, to: RToken) {\n    //}, _route: MultiRoute) {\n    // const allPools = new Map<string, Pool>();\n    // this.edges.forEach(p => allPools.set(p.address, p));\n    // const usedPools = new Map<string, boolean>();\n    // route.legs.forEach(l => usedPools.set(l.address, l.token === allPools.get(l.address)?.token0))\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    // const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\n\n    const route = new Set<Edge>()\n    for (let v = toVert; v !== fromVert; v = v.getNeibour(v.bestSource) as Vertice) {\n      if (v.bestSource) route.add(v.bestSource)\n    }\n\n    // function edgeStyle(e: Edge) {\n    //   const finish = e.vert1.bestSource === e\n    //   const start = e.vert0.bestSource === e\n    //   let label\n    //   if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\n    //   if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\n    //   const edgeValue = route.has(e) ? 'value: 2' : undefined\n    //   let arrow\n    //   if (finish && start) arrow = 'arrows: \"from,to\"'\n    //   if (finish) arrow = 'arrows: \"to\"'\n    //   if (start) arrow = 'arrows: \"from\"'\n    //   return ['', label, edgeValue, arrow].filter(a => a !== undefined).join(', ')\n    // }\n\n    // function print(n: number, digits: number) {\n    //   let out\n    //   if (n === 0) out = '0'\n    //   else {\n    //     const n0 = n > 0 ? n : -n\n    //     const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\n    //     if (shift <= 0) out = `${Math.round(n0)}`\n    //     else {\n    //       const mult = Math.pow(10, shift)\n    //       out = `${Math.round(n0 * mult) / mult}`\n    //     }\n    //     if (n < 0) out = -out\n    //   }\n    //   return out\n    // }\n\n    // function nodeLabel(v: Vertice) {\n    //   const value = (v.bestIncome * v.price) / toVert.price\n    //   const income = `${print(value, 3)}`\n    //   const total = `${print(v.bestTotal, 3)}`\n    //   // const income = `${print((value/initValue-1)*100, 3)}%`\n    //   // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n    //   const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\n    //   return [checkLine, income, total].filter(a => a !== undefined).join(':')\n    // }\n\n    // const nodes = `var nodes = new vis.DataSet([\n    //   ${this.vertices.map(t => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\n    // ]);\\n`\n    // const edges = `var edges = new vis.DataSet([\n    //   ${this.edges.map(p => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`).join(',\\n\\t\\t')}\n    // ]);\\n`\n    // const data = `var data = {\n    //     nodes: nodes,\n    //     edges: edges,\n    // };\\n`\n\n    // const fs = require('fs')\n    // fs.writeFileSync('D:/Info/Notes/GraphVisualization/data.js', nodes + edges + data)\n  }\n\n  findBestPath(\n    from: RToken,\n    to: RToken,\n    amountIn: number\n  ):\n    | {\n        path: Edge[]\n        output: number\n        gasSpent: number\n        totalOutput: number\n      }\n    | undefined {\n    const start = this.tokens.get(from)\n    const finish = this.tokens.get(to)\n    if (!start || !finish) return\n\n    this.edges.forEach(e => (e.bestEdgeIncome = 0))\n    this.vertices.forEach(v => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountIn\n    start.bestTotal = amountIn\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal = -1\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.unshift(v.bestSource)\n        }\n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach(e => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome, gas\n        try {\n          ;[newIncome, gas] = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\n          e.bestEdgeIncome = -1\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price - newGasSpent * finish.gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, 'Error 373')\n        e.bestEdgeIncome = newIncome * price\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from\n    path.forEach(e => {\n      if (_from) {\n        e.applySwap(_from)\n        _from = _from.getNeibour(e)\n      } else {\n        console.error('Unexpected 315')\n      }\n    })\n\n    ASSERT(() => {\n      const res = this.vertices.every(v => {\n        let total = 0\n        let totalModule = 0\n        v.edges.forEach(e => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious\n            } else {\n              total += e.amountInPrevious\n            }\n            totalModule += e.amountInPrevious\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious\n            } else {\n              total -= e.amountOutPrevious\n            }\n            totalModule += e.amountOutPrevious\n          }\n        })\n        if (v === from) return total <= 0\n        if (v === to) return total >= 0\n        if (totalModule === 0) return total === 0\n        return Math.abs(total / totalModule) < 1e10\n      })\n      return res\n    }, 'Error 290')\n  }\n\n  findBestRoute(from: RToken, to: RToken, amountIn: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map(e => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach(e => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let output = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPath(from, to, amountIn * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        output += p.output\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from), this.tokens.get(to), p.path)\n        totalrouted += routeValues[step]\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        amountIn: 0,\n        amountOut: 0,\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    const [legs, gasSpent, topologyWasChanged] = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn, to)\n    }\n\n    return {\n      status,\n      amountIn: amountIn * totalrouted,\n      amountOut: output,\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice\n    }\n  }\n\n  getRouteLegs(from: Vertice, to: Vertice): [RouteLeg[], number, boolean] {\n    const [nodes, topologyWasChanged] = this.cleanTopology(from, to)\n    const legs: RouteLeg[] = []\n    let gasSpent = 0\n    nodes.forEach(n => {\n      const outEdges = this.getOutputEdges(n).map(e => {\n        const from = this.edgeFrom(e)\n        return from ? [e, from[0], from[1]] : [e]\n      })\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\n      if (outAmount <= 0) return\n\n      const total = outAmount\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\n        legs.push({\n          address: (e[0] as Edge).pool.address,\n          token: n.token,\n          swapPortion: quantity,\n          absolutePortion: p / total\n        })\n        gasSpent += (e[0] as Edge).pool.swapGasCost\n        outAmount -= p\n      })\n      console.assert(outAmount / total < 1e-12, 'Error 281')\n    })\n    return [legs, gasSpent, topologyWasChanged]\n  }\n\n  edgeFrom(e: Edge): [Vertice, number] | undefined {\n    if (e.amountInPrevious === 0) return undefined\n    return e.direction ? [e.vert0, e.amountInPrevious] : [e.vert1, e.amountOutPrevious]\n  }\n\n  getOutputEdges(v: Vertice): Edge[] {\n    return v.edges.filter(e => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction !== (e.vert0 === v)) return false\n      return true\n    })\n  }\n\n  getInputEdges(v: Vertice): Edge[] {\n    return v.edges.filter(e => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction === (e.vert0 === v)) return false\n      return true\n    })\n  }\n\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number, to: RToken) {\n    const amounts = new Map<RToken, number>()\n    amounts.set(legs[0].token, amountIn)\n    legs.forEach(l => {\n      const vert = this.tokens.get(l.token)\n      console.assert(vert !== undefined, 'Internal Error 570')\n      const edge = (vert as Vertice).edges.find(e => e.pool.address === l.address)\n      console.assert(edge !== undefined, 'Internel Error 569')\n      const pool = (edge as Edge).pool\n      const direction = vert === (edge as Edge).vert0\n\n      const inputTotal = amounts.get(l.token)\n      console.assert(inputTotal !== undefined, 'Internal Error 564')\n      const input = (inputTotal as number) * l.swapPortion\n      amounts.set(l.token, (inputTotal as number) - input)\n      const output = calcOutByIn(pool, input, direction)\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice\n      const prevAmount = amounts.get(vertNext.token)\n      amounts.set(vertNext.token, (prevAmount || 0) + output)\n    })\n    return amounts.get(to) || 0\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): [Vertice[], boolean] {\n    let topologyWasChanged = false\n    let result = this.topologySort(from, to)\n    if (result[0] !== 2) {\n      topologyWasChanged = true\n      console.assert(result[0] === 0, 'Internal Error 554')\n      while (result[0] === 0) {\n        this.removeWeakestEdge(result[1])\n        result = this.topologySort(from, to)\n      }\n      if (result[0] === 3) {\n        this.removeDeadEnds(result[1])\n        result = this.topologySort(from, to)\n      }\n      console.assert(result[0] === 2, 'Internal Error 563')\n      if (result[0] !== 2) return [[], topologyWasChanged]\n    }\n    return [result[1], topologyWasChanged]\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach(v => {\n      this.getInputEdges(v).forEach(e => {\n        e.canBeUsed = false\n      })\n    })\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice, minVertNext: Vertice\n    let minOutput = Number.MAX_VALUE\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\n      let out = 0\n      this.getOutputEdges(v1).forEach(e => {\n        if (v1.getNeibour(e) !== v2) return\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\n      })\n      if (out < minOutput) {\n        minVert = v1\n        minVertNext = v2\n        minOutput = out\n      }\n    })\n    // @ts-ignore\n    this.getOutputEdges(minVert).forEach(e => {\n      if (minVert.getNeibour(e) !== minVertNext) return\n      e.canBeUsed = false\n    })\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): [number, Vertice[]] {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>()\n    const vertsFinished: Vertice[] = []\n    const foundCycle: Vertice[] = []\n    const foundDeadEndVerts: Vertice[] = []\n\n    const that = this\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current)\n      if (state === 2 || state === 3) return state\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\n        foundCycle.push(current)\n        return 1\n      }\n      vertState.set(current, 1)\n\n      let successors2Exist = false\n      const outEdges = that.getOutputEdges(current)\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i]\n        const res = topSortRecursive(current.getNeibour(e) as Vertice)\n        if (res === 0) return 0\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0\n          else {\n            foundCycle.push(current)\n            return 1\n          }\n        }\n        if (res === 2) successors2Exist = true // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, 'Internal Error 589')\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current)\n          vertState.set(current, 3)\n          return 3\n        }\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      }\n    }\n\n    const res = topSortRecursive(from)\n    if (res === 0) return [0, foundCycle]\n    if (foundDeadEndVerts.length) return [3, foundDeadEndVerts]\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\n      return true\n    }, 'Internal Error 614')\n    if (res === 2) return [2, vertsFinished.reverse()]\n    console.assert(true, 'Internal Error 612')\n    return [1, []]\n  }\n}\n\nexport function findMultiRouting(\n  from: RToken,\n  to: RToken,\n  amountIn: number,\n  pools: Pool[],\n  baseToken: RToken,\n  gasPrice: number,\n  steps: number | number[] = 12\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from)\n  if (fromV?.price === 0) {\n    g.setPrices(fromV, 1, 0)\n  }\n  const out = g.findBestRoute(from, to, amountIn, steps)\n  return out\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { CurrencyAmount, Price, Token } from './entities'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId } from './enums'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/StopLimitOrder.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId\n      })\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n"],"names":["ChainId","Rounding","TradeType","KashiAction","Fee","OrderStatus","USDC_ADDRESS","_USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AURORA","FACTORY_ADDRESS","_FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","AURORA_TESTNET","AURORA_PRIVATENET","ROUTER_ADDRESS","_ROUTER_ADDRESS","SUSHI_ADDRESS","_SUSHI_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","CELL_WNEAR","_CELL_WNEAR","CELL_WETH","_CELL_WETH","CELL_RUSD","_CELL_RUSD","CELL_WBTC","_CELL_WBTC","WETH_USDC","_WETH_USDC","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","STOP_LIMIT_ORDER_ADDRESS","_STOP_LIMIT_ORDER_ADD","ARCHER_ROUTER_ADDRESS","_ARCHER_ROUTER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","INIT_CODE_HASH","_INIT_CODE_HASH","LP_IDENTIFIER_NAME","_LP_IDENTIFIER_NAME","LP_IDENTIFIER_SYMBOL","_LP_IDENTIFIER_SYMBOL","MINIMUM_TARGET_UTILIZATION","BigNumber","from","MAXIMUM_TARGET_UTILIZATION","UTILIZATION_PRECISION","FULL_UTILIZATION","FULL_UTILIZATION_MINUS_MAX","sub","STARTING_INTEREST_PER_YEAR","mul","MINIMUM_INTEREST_PER_YEAR","MAXIMUM_INTEREST_PER_YEAR","INTEREST_ELASTICITY","FACTOR_PRECISION","PROTOCOL_FEE","PROTOCOL_FEE_DIVISOR","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","NativeCurrency","_AbstractCurrency","_this","_inheritsLoose","validateAndParseAddress","address","getAddress","error","Token","call","_proto","prototype","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","_USDC","WETH9","_WETH","WNATIVE","_WNATIVE","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Aurora","SolidityType","NATIVE","_NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","LAMBDA_URL","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePoolInitCodeHash","keccak256","pack","creationCode","defaultAbiCoder","encode","deployData","masterDeployerAddress","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","_ref2","concat","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","getCreate2Address","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","ConstantProductPool","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token0","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","computePairAddress","Pair","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","PoolType","Trade","amount","tradeType","EXACT_INPUT","i","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","RouteStatus","Pool","_info","info","_extends","minLiquidity","swapGasCost","type","RConstantProductPool","_Pool","ConstantProduct","RHybridPool","_Pool2","Hybrid","A","RWeightedPool","_Pool3","Weighted","weight0","weight1","RConcentratedLiquidityPool","_Pool4","_this3","ConcentratedLiquidity","sqrtPrice","nearestTick","ticks","types","EIP712Domain","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","privateKey","sign","primaryType","domain","verifyingContract","getTypedData","getTypedDataBento","getTypeHash","typedData","getMessage","_signingKey$signDiges","SigningKey","signDigest","v","r","s","getSignatureWithProvider","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","_splitSignature","wrap","_context","prev","next","send","maker","JSON","stringify","splitSignature","sent","abrupt","stop","_x","_x2","_x3","apply","getSignatureWithProviderBentobox","_callee2","_splitSignature2","_context2","user","_x4","_x5","_x6","getSignatureBento","_ref3","_callee3","bentoApproval","_context3","_x7","_x8","_x9","DCacheBN","Map","HybridComputeLiquidity","pool","res","undefined","r0","r1","isZero","prevD","nA","D","dP","abs","lte","HybridgetY","yPrev","c","y","calcOutByIn","direction","xBN","yBN","parseInt","pow","yNewBN","getBigNumber","inAmount","index","unshift","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","outAmount","OutOfLiquidity","nextTickPrice","maxDx","maxDy","ConcentratedLiquidityOutByIn","calcInByOut","lt","xNewBN","round","console","calcPrice","takeFeeIntoAccount","oneMinusFee","weightRatio","hPool","ac4","ASSERT","f","t","closeValues","accuracy","revertPositive","out","hint","min","max","x0","y0","e","valueBN","exp","log","LN2","assert","shift","mant","Edge","p","v0","v1","vert0","vert1","amountInPrevious","amountOutPrevious","canBeUsed","bestEdgeIncome","reserve","calcOutput","gas","GasConsumption","checkMinimalLiquidityExceededAfterSwap","testApply","directionNew","inPrev","outPrev","amountInNew","amountOutNew","getNeibour","inNew","outNew","calc","applySwap","to","bestIncome","Vertice","edges","price","gasPrice","gasSpent","bestTotal","bestSource","checkLine","Graph","pools","baseToken","vertices","tokens","forEach","getOrCreateVertice","edge","baseVert","setPrices","_proto3","map","vert","exportPath","fromVert","toVert","Set","findBestPath","start","finish","processedVert","nextVertList","_loop","closestVert","closestTotal","closestPosition","bestPath","_v","totalOutput","v2","has","newIncome","_e$calcOutput","newGasSpent","newTotal","_ret","addPath","_from","_this4","total","totalModule","findBestRoute","mode","routeValues","isArray","sum","step","status","gasSpentInit","totalrouted","NoWay","legs","totalAmountOut","Partial","Success","_this$getRouteLegs","getRouteLegs","topologyWasChanged","calcLegsAmountOut","_this$cleanTopology","cleanTopology","n","outEdges","_this5","getOutputEdges","edgeFrom","swapPortion","absolutePortion","filter","getInputEdges","amounts","l","_this6","find","inputTotal","vertNext","prevAmount","topologySort","removeWeakestEdge","removeDeadEnds","verts","_this7","minVert","minVertNext","minOutput","MAX_VALUE","_this8","vertState","vertsFinished","foundCycle","foundDeadEndVerts","that","topSortRecursive","current","state","successors2Exist","reverse","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","startTime","endTime","stopPrice","oracleAddress","oracleData","getLimitOrder","data","tokenInDecimals","tokenInSymbol","tokenOutDecimals","tokenOutSymbol","usePrice","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","_getSignature","signOrderWithProvider","_signOrderWithProvider","_yield$getSignatureWi","_send","fetch","method","body","json","FillLimitOrder","amountExternal","amountToFill","limitOrderReceiver","keepTokenIn","limitOrderReceiverData","_proto2","fillOrderOpen","signer","extra","open","fillOrder","_fillOrder","nonce","_extra$forceExecution","forceExecution","_extra$open","func","orderArg","limitOrderContract","gasLimit","executed","Contract","abi","debug","estimateGas","t0","transaction","priceEffective","calcInputByPriceConstantMean","sqrtD","currencyA","currencyB","steps","g","fromV","solidityType"],"mappings":"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"}