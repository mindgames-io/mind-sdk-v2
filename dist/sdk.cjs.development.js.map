{"version":3,"file":"sdk.cjs.development.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/KashiAction.ts","../src/enums/Fee.ts","../src/enums/OrderStatus.ts","../src/constants/addresses.ts","../src/constants/kashi.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Aurora.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/index.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/functions/sqrt.ts","../src/entities/ConstantProductPool.ts","../src/functions/computePairAddress.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/types/MultiRouterTypes.ts","../src/types/LimitOrderTypes.ts","../src/entities/eip712.ts","../src/utils/MultiRouterMath.ts","../src/entities/MultiRouter.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts","../src/limitorder.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421613,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  AURORA = 1313161554,\n  AURORA_TESTNET = 1313161555,\n  AURORA_PRIVATENET = 1313161556\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","export enum KashiAction {\n  ADD_ASSET = 1,\n  REPAY = 2,\n  REMOVE_ASSET = 3,\n  REMOVE_COLLATERAL = 4,\n  BORROW = 5,\n  GET_REPAY_SHARE = 6,\n  GET_REPAY_PART = 7,\n  ACCRUE = 8,\n\n  // Functions that don't need accrue to be called\n  ADD_COLLATERAL = 10,\n  UPDATE_EXCHANGE_RATE = 11,\n\n  // Function on BentoBox\n  BENTO_DEPOSIT = 20,\n  BENTO_WITHDRAW = 21,\n  BENTO_TRANSFER = 22,\n  BENTO_TRANSFER_MULTIPLE = 23,\n  BENTO_SETAPPROVAL = 24,\n\n  // Any external call (except to BentoBox)\n  CALL = 30\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  DEFAULT = 30\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING'\n}\n","import { AddressMap } from \"../types\";\nimport { ChainId } from \"../enums\";\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n  [ChainId.ROPSTEN]: \"0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C\",\n  [ChainId.KOVAN]: \"0xb7a4F3E9097C08dA09517b5aB877F7a917224ede\",\n  [ChainId.MATIC]: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n  [ChainId.FANTOM]: \"0x04068DA6C83AFCFA0e13ba15A6696662335D5B75\",\n  [ChainId.BSC]: \"0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\",\n  [ChainId.HARMONY]: \"0x985458E523dB3d53125813eD68c274899e9DfAb4\",\n  [ChainId.HECO]: \"0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B\",\n  [ChainId.OKEX]: \"0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85\",\n  [ChainId.XDAI]: \"0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83\",\n  [ChainId.ARBITRUM]: \"0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8\",\n  [ChainId.AURORA]: \"0xB12BFcA5A55806AaF64E99521918A4bf0fC40802\"\n};\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\",\n  [ChainId.ROPSTEN]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.RINKEBY]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.GÖRLI]: \"0xE298D7455c9A83272960458D01556BE78535C64c\",\n  [ChainId.KOVAN]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.MATIC_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.XDAI]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.BSC]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.BSC_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.ARBITRUM]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.ARBITRUM_TESTNET]: \"0xE298D7455c9A83272960458D01556BE78535C64c\",\n  [ChainId.MOONBEAM_TESTNET]: \"0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5\",\n  [ChainId.AVALANCHE]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.AVALANCHE_TESTNET]: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n  [ChainId.HECO]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.HECO_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.HARMONY]: \"0x9014B937069918bd319f80e8B3BB4A2cf6FAA5F7\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.OKEX_TESTNET]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.CELO]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.PALM]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"0xc35DADB65012eC5796536bD9864eD8773aBc74C4\",\n  [ChainId.AURORA]: \"0x78f406B41C81eb4144C321ADa5902BBF5de28538\",\n  [ChainId.AURORA_TESTNET]: \"0x73E3B9e3584358a39c48DE028A6039DB2e38a896\",\n  [ChainId.AURORA_PRIVATENET]: \"0x78f406B41C81eb4144C321ADa5902BBF5de28538\"\n};\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F\",\n  [ChainId.RINKEBY]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.ROPSTEN]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.GÖRLI]: \"0xBD86FAe02323E03Fe34dC4C8960477b2E201A34a\",\n  [ChainId.KOVAN]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.MATIC_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.XDAI]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.BSC]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.BSC_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.ARBITRUM]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.ARBITRUM_TESTNET]: \"0xBD86FAe02323E03Fe34dC4C8960477b2E201A34a\",\n  [ChainId.MOONBEAM_TESTNET]: \"0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef\",\n  [ChainId.AVALANCHE]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.AVALANCHE_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.HECO]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.HECO_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.HARMONY]: \"0x24ad62502d1C652Cc7684081169D04896aC20f30\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.OKEX_TESTNET]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.CELO]: \"0x1421bDe4B10e8dd459b3BCb598810B1337D56842\",\n  [ChainId.PALM]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506\",\n  [ChainId.AURORA]: \"0xcCC7B6CD8764E84Be19BD13b25850C4ac24aa2C0\",\n  [ChainId.AURORA_TESTNET]: \"0xb165D400794BEF40cEd89B784920EB952cedE024\",\n  [ChainId.AURORA_PRIVATENET]: \"0xcCC7B6CD8764E84Be19BD13b25850C4ac24aa2C0\"\n};\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\",\n  [ChainId.ROPSTEN]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.RINKEBY]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.GÖRLI]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.KOVAN]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE\",\n  [ChainId.BSC]: \"0x947950BcC74888a40Ffa2593C5798F11Fc9124C4\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0xd4d42F0b6DEF4CE0383636770eF773390d85c61A\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x3579758b48372B65e0d4257E1AFA4775A366Ac57\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"0x8D760497554eecC3B9036fb0364156ef2F0D02BC\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0xa685F488DEe49b75469E9e866965daBc8Ed6083d\",\n  [ChainId.AURORA_TESTNET]: \"0x597c3b35fe89af28f0338B63d7d8e3319501393e\",\n  [ChainId.AURORA_PRIVATENET]: \"0xa685F488DEe49b75469E9e866965daBc8Ed6083d\"\n};\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd\",\n  [ChainId.ROPSTEN]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.RINKEBY]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.GÖRLI]: \"0x3985ae471c18E44757ef743616eB520697dE1EC2\",\n  [ChainId.KOVAN]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x3985ae471c18E44757ef743616eB520697dE1EC2\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0xe653f898b1F216884bC1Fdd5B47b9933B5F4e5FB\",\n  [ChainId.AURORA_TESTNET]: \"0xc58a0FF26AB29587A0D9e24131c9f23D51B6C67f\",\n  [ChainId.AURORA_PRIVATENET]: \"0xe653f898b1F216884bC1Fdd5B47b9933B5F4e5FB\"\n};\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272\",\n  [ChainId.ROPSTEN]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.RINKEBY]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.GÖRLI]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.KOVAN]: \"0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x7D4b00A486261De367B91eCd7233Ab85303fEaa6\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0xbe334d7208366B3E4Fb40348576227b524d8CBA0\",\n  [ChainId.AURORA_TESTNET]: \"0xd61a5f2Eda48F2e141fBD1496F7B4aE34a1cD2E1\",\n  [ChainId.AURORA_PRIVATENET]: \"0xbe334d7208366B3E4Fb40348576227b524d8CBA0\"\n};\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50\",\n  [ChainId.ROPSTEN]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.RINKEBY]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.GÖRLI]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.KOVAN]: \"0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x709Cb74F372d6168E665c180cED1d52E8a31A396\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.AURORA]: \"0x274676D087B066beD2d0010b89e763BBfAC8a1b2\",\n  [ChainId.AURORA_TESTNET]: \"0xbA01db73cE9b1e0Ea48E3363Ab63fccf1eedC8e0\",\n  [ChainId.AURORA_PRIVATENET]: \"0x274676D087B066beD2d0010b89e763BBfAC8a1b2\"\n};\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.ROPSTEN]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.RINKEBY]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.GÖRLI]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.KOVAN]: \"0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696\",\n  [ChainId.ARBITRUM]: \"0x80C7DD17B01855a6D2347444a0FCC36136a314de\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x5Fe063101d59F20fB1CE97239156B8170f57b71A\",\n  [ChainId.CELO]: \"0x9aac9048fC8139667D6a2597B902865bfdc225d3\",\n  [ChainId.FANTOM]: \"0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287\",\n  [ChainId.BSC]: \"0xa9193376D09C7f31283C54e56D013fCF370Cd9D9\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.PALM]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.MOONRIVER]: \"0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5\",\n  [ChainId.AURORA]: \"0xD4A13F9F555b15CaB14738F1dA6f654845F68e4b\",\n  [ChainId.AURORA_TESTNET]: \"0x05f928E1EA9D0398790FbB4e6ED0d5719fF6aBB7\",\n  [ChainId.AURORA_PRIVATENET]: \"0xD4A13F9F555b15CaB14738F1dA6f654845F68e4b\"\n};\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  [ChainId.ROPSTEN]: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n  [ChainId.RINKEBY]: \"0xc778417E063141139Fce010982780140Aa0cD5Ab\",\n  [ChainId.GÖRLI]: \"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6\",\n  [ChainId.KOVAN]: \"0xd0A1E359811322d97991E03f863a0C30C2cF029C\",\n  [ChainId.ARBITRUM]: \"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x3C5696EC7f7A963060137194c5a544072db3b2C1\",\n  [ChainId.BSC]: \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n  [ChainId.FANTOM]: \"0x74b23882a30290451A17c44f4F05243b6b58C76d\",\n  [ChainId.MATIC]: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\",\n  [ChainId.OKEX]: \"0x2170Ed0880ac9A755fd29B2688956BD959F933F8\",\n  [ChainId.HECO]: \"0x64FF637fB478863B7468bc97D30a5bF3A428a1fD\",\n  [ChainId.HARMONY]: \"0x6983D1E6DEf3690C4d616b13597A09e6193EA013\",\n  [ChainId.XDAI]: \"0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1\",\n  [ChainId.AVALANCHE]: \"0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15\",\n  [ChainId.AURORA]: \"0xfDFfbb456257B5423770e37E43725fEF1DDD0B68\",\n  [ChainId.AURORA_TESTNET]: \"0xbE911044046fBe5F9B2783702661A5C87F5ECbD8\",\n  [ChainId.AURORA_PRIVATENET]: \"0xfDFfbb456257B5423770e37E43725fEF1DDD0B68\"\n};\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\",\n  [ChainId.FANTOM_TESTNET]: \"0xf1277d1Ed8AD466beddF92ef448A132661956621\",\n  [ChainId.MATIC]: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n  [ChainId.MATIC_TESTNET]: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n  [ChainId.XDAI]: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\",\n  [ChainId.BSC]: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n  [ChainId.BSC_TESTNET]: \"0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\",\n  [ChainId.MOONBEAM_TESTNET]: \"0xe73763DB808ecCDC0E36bC8E32510ED126910394\",\n  [ChainId.AVALANCHE]: \"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\",\n  [ChainId.AVALANCHE_TESTNET]: \"0xd00ae08403B9bbb9124bB305C09058E32C39A48c\",\n  [ChainId.HECO]: \"0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F\",\n  [ChainId.HECO_TESTNET]: \"0x5B2DA6F42CA09C77D577a12BeaD0446148830687\",\n  [ChainId.HARMONY]: \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\",\n  [ChainId.HARMONY_TESTNET]: \"0x7a2afac38517d512E55C0bCe3b6805c10a04D60F\",\n  [ChainId.OKEX]: \"0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15\",\n  [ChainId.OKEX_TESTNET]: \"0x2219845942d28716c0F7C605765fABDcA1a7d9E0\",\n  [ChainId.CELO]: \"0x471EcE3750Da237f93B8E339c536989b8978a438\",\n  [ChainId.PALM]: \"0xF98cABF0a963452C5536330408B2590567611a71\",\n  [ChainId.MOONRIVER]: \"0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d\",\n  [ChainId.AURORA]: WETH9_ADDRESS[ChainId.AURORA],\n  [ChainId.AURORA_TESTNET]: WETH9_ADDRESS[ChainId.AURORA_TESTNET],\n  [ChainId.AURORA_PRIVATENET]: WETH9_ADDRESS[ChainId.AURORA_PRIVATENET]\n};\n\nexport const CELL_WNEAR: AddressMap = {\n  [ChainId.AURORA]: \"0xcA5eD5745890C66026400F9b805466fB3984A345\",\n  [ChainId.AURORA_TESTNET]: \"0x6fA71f29e5c00116AA510930648C612Fa5587165\",\n  [ChainId.AURORA_PRIVATENET]: \"0xcA5eD5745890C66026400F9b805466fB3984A345\"\n};\n\nexport const CELL_WETH: AddressMap = {\n  [ChainId.AURORA]: \"0xD305204424F1232473aaD082111c2750f6d3e485\",\n  [ChainId.AURORA_TESTNET]: \"0x3313a8c97aE89eAa408C1E794f29c2B432c4C6eE\",\n  [ChainId.AURORA_PRIVATENET]: \"0xD305204424F1232473aaD082111c2750f6d3e485\"\n};\n\nexport const CELL_RUSD: AddressMap = {\n  [ChainId.AURORA]: \"0x7EB3c48b9d2A50d394686C95582C1ed22d6aa457\",\n  [ChainId.AURORA_TESTNET]: \"0x40bDD43044E8E3dBB8E94CC67b0AB2442C51C0BC\",\n  [ChainId.AURORA_PRIVATENET]: \"0x7EB3c48b9d2A50d394686C95582C1ed22d6aa457\"\n};\n\nexport const CELL_WBTC: AddressMap = {\n  [ChainId.AURORA]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\",\n  [ChainId.AURORA_TESTNET]: \"0x8D8A94588D092C3B4Acd6Bb8BF009b6258320eed\",\n  [ChainId.AURORA_PRIVATENET]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\"\n};\n\nexport const WETH_USDC: AddressMap = {\n  [ChainId.ARBITRUM]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\",\n  [ChainId.ARBITRUM_TESTNET]: \"0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F\"\n};\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.ROPSTEN]: \"0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF\",\n  [ChainId.RINKEBY]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.GÖRLI]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.KOVAN]: \"0x9A0D9920D92c178a58D99B455898Df2df22A2eE4\",\n  [ChainId.FANTOM]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x0319000133d3AdA02600f0875d2cf03D442C3367\",\n  [ChainId.MATIC_TESTNET]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.XDAI]: \"0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324\",\n  [ChainId.BSC]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.BSC_TESTNET]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.ARBITRUM]: \"0x74c764D41B77DBbb4fe771daB1939B00b146894A\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x7a6DA9903d0a481F40b8336c1463487BC8C0407e\",\n  [ChainId.BSC]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x1766733112408b95239aD1951925567CB1203084\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9\",\n  [ChainId.BSC]: \"0x1766733112408b95239aD1951925567CB1203084\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x1766733112408b95239aD1951925567CB1203084\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x545820d5Cc05248da112419fEfb18522c63C8e12\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x73BE093B84c773fe8eE0f76DDc0829E45c215415\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93\",\n  [ChainId.BSC]: \"0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0xbe7D5968296843756109D42946D01195320922EF\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xDB6C4EDd9545d3b815dA85E6429B699c418886f9\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x07b6e34EeCF38B02e83b6B4702699717e298967E\",\n  [ChainId.BSC]: \"0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0x860D841bfD1cfEf72A14B2b734005799F07dC7ED\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const PEGGED_ORACLE_ADDRESS =\n  \"0x6cbfbB38498Df0E1e7A4506593cDB02db9001564\";\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS =\n  \"0x66F03B0d30838A3fee971928627ea6F59B236065\";\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS =\n  \"0x0D51b575591F8f74a2763Ade75D3CDCf6789266f\";\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.MATIC]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.XDAI]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.BSC]: \"0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB\",\n  [ChainId.ARBITRUM]: \"0xB2B5C26B6868be10fF77e4E233fD231ceB90162a\"\n};\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F\",\n  [ChainId.BSC]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"0x37B3287292De241278fB5FCa514a756E0BE924f8\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"0x11Ca5375AdAfd6205E41131A4409f182677996E6\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.MATIC]: \"0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.ARBITRUM]: \"\",\n  [ChainId.ARBITRUM_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\"\n};\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x9917C083FF9FbD29Df1367FBF7F2388A9a202431\"\n};\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: \"0x0769fd68dFb93167989C6f7254cd0D766Fb2841F\",\n  [ChainId.XDAI]: \"0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3\",\n  [ChainId.HARMONY]: \"0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287\",\n  [ChainId.ARBITRUM]: \"0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3\"\n};\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d\"\n};\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  [ChainId.GÖRLI]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  [ChainId.ROPSTEN]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  [ChainId.RINKEBY]: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n};\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2\",\n  [ChainId.ROPSTEN]: \"0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2\"\n};\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: \"0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982\",\n  [ChainId.ROPSTEN]: \"0x84d1f7202e0e7dac211617017ca72a2cb5e2b955\"\n};\n\nexport const INIT_CODE_HASH = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"\",\n  [ChainId.AURORA]:\n    \"0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed\",\n  [ChainId.AURORA_TESTNET]:\n    \"0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed\",\n  [ChainId.AURORA_PRIVATENET]:\n    \"0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed\",\n  [ChainId.ARBITRUM]:\n    \"0x7b0d9e776825d537a226aed658f6d2d3cc5dcd8ace78f1f7dbb220739466746e\",\n  [ChainId.ARBITRUM_TESTNET]:\n    \"0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed\"\n};\n\nexport const LP_IDENTIFIER_NAME = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"\",\n  [ChainId.AURORA]: \"Cell LP Token\",\n  [ChainId.AURORA_TESTNET]: \"tCell LP Token\",\n  [ChainId.AURORA_PRIVATENET]: \"tCell LP Token\",\n  [ChainId.ARBITRUM]: \"Cortex LP Token\",\n  [ChainId.ARBITRUM_TESTNET]: \"tCortex LP Token\"\n};\n\nexport const LP_IDENTIFIER_SYMBOL = {\n  [ChainId.MAINNET]: \"\",\n  [ChainId.ROPSTEN]: \"\",\n  [ChainId.RINKEBY]: \"\",\n  [ChainId.GÖRLI]: \"\",\n  [ChainId.KOVAN]: \"\",\n  [ChainId.MATIC]: \"\",\n  [ChainId.MATIC_TESTNET]: \"\",\n  [ChainId.FANTOM]: \"\",\n  [ChainId.FANTOM_TESTNET]: \"\",\n  [ChainId.XDAI]: \"\",\n  [ChainId.BSC]: \"\",\n  [ChainId.BSC_TESTNET]: \"\",\n  [ChainId.MOONBEAM_TESTNET]: \"\",\n  [ChainId.AVALANCHE]: \"\",\n  [ChainId.AVALANCHE_TESTNET]: \"\",\n  [ChainId.HECO]: \"\",\n  [ChainId.HECO_TESTNET]: \"\",\n  [ChainId.HARMONY]: \"\",\n  [ChainId.HARMONY_TESTNET]: \"\",\n  [ChainId.OKEX]: \"\",\n  [ChainId.OKEX_TESTNET]: \"\",\n  [ChainId.CELO]: \"\",\n  [ChainId.PALM]: \"\",\n  [ChainId.PALM_TESTNET]: \"\",\n  [ChainId.MOONRIVER]: \"\",\n  [ChainId.AURORA]: \"CELL-LP\",\n  [ChainId.AURORA_TESTNET]: \"tCELL-LP\",\n  [ChainId.AURORA_PRIVATENET]: \"tCELL-LP\",\n  [ChainId.ARBITRUM]: \"CRX-LP\",\n  [ChainId.ARBITRUM_TESTNET]: \"tCRX-LP\"\n};\n","import { BigNumber } from '@ethersproject/bignumber'\n\n// Functions that need accrue to be called\nexport const ACTION_ADD_ASSET = 1\nexport const ACTION_REPAY = 2\nexport const ACTION_REMOVE_ASSET = 3\nexport const ACTION_REMOVE_COLLATERAL = 4\nexport const ACTION_BORROW = 5\nexport const ACTION_GET_REPAY_SHARE = 6\nexport const ACTION_GET_REPAY_PART = 7\nexport const ACTION_ACCRUE = 8\n\n// Functions that don't need accrue to be called\nexport const ACTION_ADD_COLLATERAL = 10\nexport const ACTION_UPDATE_EXCHANGE_RATE = 11\n\n// Function on BentoBox\nexport const ACTION_BENTO_DEPOSIT = 20\nexport const ACTION_BENTO_WITHDRAW = 21\nexport const ACTION_BENTO_TRANSFER = 22\nexport const ACTION_BENTO_TRANSFER_MULTIPLE = 23\nexport const ACTION_BENTO_SETAPPROVAL = 24\n\n// Any external call (except to BentoBox)\nexport const ACTION_CALL = 30\n\nexport const MINIMUM_TARGET_UTILIZATION = BigNumber.from('700000000000000000') // 70%\n\nexport const MAXIMUM_TARGET_UTILIZATION = BigNumber.from('800000000000000000') // 80%\n\nexport const UTILIZATION_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION.sub(MAXIMUM_TARGET_UTILIZATION)\n\nexport const STARTING_INTEREST_PER_YEAR = BigNumber.from(317097920)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1% APR\n\nexport const MINIMUM_INTEREST_PER_YEAR = BigNumber.from(79274480)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 0.25% APR\n\nexport const MAXIMUM_INTEREST_PER_YEAR = BigNumber.from(317097920000)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1000% APR\n\nexport const INTEREST_ELASTICITY = BigNumber.from('28800000000000000000000000000000000000000') // Half or double in 28800 seconds (8 hours) if linear\n\nexport const FACTOR_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const PROTOCOL_FEE = BigNumber.from('10000') // 10%\n\nexport const PROTOCOL_FEE_DIVISOR = BigNumber.from('100000')\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from \"./addresses\";\n\nimport { ChainId } from \"../enums\";\nimport { Token } from \"../entities/Token\";\nimport { TokenMap } from \"../types/TokenMap\";\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    USDC_ADDRESS[ChainId.MAINNET],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    USDC_ADDRESS[ChainId.ROPSTEN],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.KOVAN]: new Token(\n    ChainId.KOVAN,\n    USDC_ADDRESS[ChainId.KOVAN],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    USDC_ADDRESS[ChainId.MATIC],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    USDC_ADDRESS[ChainId.FANTOM],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    USDC_ADDRESS[ChainId.BSC],\n    18,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    USDC_ADDRESS[ChainId.HARMONY],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    USDC_ADDRESS[ChainId.HECO],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    USDC_ADDRESS[ChainId.OKEX],\n    18,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    USDC_ADDRESS[ChainId.XDAI],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    USDC_ADDRESS[ChainId.ARBITRUM],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  ),\n  [ChainId.AURORA]: new Token(\n    ChainId.AURORA,\n    USDC_ADDRESS[ChainId.AURORA],\n    6,\n    \"USDC\",\n    \"USD Coin\"\n  )\n};\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    WETH9_ADDRESS[ChainId.MAINNET],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    WETH9_ADDRESS[ChainId.ROPSTEN],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    WETH9_ADDRESS[ChainId.RINKEBY],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.GÖRLI]: new Token(\n    ChainId.GÖRLI,\n    WETH9_ADDRESS[ChainId.GÖRLI],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.KOVAN]: new Token(\n    ChainId.KOVAN,\n    WETH9_ADDRESS[ChainId.KOVAN],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.ARBITRUM]: new Token(\n    ChainId.ARBITRUM,\n    WETH9_ADDRESS[ChainId.ARBITRUM],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    WETH9_ADDRESS[ChainId.BSC],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    WETH9_ADDRESS[ChainId.FANTOM],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    WETH9_ADDRESS[ChainId.MATIC],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    WETH9_ADDRESS[ChainId.OKEX],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    WETH9_ADDRESS[ChainId.HECO],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    WETH9_ADDRESS[ChainId.HARMONY],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    WETH9_ADDRESS[ChainId.XDAI],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    WETH9_ADDRESS[ChainId.AVALANCHE],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  )\n};\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(\n    ChainId.FANTOM,\n    WNATIVE_ADDRESS[ChainId.FANTOM],\n    18,\n    \"WFTM\",\n    \"Wrapped FTM\"\n  ),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    \"FTM\",\n    \"Wrapped FTM\"\n  ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    WNATIVE_ADDRESS[ChainId.MATIC],\n    18,\n    \"WMATIC\",\n    \"Wrapped Matic\"\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    \"WMATIC\",\n    \"Wrapped Matic\"\n  ),\n  [ChainId.XDAI]: new Token(\n    ChainId.XDAI,\n    WNATIVE_ADDRESS[ChainId.XDAI],\n    18,\n    \"WXDAI\",\n    \"Wrapped xDai\"\n  ),\n  [ChainId.BSC]: new Token(\n    ChainId.BSC,\n    WNATIVE_ADDRESS[ChainId.BSC],\n    18,\n    \"WBNB\",\n    \"Wrapped BNB\"\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    \"WBNB\",\n    \"Wrapped BNB\"\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped Ether\"\n  ),\n  [ChainId.AVALANCHE]: new Token(\n    ChainId.AVALANCHE,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE],\n    18,\n    \"WAVAX\",\n    \"Wrapped AVAX\"\n  ),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    \"WAVAX\",\n    \"Wrapped AVAX\"\n  ),\n  [ChainId.HECO]: new Token(\n    ChainId.HECO,\n    WNATIVE_ADDRESS[ChainId.HECO],\n    18,\n    \"WHT\",\n    \"Wrapped HT\"\n  ),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    \"WHT\",\n    \"Wrapped HT\"\n  ),\n  [ChainId.HARMONY]: new Token(\n    ChainId.HARMONY,\n    WNATIVE_ADDRESS[ChainId.HARMONY],\n    18,\n    \"WONE\",\n    \"Wrapped ONE\"\n  ),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    \"WONE\",\n    \"Wrapped ONE\"\n  ),\n  [ChainId.OKEX]: new Token(\n    ChainId.OKEX,\n    WNATIVE_ADDRESS[ChainId.OKEX],\n    18,\n    \"WOKT\",\n    \"Wrapped OKExChain\"\n  ),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    \"WOKT\",\n    \"Wrapped OKExChain\"\n  ),\n  [ChainId.CELO]: new Token(\n    ChainId.CELO,\n    WNATIVE_ADDRESS[ChainId.CELO],\n    18,\n    \"CELO\",\n    \"Celo\"\n  ),\n  [ChainId.PALM]: new Token(\n    ChainId.PALM,\n    WNATIVE_ADDRESS[ChainId.PALM],\n    18,\n    \"WPALM\",\n    \"Wrapped Palm\"\n  ),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    \"WMOVR\",\n    \"Wrapped Moonriver\"\n  ),\n  [ChainId.AURORA]: new Token(\n    ChainId.AURORA,\n    WNATIVE_ADDRESS[ChainId.AURORA],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  ),\n  [ChainId.AURORA_TESTNET]: new Token(\n    ChainId.AURORA_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AURORA_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  ),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  ),\n  [ChainId.AURORA_PRIVATENET]: new Token(\n    ChainId.AURORA_PRIVATENET,\n    WNATIVE_ADDRESS[ChainId.AURORA_PRIVATENET],\n    18,\n    \"WETH\",\n    \"Wrapped ETH\"\n  )\n};\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Aurora extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Aurora')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Aurora } = {}\n\n  public static onChain(chainId: number): Aurora {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Aurora(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Aurora,\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.AURORA]: Aurora.onChain(ChainId.AURORA),\n  [ChainId.AURORA_TESTNET]: Aurora.onChain(ChainId.AURORA_TESTNET),\n  [ChainId.AURORA_PRIVATENET]: Aurora.onChain(ChainId.AURORA_PRIVATENET)\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","import JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './kashi'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const LAMBDA_URL = 'https://9epjsvomc4.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const SOCKET_URL = 'wss://hfimt374ge.execute-api.us-east-1.amazonaws.com/dev'\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      )\n    ]\n  )\n","import { Fee } from '../enums'\nimport { Token } from '../entities'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst MASTER_DEPLOYER_ADDRESS = '0xa2A7Aa74cb94f37221FD49F5BA6F3fF876092700'\n\nconst CONSTANT_PRODUCT_POOL_CREATION_CODE =\n  '0x6101806040523480156200001257600080fd5b5060405162004195380380620041958339810160408190526200003591620005d2565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c0016040516020818303038152906040528051906020012060808181525050506000806000808580602001905181019062000132919062000572565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b6001600160a01b038416301415620002365760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b6001600160a01b038316301415620002815760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b612710821115620002c85760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b038816916200030c9190620006b9565b600060405180830381855afa9150503d806000811462000349576040519150601f19603f3d011682016040523d82523d6000602084013e6200034e565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03891691620003979190620006b9565b600060405180830381855afa9150503d8060008114620003d4576040519150601f19603f3d011682016040523d82523d6000602084013e620003d9565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b038a1691620004229190620006b9565b600060405180830381855afa9150503d80600081146200045f576040519150601f19603f3d011682016040523d82523d6000602084013e62000464565b606091505b506001600160601b031960608a811b82166101405289901b166101605260a087905261271087900360c0528451909250620004aa9150840160209081019085016200069f565b6004558151620004c490830160209081019084016200054b565b60601b6001600160601b03191660e0528051620004eb90602090830181019083016200054b565b6001600160601b0319606091821b8116610100529089901b1661012052600160095583156200052a57600880546001600160e01b0316600160e01b1790555b50505050505050505062000739565b8051620005468162000720565b919050565b6000602082840312156200055e57600080fd5b81516200056b8162000720565b9392505050565b600080600080608085870312156200058957600080fd5b8451620005968162000720565b6020860151909450620005a98162000720565b6040860151606087015191945092508015158114620005c757600080fd5b939692955090935050565b60008060408385031215620005e657600080fd5b82516001600160401b0380821115620005fe57600080fd5b818501915085601f8301126200061357600080fd5b8151818111156200062857620006286200070a565b604051601f8201601f19908116603f011681019083821181831017156200065357620006536200070a565b816040528281528860208487010111156200066d57600080fd5b62000680836020830160208801620006d7565b8096505050505050620006966020840162000539565b90509250929050565b600060208284031215620006b257600080fd5b5051919050565b60008251620006cd818460208701620006d7565b9190910192915050565b60005b83811015620006f4578181015183820152602001620006da565b8381111562000704576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200073657600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61390062000895600039600081816105b301528181610791015281816108c00152818161096e01528181610ff6015281816110fe01528181611336015281816113a5015281816115e701528181611fc30152818161204a01526129e701526000818161032e0152818161070d01528181610a5301528181610b8201528181610fca01528181611095015281816112e2015281816114860152818161157901528181611d24015281816120830152818161216e01526128e801526000818161058c015281816118070152611c240152600081816103f901528181612650015281816127c6015281816128ac0152612a900152600081816102e20152612eb3015260006125520152600081816104200152818161315501526131c00152600081816103d2015261233901526139006000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063627dd56a1161012a578063a69840a8116100bd578063c14ad8021161008c578063d21220a711610071578063d21220a7146105ae578063d505accf146105d5578063dd62ed3e146105e857600080fd5b8063c14ad8021461057e578063cf58879a1461058757600080fd5b8063a69840a81461051e578063a8f1f52e14610545578063a9059cbb14610558578063af8c09bf1461056b57600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104a55780637ecebe00146104b857806392bc3219146104d857806395d89b41146104e257600080fd5b8063627dd56a1461045457806367e4ac2c1461046757806370a082311461047c5780637464fc3d1461049c57600080fd5b80632a07b6c7116101a25780634da31827116101715780634da31827146103f457806354cf2aeb1461041b5780635909c0d5146104425780635a3d54931461044b57600080fd5b80632a07b6c71461036c57806330adf81f1461038c578063313ce567146103b35780633644e515146103cd57600080fd5b80630c0a0cd2116101de5780630c0a0cd2146102dd5780630dfe16811461032957806318160ddd1461035057806323b872dd1461035957600080fd5b8063053da1c81461021057806306fdde03146102365780630902f1ac1461027f578063095ea7b3146102ba575b600080fd5b61022361021e366004613566565b610613565b6040519081526020015b60405180910390f35b6102726040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161022d9190613716565b610287610c3e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161022d565b6102cd6102c8366004613449565b610ca7565b604051901515815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61022360005481565b6102cd6103673660046134ae565b610d20565b61037f61037a366004613566565b610e6c565b60405161022d91906136b1565b6102237f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103bb601281565b60405160ff909116815260200161022d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61022360055481565b61022360065481565b610223610462366004613566565b6111e1565b61046f611557565b60405161022d9190613657565b61022361048a36600461327d565b60016020526000908152604090205481565b61022360075481565b6102236104b3366004613566565b611656565b6102236104c636600461327d565b60036020526000908152604090205481565b6104e0611bb2565b005b6102726040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102237f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b610223610553366004613566565b611cad565b6102cd610566366004613449565b611de0565b610223610579366004613566565b611e65565b61022360045481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6104e06105e33660046134ef565b61220e565b6102236105f6366004613475565b600260209081526000928352604080842090915290825290205481565b6000600954600114610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260095560008080808061069d87890189613305565b9450945094509450945060008060006107056008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561096c5761078a85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b98506107b87f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107f4908790600401613716565b600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506000806108316128a5565b9150915086856dffffffffffffffffffffffffffff16830310156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b6108be8282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161095d929190918252602082015260400190565b60405180910390a45050610c2a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b610a4c85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661254a565b9850610a7a7f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610ab6908790600401613716565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050600080610af36128a5565b9150915086846dffffffffffffffffffffffffffff1682031015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b610b808282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610c1f929190918252602082015260400190565b60405180910390a450505b505060016009555094979650505050505050565b6000806000610c9c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d0f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610dbd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610db7908490613792565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610df2908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5a9086815260200190565b60405180910390a35060019392505050565b6060600954600114610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b6002600955600080610eee84860186613414565b915091506000806000610f506008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f616128a5565b60008054308252600160205260409091205492945090925090610f85878784612e33565b90910190600082610f968684613755565b610fa09190613741565b9050600083610faf8685613755565b610fb99190613741565b9050610fc53084612ee2565b610ff17f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b61101d7f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b8186039550808503945061103486868b8b8b612b1d565b6110466110418688613755565b612f75565b6007556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161105f579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110e6576110e6613847565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c60018151811061114f5761114f613847565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111c2929190918252602082015260400190565b60405180910390a35050600160095550979a9950505050505050505050565b600060095460011461124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611264858701876132be565b92509250925060008060006112c86008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112d96128a5565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156113a3577f00000000000000000000000000000000000000000000000000000000000000009050866dffffffffffffffffffffffffffff168403915061139782886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff1661254a565b9a508a830392506114bf565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b50506008546dffffffffffffffffffffffffffff6e01000000000000000000000000000090910481168203907f0000000000000000000000000000000000000000000000000000000000000000906114b7908390888116908a1661254a565b9a508a840393505b6114cb818c8b8b6125ad565b6114d88484898989612b1d565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610c1f929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115ab576115ab613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061161957611619613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006009546001146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560006116d78385018561327d565b905060008060006117376008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806117486128a5565b600054919350915061175b868683612e33565b0160006117786dffffffffffffffffffffffffffff881685613792565b905060006117966dffffffffffffffffffffffffffff881685613792565b90506000806117c784848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff166130fa565b909250905060006117ef6117db8389613792565b6117e5858b613792565b6110419190613755565b905085611a705761180360006103e86131fd565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a391906132a1565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119dd578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194191906135d8565b9d508d1580159061197257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8e14155b6119d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c49515549444954590000000000000000000000604482015260640161067d565b611a6a565b73ffffffffffffffffffffffffffffffffffffffff811615611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f5200000000000000000000000000000000000000604482015260640161067d565b611a676103e883613792565b9d505b50611ab8565b6000611a926110416dffffffffffffffffffffffffffff808e16908f16613755565b90508087611aa08285613792565b611aaa9190613755565b611ab49190613741565b9d50505b8c611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015260640161067d565b611b298c8e6131fd565b611b3688888d8d8d612b1d565b611b43611041888a613755565b600755604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a91015b60405180910390a35050600160095550989b9a5050505050505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691611c4f919061363b565b600060405180830381855afa9150503d8060008114611c8a576040519150601f19603f3d011682016040523d82523d6000602084013e611c8f565b606091505b5091505080806020019051810190611ca791906135d8565b60045550565b60008080611cbd84860186613449565b91509150600080611d1d6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611da857611da183836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1661254a565b9450611dd6565b611dd383826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b94505b5050505092915050565b33600090815260016020526040812080548391908390611e01908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d0f9086815260200190565b6000600954600114611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611ee8858701876132be565b9250925092506000806000611f4c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611f5d6128a5565b60008054308252600160205260409091205492945090925090611f81878784612e33565b90910190600082611f928684613755565b611f9c9190613741565b9050600083611fab8685613755565b611fb59190613741565b9050611fc13084612ee2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156120815761204482838b6dffffffffffffffffffffffffffff1603838b6dffffffffffffffffffffffffffff160361254a565b016120717f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b9b5050918a90039160008b6121a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e000000000000000000000000604482015260640161067d565b61216581828a6dffffffffffffffffffffffffffff1603848c6dffffffffffffffffffffffffffff160361254a565b820191506121957f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b509a50928a9003928a60005b6121ae86868b8b8b612b1d565b6121bb6110418688613755565b600755604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364969101611b92565b42841015612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061246c57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6124d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e41545552450000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000806125777f000000000000000000000000000000000000000000000000000000000000000086613755565b90508061258661271086613755565b6125909190613729565b61259a8483613755565b6125a49190613741565b95945050505050565b801561272f576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f00000000000000000000000000000000000000000000000000000000000000009091169161267c9161363b565b6000604051808303816000865af19150503d80600081146126b9576040519150601f19603f3d011682016040523d82523d6000602084013e6126be565b606091505b5050905080612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c45440000000000000000000000000000000000604482015260640161067d565b5061289f565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f000000000000000000000000000000000000000000000000000000000000000016916127f09161363b565b6000604051808303816000865af19150503d806000811461282d576040519150601f19603f3d011682016040523d82523d6000602084013e612832565b606091505b505090508061289d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161067d565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f00000000000000000000000000000000000000000000000000000000000000003060405160240161293b92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612989919061363b565b600060405180830381855afa9150503d80600081146129c4576040519150601f19603f3d011682016040523d82523d6000602084013e6129c9565b606091505b50915050808060200190518101906129e191906135d8565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612abd919061363b565b600060405180830381855afa9150503d8060008114612af8576040519150601f19603f3d011682016040523d82523d6000602084013e612afd565b606091505b5091505080806020019051810190612b1591906135d8565b925050509091565b6dffffffffffffffffffffffffffff8511801590612b4957506dffffffffffffffffffffffffffff8411155b612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015260640161067d565b6008547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612c3357600880546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612df3565b6000612c44640100000000426137d5565b90508163ffffffff168163ffffffff1614158015612c7157506dffffffffffffffffffffffffffff841615155b8015612c8c57506dffffffffffffffffffffffffffff831615155b15612d515781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612cd757612cd7613818565b600580549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612d3257612d32613818565b0490508263ffffffff1681026006600082825401925050819055505050505b6008805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6007546000908015612eda576000612e616110416dffffffffffffffffffffffffffff808816908916613755565b905081811115612ed857612710816004548484612e7e9190613792565b612e889088613755565b612e929190613755565b612e9c9190613741565b612ea69190613741565b92508215612ed857612ed87f0000000000000000000000000000000000000000000000000000000000000000846131fd565b505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f17908490613792565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612f8457506000919050565b8160017001000000000000000000000000000000008210612faa5760809190911c9060401b5b680100000000000000008210612fc55760409190911c9060201b5b6401000000008210612fdc5760209190911c9060101b5b620100008210612ff15760109190911c9060081b5b61010082106130055760089190911c9060041b5b601082106130185760049190911c9060021b5b600882106130245760011b5b600181858161303557613035613818565b048201901c9050600181858161304d5761304d613818565b048201901c9050600181858161306557613065613818565b048201901c9050600181858161307d5761307d613818565b048201901c9050600181858161309557613095613818565b048201901c905060018185816130ad576130ad613818565b048201901c905060018185816130c5576130c5613818565b048201901c905060008185816130dd576130dd613818565b0490508082106130ed57806130ef565b815b93505050505b919050565b600080831580613108575082155b15613118575060009050806131f4565b6000846131258589613755565b61312f9190613741565b905085811161318a576131456127106002613755565b61314f8288613792565b613179907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131839190613741565b91506131f2565b6000846131978789613755565b6131a19190613741565b90506131b06127106002613755565b6131ba828a613792565b6131e4907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131ee9190613741565b9350505b505b94509492505050565b8060008082825461320e9190613729565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f69565b803580151581146130f557600080fd5b60006020828403121561328f57600080fd5b813561329a816138a5565b9392505050565b6000602082840312156132b357600080fd5b815161329a816138a5565b6000806000606084860312156132d357600080fd5b83356132de816138a5565b925060208401356132ee816138a5565b91506132fc6040850161326d565b90509250925092565b600080600080600060a0868803121561331d57600080fd5b8535613328816138a5565b94506020860135613338816138a5565b93506133466040870161326d565b925060608601359150608086013567ffffffffffffffff8082111561336a57600080fd5b818801915088601f83011261337e57600080fd5b81358181111561339057613390613876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133d6576133d6613876565b816040528281528b60208487010111156133ef57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561342757600080fd5b8235613432816138a5565b91506134406020840161326d565b90509250929050565b6000806040838503121561345c57600080fd5b8235613467816138a5565b946020939093013593505050565b6000806040838503121561348857600080fd5b8235613493816138a5565b915060208301356134a3816138a5565b809150509250929050565b6000806000606084860312156134c357600080fd5b83356134ce816138a5565b925060208401356134de816138a5565b929592945050506040919091013590565b600080600080600080600060e0888a03121561350a57600080fd5b8735613515816138a5565b96506020880135613525816138a5565b95506040880135945060608801359350608088013560ff8116811461354957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806020838503121561357957600080fd5b823567ffffffffffffffff8082111561359157600080fd5b818501915085601f8301126135a557600080fd5b8135818111156135b457600080fd5b8660208285010111156135c657600080fd5b60209290920196919550909350505050565b6000602082840312156135ea57600080fd5b5051919050565b600081518084526136098160208601602086016137a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161364d8184602087016137a9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156136a557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613673565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613709578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016136ce565b5091979650505050505050565b60208152600061329a60208301846135f1565b6000821982111561373c5761373c6137e9565b500190565b60008261375057613750613818565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561378d5761378d6137e9565b500290565b6000828210156137a4576137a46137e9565b500390565b60005b838110156137c45781810151838201526020016137ac565b8381111561289f5750506000910152565b6000826137e4576137e4613818565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138c757600080fd5b5056fea264697066735822122004f193ad403a2048e6ef0c1fc9da9b9f522fe2ad030c99737c73f0f04901cf7464736f6c63430008070033'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: CONSTANT_PRODUCT_POOL_CREATION_CODE,\n    deployData,\n    masterDeployerAddress: MASTER_DEPLOYER_ADDRESS\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class ConstantProductPool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = 25, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n      fee,\n      twap\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = 25,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997 // 3%\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { ChainId } from 'enums'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  chainId\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  chainId: ChainId\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[chainId]\n  )\n}\n","import {\n  FACTORY_ADDRESS,\n  FIVE,\n  LP_IDENTIFIER_NAME,\n  LP_IDENTIFIER_SYMBOL,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ZERO,\n  _1000,\n  _997\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const chainId = tokenA.chainId\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[chainId],\n      tokenA,\n      tokenB,\n      chainId\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      LP_IDENTIFIER_NAME[currencyAmounts[0].currency.chainId],\n      LP_IDENTIFIER_SYMBOL[currencyAmounts[0].currency.chainId]\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity'\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\nexport interface RouteLeg {\n  address: string\n  token: RToken\n  swapPortion: number // For router contract\n  absolutePortion: number // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial'\n}\nexport interface MultiRoute {\n  status: RouteStatus\n  amountIn: number\n  amountOut: number\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n}\n","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' }\n  ]\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' }\n  ]\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, STOP_LIMIT_ORDER_ADDRESS } from '../constants'\nimport { bentoTypes, name, types } from '../types'\n\nimport { ChainId } from 'enums'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString()\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval\n    },\n    privateKey\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n  RConcentratedLiquidityPool,\n  CL_MIN_TICK,\n  CL_MAX_TICK\n} from '../types/MultiRouterTypes'\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D)\n      .div(r0)\n      .mul(D)\n      .div(r1)\n      .div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(\n        nA\n          .div(A_PRECISION)\n          .sub(1)\n          .mul(D)\n          .add(dP.mul(3))\n      )\n    if (\n      D.sub(prevD)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION)\n    .div(nA)\n    .add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y\n      .mul(y)\n      .add(c)\n      .div(\n        y\n          .mul(2)\n          .add(b)\n          .sub(D)\n      )\n    if (\n      y\n        .sub(yPrev)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\n  if (pool.ticks.length === 0) return 0\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\n  let currentPrice = pool.sqrtPrice\n  let currentLiquidity = pool.liquidity\n  let outAmount = 0\n  let input = inAmount\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\n\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0\n\n    if (direction) {\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n        input = 0\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice)\n        currentPrice = nextTickPrice\n        input -= maxDx\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross--\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\n        input = 0\n      } else {\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        currentPrice = nextTickPrice\n        input -= maxDy\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross++\n      }\n    }\n\n    outAmount += output * (1 - pool.fee)\n    //console.log('out', outAmount);\n  }\n\n  return outAmount\n}\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t)\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10\n  return Math.abs(a / b - 1) < accuracy\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min, max\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(valueBN: BigNumber | undefined, value: number): BigNumber {\n  if (valueBN !== undefined) return valueBN\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(value) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(value / Math.pow(2, shift))\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return res\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pool, RToken, RouteLeg, MultiRoute, RouteStatus } from '../types/MultiRouterTypes'\nimport { ASSERT, calcInByOut, calcOutByIn, closeValues, calcPrice } from '../utils/MultiRouterMath'\n\nexport class Edge {\n  readonly GasConsumption = 40_000\n  readonly MINIMUM_LIQUIDITY = 1000\n  pool: Pool\n  vert0: Vertice\n  vert1: Vertice\n\n  canBeUsed: boolean\n  direction: boolean\n  amountInPrevious: number // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number // How many liquidity were passed from vert0 to vert1\n  bestEdgeIncome: number // debug data\n\n  constructor(p: Pool, v0: Vertice, v1: Vertice) {\n    this.pool = p\n    this.vert0 = v0\n    this.vert1 = v1\n    this.amountInPrevious = 0\n    this.amountOutPrevious = 0\n    this.canBeUsed = true\n    this.direction = true\n    this.bestEdgeIncome = 0\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1\n  }\n\n  calcOutput(v: Vertice, amountIn: number) {\n    const pool = this.pool\n    let out,\n      gas = this.amountInPrevious ? 0 : this.GasConsumption\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          out = this.amountInPrevious - calcInByOut(pool, this.amountOutPrevious - amountIn, true)\n        } else {\n          out = calcOutByIn(pool, amountIn - this.amountOutPrevious, false) + this.amountInPrevious\n        }\n        if (amountIn === this.amountOutPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption\n        }\n      } else {\n        out = calcOutByIn(pool, this.amountOutPrevious + amountIn, false) - this.amountInPrevious\n      }\n    } else {\n      if (this.direction) {\n        out = calcOutByIn(pool, this.amountInPrevious + amountIn, true) - this.amountOutPrevious\n      } else {\n        if (amountIn === this.amountInPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption\n        }\n        if (amountIn < this.amountInPrevious) {\n          out = this.amountOutPrevious - calcInByOut(pool, this.amountInPrevious - amountIn, false)\n        } else {\n          out = calcOutByIn(pool, amountIn - this.amountInPrevious, true) + this.amountOutPrevious\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return [out, gas]\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.reserve1.toString())\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.MINIMUM_LIQUIDITY\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.MINIMUM_LIQUIDITY\n      }\n    } else {\n      const r0 = parseInt(this.pool.reserve0.toString())\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.MINIMUM_LIQUIDITY\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.MINIMUM_LIQUIDITY\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut\n      const outInc = from === this.vert0 ? amountOut : -amountIn\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      if (inNew * outNew < 0) console.log('333')\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        directionNew = true\n        amountInNew = inNew\n        amountOutNew = outNew\n      } else {\n        directionNew = false\n        amountInNew = -inNew\n        amountOutNew = -outNew\n      }\n    } else console.error('Error 221')\n\n    if (directionNew) {\n      const calc = calcOutByIn(this.pool, amountInNew, directionNew)\n      const res = closeValues(amountOutNew, calc, 1e-6)\n      if (!res) console.log('Err 225-1 !!', amountOutNew, calc, Math.abs(calc / amountOutNew - 1))\n      return res\n    } else {\n      const calc = calcOutByIn(this.pool, amountOutNew, directionNew)\n      const res = closeValues(amountInNew, calc, 1e-6)\n      if (!res) console.log('Err 225-2!!', amountInNew, calc, Math.abs(calc / amountInNew - 1))\n      return res\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        this.direction = true\n        this.amountInPrevious = inNew\n        this.amountOutPrevious = outNew\n      } else {\n        this.direction = false\n        this.amountInPrevious = -inNew\n        this.amountOutPrevious = -outNew\n      }\n    } else console.error('Error 221')\n\n    ASSERT(() => {\n      if (this.direction)\n        return closeValues(this.amountOutPrevious, calcOutByIn(this.pool, this.amountInPrevious, this.direction), 1e-6)\n      else {\n        return closeValues(this.amountInPrevious, calcOutByIn(this.pool, this.amountOutPrevious, this.direction), 1e-6)\n      }\n    }, `Error 225`)\n  }\n}\n\nexport class Vertice {\n  token: RToken\n  edges: Edge[]\n\n  price: number\n  gasPrice: number\n\n  bestIncome: number // temp data used for findBestPath algorithm\n  gasSpent: number // temp data used for findBestPath algorithm\n  bestTotal: number // temp data used for findBestPath algorithm\n  bestSource?: Edge // temp data used for findBestPath algorithm\n  checkLine: number // debug data\n\n  constructor(t: RToken) {\n    this.token = t\n    this.edges = []\n    this.price = 0\n    this.gasPrice = 0\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  getNeibour(e?: Edge) {\n    if (!e) return\n    return e.vert0 === this ? e.vert1 : e.vert0\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[]\n  edges: Edge[]\n  tokens: Map<RToken, Vertice>\n\n  constructor(pools: Pool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = []\n    this.edges = []\n    this.tokens = new Map()\n    pools.forEach(p => {\n      const v0 = this.getOrCreateVertice(p.token0)\n      const v1 = this.getOrCreateVertice(p.token1)\n      const edge = new Edge(p, v0, v1)\n      v0.edges.push(edge)\n      v1.edges.push(edge)\n      this.edges.push(edge)\n    })\n    const baseVert = this.tokens.get(baseToken)\n    if (baseVert) {\n      this.setPrices(baseVert, 1, gasPrice)\n    }\n  }\n\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return\n    from.price = price\n    from.gasPrice = gasPrice\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0\n      if (v.price !== 0) return\n      let p = calcPrice(e.pool, 0, false)\n      if (from === e.vert0) p = 1 / p\n      this.setPrices(v, price * p, gasPrice / p)\n    })\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token)\n    if (vert) return vert\n    vert = new Vertice(token)\n    this.vertices.push(vert)\n    this.tokens.set(token, vert)\n    return vert\n  }\n\n  exportPath(from: RToken, to: RToken) {\n    //}, _route: MultiRoute) {\n    // const allPools = new Map<string, Pool>();\n    // this.edges.forEach(p => allPools.set(p.address, p));\n    // const usedPools = new Map<string, boolean>();\n    // route.legs.forEach(l => usedPools.set(l.address, l.token === allPools.get(l.address)?.token0))\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    // const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\n\n    const route = new Set<Edge>()\n    for (let v = toVert; v !== fromVert; v = v.getNeibour(v.bestSource) as Vertice) {\n      if (v.bestSource) route.add(v.bestSource)\n    }\n\n    // function edgeStyle(e: Edge) {\n    //   const finish = e.vert1.bestSource === e\n    //   const start = e.vert0.bestSource === e\n    //   let label\n    //   if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\n    //   if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\n    //   const edgeValue = route.has(e) ? 'value: 2' : undefined\n    //   let arrow\n    //   if (finish && start) arrow = 'arrows: \"from,to\"'\n    //   if (finish) arrow = 'arrows: \"to\"'\n    //   if (start) arrow = 'arrows: \"from\"'\n    //   return ['', label, edgeValue, arrow].filter(a => a !== undefined).join(', ')\n    // }\n\n    // function print(n: number, digits: number) {\n    //   let out\n    //   if (n === 0) out = '0'\n    //   else {\n    //     const n0 = n > 0 ? n : -n\n    //     const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\n    //     if (shift <= 0) out = `${Math.round(n0)}`\n    //     else {\n    //       const mult = Math.pow(10, shift)\n    //       out = `${Math.round(n0 * mult) / mult}`\n    //     }\n    //     if (n < 0) out = -out\n    //   }\n    //   return out\n    // }\n\n    // function nodeLabel(v: Vertice) {\n    //   const value = (v.bestIncome * v.price) / toVert.price\n    //   const income = `${print(value, 3)}`\n    //   const total = `${print(v.bestTotal, 3)}`\n    //   // const income = `${print((value/initValue-1)*100, 3)}%`\n    //   // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n    //   const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\n    //   return [checkLine, income, total].filter(a => a !== undefined).join(':')\n    // }\n\n    // const nodes = `var nodes = new vis.DataSet([\n    //   ${this.vertices.map(t => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\n    // ]);\\n`\n    // const edges = `var edges = new vis.DataSet([\n    //   ${this.edges.map(p => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`).join(',\\n\\t\\t')}\n    // ]);\\n`\n    // const data = `var data = {\n    //     nodes: nodes,\n    //     edges: edges,\n    // };\\n`\n\n    // const fs = require('fs')\n    // fs.writeFileSync('D:/Info/Notes/GraphVisualization/data.js', nodes + edges + data)\n  }\n\n  findBestPath(\n    from: RToken,\n    to: RToken,\n    amountIn: number\n  ):\n    | {\n        path: Edge[]\n        output: number\n        gasSpent: number\n        totalOutput: number\n      }\n    | undefined {\n    const start = this.tokens.get(from)\n    const finish = this.tokens.get(to)\n    if (!start || !finish) return\n\n    this.edges.forEach(e => (e.bestEdgeIncome = 0))\n    this.vertices.forEach(v => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountIn\n    start.bestTotal = amountIn\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal = -1\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.unshift(v.bestSource)\n        }\n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach(e => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome, gas\n        try {\n          ;[newIncome, gas] = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\n          e.bestEdgeIncome = -1\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price - newGasSpent * finish.gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, 'Error 373')\n        e.bestEdgeIncome = newIncome * price\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from\n    path.forEach(e => {\n      if (_from) {\n        e.applySwap(_from)\n        _from = _from.getNeibour(e)\n      } else {\n        console.error('Unexpected 315')\n      }\n    })\n\n    ASSERT(() => {\n      const res = this.vertices.every(v => {\n        let total = 0\n        let totalModule = 0\n        v.edges.forEach(e => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious\n            } else {\n              total += e.amountInPrevious\n            }\n            totalModule += e.amountInPrevious\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious\n            } else {\n              total -= e.amountOutPrevious\n            }\n            totalModule += e.amountOutPrevious\n          }\n        })\n        if (v === from) return total <= 0\n        if (v === to) return total >= 0\n        if (totalModule === 0) return total === 0\n        return Math.abs(total / totalModule) < 1e10\n      })\n      return res\n    }, 'Error 290')\n  }\n\n  findBestRoute(from: RToken, to: RToken, amountIn: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map(e => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach(e => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let output = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPath(from, to, amountIn * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        output += p.output\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from), this.tokens.get(to), p.path)\n        totalrouted += routeValues[step]\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        amountIn: 0,\n        amountOut: 0,\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    const [legs, gasSpent, topologyWasChanged] = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn, to)\n    }\n\n    return {\n      status,\n      amountIn: amountIn * totalrouted,\n      amountOut: output,\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice\n    }\n  }\n\n  getRouteLegs(from: Vertice, to: Vertice): [RouteLeg[], number, boolean] {\n    const [nodes, topologyWasChanged] = this.cleanTopology(from, to)\n    const legs: RouteLeg[] = []\n    let gasSpent = 0\n    nodes.forEach(n => {\n      const outEdges = this.getOutputEdges(n).map(e => {\n        const from = this.edgeFrom(e)\n        return from ? [e, from[0], from[1]] : [e]\n      })\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\n      if (outAmount <= 0) return\n\n      const total = outAmount\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\n        legs.push({\n          address: (e[0] as Edge).pool.address,\n          token: n.token,\n          swapPortion: quantity,\n          absolutePortion: p / total\n        })\n        gasSpent += (e[0] as Edge).pool.swapGasCost\n        outAmount -= p\n      })\n      console.assert(outAmount / total < 1e-12, 'Error 281')\n    })\n    return [legs, gasSpent, topologyWasChanged]\n  }\n\n  edgeFrom(e: Edge): [Vertice, number] | undefined {\n    if (e.amountInPrevious === 0) return undefined\n    return e.direction ? [e.vert0, e.amountInPrevious] : [e.vert1, e.amountOutPrevious]\n  }\n\n  getOutputEdges(v: Vertice): Edge[] {\n    return v.edges.filter(e => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction !== (e.vert0 === v)) return false\n      return true\n    })\n  }\n\n  getInputEdges(v: Vertice): Edge[] {\n    return v.edges.filter(e => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction === (e.vert0 === v)) return false\n      return true\n    })\n  }\n\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number, to: RToken) {\n    const amounts = new Map<RToken, number>()\n    amounts.set(legs[0].token, amountIn)\n    legs.forEach(l => {\n      const vert = this.tokens.get(l.token)\n      console.assert(vert !== undefined, 'Internal Error 570')\n      const edge = (vert as Vertice).edges.find(e => e.pool.address === l.address)\n      console.assert(edge !== undefined, 'Internel Error 569')\n      const pool = (edge as Edge).pool\n      const direction = vert === (edge as Edge).vert0\n\n      const inputTotal = amounts.get(l.token)\n      console.assert(inputTotal !== undefined, 'Internal Error 564')\n      const input = (inputTotal as number) * l.swapPortion\n      amounts.set(l.token, (inputTotal as number) - input)\n      const output = calcOutByIn(pool, input, direction)\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice\n      const prevAmount = amounts.get(vertNext.token)\n      amounts.set(vertNext.token, (prevAmount || 0) + output)\n    })\n    return amounts.get(to) || 0\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): [Vertice[], boolean] {\n    let topologyWasChanged = false\n    let result = this.topologySort(from, to)\n    if (result[0] !== 2) {\n      topologyWasChanged = true\n      console.assert(result[0] === 0, 'Internal Error 554')\n      while (result[0] === 0) {\n        this.removeWeakestEdge(result[1])\n        result = this.topologySort(from, to)\n      }\n      if (result[0] === 3) {\n        this.removeDeadEnds(result[1])\n        result = this.topologySort(from, to)\n      }\n      console.assert(result[0] === 2, 'Internal Error 563')\n      if (result[0] !== 2) return [[], topologyWasChanged]\n    }\n    return [result[1], topologyWasChanged]\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach(v => {\n      this.getInputEdges(v).forEach(e => {\n        e.canBeUsed = false\n      })\n    })\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice, minVertNext: Vertice\n    let minOutput = Number.MAX_VALUE\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\n      let out = 0\n      this.getOutputEdges(v1).forEach(e => {\n        if (v1.getNeibour(e) !== v2) return\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\n      })\n      if (out < minOutput) {\n        minVert = v1\n        minVertNext = v2\n        minOutput = out\n      }\n    })\n    // @ts-ignore\n    this.getOutputEdges(minVert).forEach(e => {\n      if (minVert.getNeibour(e) !== minVertNext) return\n      e.canBeUsed = false\n    })\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): [number, Vertice[]] {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>()\n    const vertsFinished: Vertice[] = []\n    const foundCycle: Vertice[] = []\n    const foundDeadEndVerts: Vertice[] = []\n\n    const that = this\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current)\n      if (state === 2 || state === 3) return state\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\n        foundCycle.push(current)\n        return 1\n      }\n      vertState.set(current, 1)\n\n      let successors2Exist = false\n      const outEdges = that.getOutputEdges(current)\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i]\n        const res = topSortRecursive(current.getNeibour(e) as Vertice)\n        if (res === 0) return 0\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0\n          else {\n            foundCycle.push(current)\n            return 1\n          }\n        }\n        if (res === 2) successors2Exist = true // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, 'Internal Error 589')\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current)\n          vertState.set(current, 3)\n          return 3\n        }\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      }\n    }\n\n    const res = topSortRecursive(from)\n    if (res === 0) return [0, foundCycle]\n    if (foundDeadEndVerts.length) return [3, foundDeadEndVerts]\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\n      return true\n    }, 'Internal Error 614')\n    if (res === 2) return [2, vertsFinished.reverse()]\n    console.assert(true, 'Internal Error 612')\n    return [1, []]\n  }\n}\n\nexport function findMultiRouting(\n  from: RToken,\n  to: RToken,\n  amountIn: number,\n  pools: Pool[],\n  baseToken: RToken,\n  gasPrice: number,\n  steps: number | number[] = 12\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from)\n  if (fromV?.price === 0) {\n    g.setPrices(fromV, 1, 0)\n  }\n  const out = g.findBestRoute(from, to, amountIn, steps)\n  return out\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { CurrencyAmount, Price, Token } from './entities'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId } from './enums'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/StopLimitOrder.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId\n      })\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n"],"names":["ChainId","Rounding","TradeType","KashiAction","Fee","OrderStatus","USDC_ADDRESS","_USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AURORA","FACTORY_ADDRESS","_FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","AURORA_TESTNET","AURORA_PRIVATENET","ROUTER_ADDRESS","_ROUTER_ADDRESS","SUSHI_ADDRESS","_SUSHI_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","CELL_WNEAR","_CELL_WNEAR","CELL_WETH","_CELL_WETH","CELL_RUSD","_CELL_RUSD","CELL_WBTC","_CELL_WBTC","WETH_USDC","_WETH_USDC","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","STOP_LIMIT_ORDER_ADDRESS","_STOP_LIMIT_ORDER_ADD","ARCHER_ROUTER_ADDRESS","_ARCHER_ROUTER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","INIT_CODE_HASH","_INIT_CODE_HASH","LP_IDENTIFIER_NAME","_LP_IDENTIFIER_NAME","LP_IDENTIFIER_SYMBOL","_LP_IDENTIFIER_SYMBOL","ACTION_ADD_ASSET","ACTION_REPAY","ACTION_REMOVE_ASSET","ACTION_REMOVE_COLLATERAL","ACTION_BORROW","ACTION_GET_REPAY_SHARE","ACTION_GET_REPAY_PART","ACTION_ACCRUE","ACTION_ADD_COLLATERAL","ACTION_UPDATE_EXCHANGE_RATE","ACTION_BENTO_DEPOSIT","ACTION_BENTO_WITHDRAW","ACTION_BENTO_TRANSFER","ACTION_BENTO_TRANSFER_MULTIPLE","ACTION_BENTO_SETAPPROVAL","ACTION_CALL","MINIMUM_TARGET_UTILIZATION","BigNumber","from","MAXIMUM_TARGET_UTILIZATION","UTILIZATION_PRECISION","FULL_UTILIZATION","FULL_UTILIZATION_MINUS_MAX","sub","STARTING_INTEREST_PER_YEAR","mul","MINIMUM_INTEREST_PER_YEAR","MAXIMUM_INTEREST_PER_YEAR","INTEREST_ELASTICITY","FACTOR_PRECISION","PROTOCOL_FEE","PROTOCOL_FEE_DIVISOR","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","process","invariant","isInteger","NativeCurrency","_AbstractCurrency","_inheritsLoose","_this","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","call","_proto","prototype","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","currencyEquals","currencyA","currencyB","USDC","_USDC","WETH9","_WETH","WNATIVE","_WNATIVE","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Aurora","NATIVE","_NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SolidityType","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","LAMBDA_URL","SOCKET_URL","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePoolInitCodeHash","creationCode","deployData","masterDeployerAddress","keccak256","pack","defaultAbiCoder","encode","MASTER_DEPLOYER_ADDRESS","CONSTANT_PRODUCT_POOL_CREATION_CODE","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","_ref2","token0","token1","concat","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","getCreate2Address","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","ConstantProductPool","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","computePairAddress","Pair","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","i","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","EXACT_INPUT","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","PoolType","Pool","_info","info","_extends","minLiquidity","swapGasCost","type","RConstantProductPool","_Pool","ConstantProduct","RHybridPool","_Pool2","Hybrid","A","RWeightedPool","_Pool3","Weighted","weight0","weight1","CL_MIN_TICK","CL_MAX_TICK","RConcentratedLiquidityPool","_Pool4","_this3","ConcentratedLiquidity","sqrtPrice","nearestTick","ticks","RouteStatus","types","EIP712Domain","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","privateKey","domain","verifyingContract","sign","primaryType","getTypedData","getTypedDataBento","getTypeHash","typedData","getMessage","signingKey","SigningKey","_signingKey$signDiges","signDigest","v","r","s","getSignatureWithProvider","_asyncToGenerator","_regeneratorRuntime","mark","_callee","provider","signature","_splitSignature","wrap","_callee$","_context","prev","next","send","maker","JSON","stringify","sent","splitSignature","abrupt","stop","_x","_x2","_x3","apply","getSignatureWithProviderBentobox","_callee2","_splitSignature2","_callee2$","_context2","user","_x4","_x5","_x6","getSignatureBento","_ref3","_callee3","bentoApproval","_callee3$","_context3","_x7","_x8","_x9","A_PRECISION","DCacheBN","Map","HybridComputeLiquidity","pool","res","undefined","r0","r1","isZero","nA","prevD","D","dP","abs","lte","HybridgetY","c","yPrev","y","calcOutByIn","direction","xBN","yBN","parseInt","wPool","weightRatio","actualIn","out","pow","xNewBN","getBigNumber","yNewBN","dy","ConcentratedLiquidityOutByIn","OutOfLiquidity","inAmount","index","unshift","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","maxDx","maxDy","calcInByOut","lt","round","console","calcPrice","takeFeeIntoAccount","oneMinusFee","hPool","ac4","Ds","calcInputByPriceConstantMean","price","t","calcInputByPrice","priceEffective","hint","revertPositive","ASSERT","f","closeValues","accuracy","calcSquareEquation","assert","sqrtD","min","max","x0","y0","e","valueBN","exp","log","LN2","shift","mant","Edge","p","v0","v1","vert0","vert1","amountInPrevious","amountOutPrevious","canBeUsed","bestEdgeIncome","reserve","calcOutput","gas","GasConsumption","checkMinimalLiquidityExceededAfterSwap","testApply","inPrev","outPrev","to","getNeibour","directionNew","amountInNew","amountOutNew","inInc","outInc","inNew","outNew","calc","applySwap","bestIncome","Vertice","edges","gasPrice","gasSpent","bestTotal","bestSource","checkLine","_proto2","Graph","pools","baseToken","vertices","tokens","forEach","getOrCreateVertice","edge","baseVert","setPrices","_proto3","map","r2","vert","exportPath","fromVert","toVert","Set","findBestPath","start","finish","processedVert","nextVertList","_loop","closestVert","closestTotal","closestPosition","bestPath","_v","totalOutput","v2","has","newIncome","_e$calcOutput","newGasSpent","newTotal","_ret","addPath","_from","_this4","total","totalModule","findBestRoute","mode","routeValues","isArray","sum","gasSpentInit","totalrouted","step","status","NoWay","legs","totalAmountOut","Partial","Success","_this$getRouteLegs","getRouteLegs","topologyWasChanged","calcLegsAmountOut","_this$cleanTopology","cleanTopology","nodes","n","outEdges","_this5","getOutputEdges","edgeFrom","quantity","swapPortion","absolutePortion","filter","getInputEdges","amounts","l","_this6","find","inputTotal","vertNext","prevAmount","topologySort","removeWeakestEdge","removeDeadEnds","verts","_this7","minVert","minVertNext","minOutput","MAX_VALUE","_this8","vertState","vertsFinished","foundCycle","foundDeadEndVerts","that","topSortRecursive","current","state","successors2Exist","reverse","findMultiRouting","steps","g","fromV","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","startTime","endTime","stopPrice","oracleAddress","oracleData","getLimitOrder","data","tokenInDecimals","tokenInSymbol","tokenOutDecimals","tokenOutSymbol","usePrice","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","_getSignature","signOrderWithProvider","_signOrderWithProvider","_yield$getSignatureWi","digest","_send","resp","fetch","method","body","json","FillLimitOrder","amountExternal","amountToFill","limitOrderReceiver","keepTokenIn","limitOrderReceiverData","fillOrderOpen","signer","extra","open","fillOrder","_fillOrder","nonce","_extra$forceExecution","forceExecution","_extra$open","func","orderArg","limitOrderContract","gasLimit","executed","transaction","Contract","abi","debug","estimateGas","t0"],"mappings":"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"}