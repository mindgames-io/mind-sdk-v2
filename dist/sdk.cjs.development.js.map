{"version":3,"file":"sdk.cjs.development.js","sources":["../src/enums/ChainId.ts","../src/enums/Rounding.ts","../src/enums/TradeType.ts","../src/enums/KashiAction.ts","../src/enums/Fee.ts","../src/enums/OrderStatus.ts","../src/constants/addresses.ts","../src/constants/kashi.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Aurora.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/index.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePoolInitCodeHash.ts","../src/functions/computeConstantProductPoolAddress.ts","../src/functions/sqrt.ts","../src/entities/ConstantProductPool.ts","../src/functions/computePairAddress.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/types/MultiRouterTypes.ts","../src/types/LimitOrderTypes.ts","../src/entities/eip712.ts","../src/utils/MultiRouterMath.ts","../src/entities/MultiRouter.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts","../src/limitorder.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  FANTOM = 250,\n  FANTOM_TESTNET = 4002,\n  XDAI = 100,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  ARBITRUM = 42161,\n  ARBITRUM_TESTNET = 421613,\n  MOONBEAM_TESTNET = 1287,\n  AVALANCHE = 43114,\n  AVALANCHE_TESTNET = 43113,\n  HECO = 128,\n  HECO_TESTNET = 256,\n  HARMONY = 1666600000,\n  HARMONY_TESTNET = 1666700000,\n  OKEX = 66,\n  OKEX_TESTNET = 65,\n  CELO = 42220,\n  PALM = 11297108109,\n  PALM_TESTNET = 11297108099,\n  MOONRIVER = 1285,\n  AURORA = 1313161554,\n  AURORA_TESTNET = 1313161555,\n  AURORA_PRIVATENET = 1313161556\n}\n","export enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n","export enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n","export enum KashiAction {\n  ADD_ASSET = 1,\n  REPAY = 2,\n  REMOVE_ASSET = 3,\n  REMOVE_COLLATERAL = 4,\n  BORROW = 5,\n  GET_REPAY_SHARE = 6,\n  GET_REPAY_PART = 7,\n  ACCRUE = 8,\n\n  // Functions that don't need accrue to be called\n  ADD_COLLATERAL = 10,\n  UPDATE_EXCHANGE_RATE = 11,\n\n  // Function on BentoBox\n  BENTO_DEPOSIT = 20,\n  BENTO_WITHDRAW = 21,\n  BENTO_TRANSFER = 22,\n  BENTO_TRANSFER_MULTIPLE = 23,\n  BENTO_SETAPPROVAL = 24,\n\n  // Any external call (except to BentoBox)\n  CALL = 30\n}\n","// Fee - Tiers TBD\nexport enum Fee {\n  DEFAULT = 30\n}\n","export enum OrderStatus {\n  FILLED = 'FILLED',\n  CANCELLED = 'CANCELLED',\n  EXPIRED = 'EXPIRED',\n  PENDING = 'PENDING'\n}\n","import { AddressMap } from '../types'\nimport { ChainId } from '../enums'\n\nexport const USDC_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\n  [ChainId.AURORA]: '0xB12BFcA5A55806AaF64E99521918A4bf0fC40802'\n}\n\nexport const FACTORY_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.GÖRLI]: '0xE41D4462244Cff4F5ee37497c2C9a9cf8A1559f1',\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.ARBITRUM_TESTNET]: '0xE41D4462244Cff4F5ee37497c2C9a9cf8A1559f1',\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.HARMONY]: '0x9014B937069918bd319f80e8B3BB4A2cf6FAA5F7',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\n  [ChainId.AURORA]: '0x78f406B41C81eb4144C321ADa5902BBF5de28538',\n  [ChainId.AURORA_TESTNET]: '0x73E3B9e3584358a39c48DE028A6039DB2e38a896',\n  [ChainId.AURORA_PRIVATENET]: '0x78f406B41C81eb4144C321ADa5902BBF5de28538'\n}\n\nexport const ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.GÖRLI]: '0x4C389C18AD86964dc0C066B0628e9AdC7eEd4fB5',\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.ARBITRUM_TESTNET]: '0x4C389C18AD86964dc0C066B0628e9AdC7eEd4fB5',\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.HARMONY]: '0x24ad62502d1C652Cc7684081169D04896aC20f30',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\n  [ChainId.AURORA]: '0xcCC7B6CD8764E84Be19BD13b25850C4ac24aa2C0',\n  [ChainId.AURORA_TESTNET]: '0xb165D400794BEF40cEd89B784920EB952cedE024',\n  [ChainId.AURORA_PRIVATENET]: '0xcCC7B6CD8764E84Be19BD13b25850C4ac24aa2C0'\n}\n\nexport const SUSHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\n  [ChainId.ARBITRUM_TESTNET]: '0x7bAd898848385B52c9f47CfaB352d1c7cB22417d',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '0x39cf1BD5f15fb22eC3D9Ff86b0727aFc203427cc',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '0x8D760497554eecC3B9036fb0364156ef2F0D02BC',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.AURORA]: '0xa685F488DEe49b75469E9e866965daBc8Ed6083d',\n  [ChainId.AURORA_TESTNET]: '0x597c3b35fe89af28f0338B63d7d8e3319501393e',\n  [ChainId.AURORA_PRIVATENET]: '0xa685F488DEe49b75469E9e866965daBc8Ed6083d'\n}\n\nexport const MASTERCHEF_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.GÖRLI]: '0xFd7849373D618fb7098520974743d3E5A5Dc7B34',\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '0xFd7849373D618fb7098520974743d3E5A5Dc7B34',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.AURORA]: '0xe653f898b1F216884bC1Fdd5B47b9933B5F4e5FB',\n  [ChainId.AURORA_TESTNET]: '0xc58a0FF26AB29587A0D9e24131c9f23D51B6C67f',\n  [ChainId.AURORA_PRIVATENET]: '0xe653f898b1F216884bC1Fdd5B47b9933B5F4e5FB'\n}\n\nexport const BAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '0xAc4618260C32Dd2861fEc50dE5397acE21859cCF',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.AURORA]: '0xbe334d7208366B3E4Fb40348576227b524d8CBA0',\n  [ChainId.AURORA_TESTNET]: '0xd61a5f2Eda48F2e141fBD1496F7B4aE34a1cD2E1',\n  [ChainId.AURORA_PRIVATENET]: '0xbe334d7208366B3E4Fb40348576227b524d8CBA0'\n}\n\nexport const MAKER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '0x26E7F45e3Eb7f9B19477f9a76525dce7Db400b24',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.AURORA]: '0x274676D087B066beD2d0010b89e763BBfAC8a1b2',\n  [ChainId.AURORA_TESTNET]: '0xbA01db73cE9b1e0Ea48E3363Ab63fccf1eedC8e0',\n  [ChainId.AURORA_PRIVATENET]: '0x274676D087B066beD2d0010b89e763BBfAC8a1b2'\n}\n\nexport const MULTICALL2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\n  [ChainId.ARBITRUM_TESTNET]: '0x1C0772661E45B230e8B96a41AB78A1b14E54B9ad',\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\n  [ChainId.AURORA]: '0xD4A13F9F555b15CaB14738F1dA6f654845F68e4b',\n  [ChainId.AURORA_TESTNET]: '0x05f928E1EA9D0398790FbB4e6ED0d5719fF6aBB7',\n  [ChainId.AURORA_PRIVATENET]: '0xD4A13F9F555b15CaB14738F1dA6f654845F68e4b'\n}\n\nexport const WETH9_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n  [ChainId.ARBITRUM_TESTNET]: '0xf616B741AA44df4d78E903F64D72dDC86Bc337f2',\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\n  [ChainId.AVALANCHE]: '0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15',\n  [ChainId.AURORA]: '0xfDFfbb456257B5423770e37E43725fEF1DDD0B68',\n  [ChainId.AURORA_TESTNET]: '0xbE911044046fBe5F9B2783702661A5C87F5ECbD8',\n  [ChainId.AURORA_PRIVATENET]: '0xfDFfbb456257B5423770e37E43725fEF1DDD0B68'\n}\n\nexport const WNATIVE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: WETH9_ADDRESS[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.MATIC_TESTNET]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n  [ChainId.MOONBEAM_TESTNET]: '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\n  [ChainId.AURORA]: WETH9_ADDRESS[ChainId.AURORA],\n  [ChainId.AURORA_TESTNET]: WETH9_ADDRESS[ChainId.AURORA_TESTNET],\n  [ChainId.AURORA_PRIVATENET]: WETH9_ADDRESS[ChainId.AURORA_PRIVATENET]\n}\n\nexport const CELL_WNEAR: AddressMap = {\n  [ChainId.AURORA]: '0xcA5eD5745890C66026400F9b805466fB3984A345',\n  [ChainId.AURORA_TESTNET]: '0x6fA71f29e5c00116AA510930648C612Fa5587165',\n  [ChainId.AURORA_PRIVATENET]: '0xcA5eD5745890C66026400F9b805466fB3984A345'\n}\n\nexport const CELL_WETH: AddressMap = {\n  [ChainId.AURORA]: '0xD305204424F1232473aaD082111c2750f6d3e485',\n  [ChainId.AURORA_TESTNET]: '0x3313a8c97aE89eAa408C1E794f29c2B432c4C6eE',\n  [ChainId.AURORA_PRIVATENET]: '0xD305204424F1232473aaD082111c2750f6d3e485'\n}\n\nexport const CELL_RUSD: AddressMap = {\n  [ChainId.AURORA]: '0x7EB3c48b9d2A50d394686C95582C1ed22d6aa457',\n  [ChainId.AURORA_TESTNET]: '0x40bDD43044E8E3dBB8E94CC67b0AB2442C51C0BC',\n  [ChainId.AURORA_PRIVATENET]: '0x7EB3c48b9d2A50d394686C95582C1ed22d6aa457'\n}\n\nexport const CELL_WBTC: AddressMap = {\n  [ChainId.AURORA]: '0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F',\n  [ChainId.AURORA_TESTNET]: '0x8D8A94588D092C3B4Acd6Bb8BF009b6258320eed',\n  [ChainId.AURORA_PRIVATENET]: '0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F'\n}\n\nexport const WETH_USDC: AddressMap = {\n  [ChainId.ARBITRUM]: '0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F',\n  [ChainId.ARBITRUM_TESTNET]: '0x96c9C452D06d1c3086A23A2Bf3C0Fb8176edE76F'\n}\n\nexport const TIMELOCK_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const BENTOBOX_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.KOVAN]: '0x9A0D9920D92c178a58D99B455898Df2df22A2eE4',\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const KASHI_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\n\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a'\n}\n\nexport const BORING_HELPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '0x37B3287292De241278fB5FCa514a756E0BE924f8',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const STOP_LIMIT_ORDER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0xce9365dB1C99897f04B3923C03ba9a5f80E8DB87',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.MATIC]: '0x1aDb3Bd86bb01797667eC382a0BC6A9854b4005f',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.ARBITRUM]: '',\n  [ChainId.ARBITRUM_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: ''\n}\n\nexport const ARCHER_ROUTER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x9917C083FF9FbD29Df1367FBF7F2388A9a202431'\n}\n\nexport const MINICHEF_ADDRESS: AddressMap = {\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3'\n}\n\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d'\n}\n\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n}\n\nexport const ZAPPER_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2'\n}\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955'\n}\n\nexport const INIT_CODE_HASH = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '',\n  [ChainId.AURORA]: '0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed',\n  [ChainId.AURORA_TESTNET]: '0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed',\n  [ChainId.AURORA_PRIVATENET]: '0x5334ad97076e94529ef7d4f239c03b57694046068855bedf447975114edbc3ed',\n  [ChainId.ARBITRUM]: '0x6ff4e7d6d362d5e5b0c7631942a272d46d59abada24f9cd181af45b59d8f477b',\n  [ChainId.ARBITRUM_TESTNET]: '0x6ff4e7d6d362d5e5b0c7631942a272d46d59abada24f9cd181af45b59d8f477b'\n}\n\nexport const LP_IDENTIFIER_NAME = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '',\n  [ChainId.AURORA]: 'Cell LP Token',\n  [ChainId.AURORA_TESTNET]: 'tCell LP Token',\n  [ChainId.AURORA_PRIVATENET]: 'tCell LP Token',\n  [ChainId.ARBITRUM]: 'Cortex LP Token',\n  [ChainId.ARBITRUM_TESTNET]: 'tCortex LP Token'\n}\n\nexport const LP_IDENTIFIER_SYMBOL = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '',\n  [ChainId.MATIC]: '',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.FANTOM]: '',\n  [ChainId.FANTOM_TESTNET]: '',\n  [ChainId.XDAI]: '',\n  [ChainId.BSC]: '',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.MOONBEAM_TESTNET]: '',\n  [ChainId.AVALANCHE]: '',\n  [ChainId.AVALANCHE_TESTNET]: '',\n  [ChainId.HECO]: '',\n  [ChainId.HECO_TESTNET]: '',\n  [ChainId.HARMONY]: '',\n  [ChainId.HARMONY_TESTNET]: '',\n  [ChainId.OKEX]: '',\n  [ChainId.OKEX_TESTNET]: '',\n  [ChainId.CELO]: '',\n  [ChainId.PALM]: '',\n  [ChainId.PALM_TESTNET]: '',\n  [ChainId.MOONRIVER]: '',\n  [ChainId.AURORA]: 'CELL-LP',\n  [ChainId.AURORA_TESTNET]: 'tCELL-LP',\n  [ChainId.AURORA_PRIVATENET]: 'tCELL-LP',\n  [ChainId.ARBITRUM]: 'CRX-LP',\n  [ChainId.ARBITRUM_TESTNET]: 'tCRX-LP'\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\n// Functions that need accrue to be called\nexport const ACTION_ADD_ASSET = 1\nexport const ACTION_REPAY = 2\nexport const ACTION_REMOVE_ASSET = 3\nexport const ACTION_REMOVE_COLLATERAL = 4\nexport const ACTION_BORROW = 5\nexport const ACTION_GET_REPAY_SHARE = 6\nexport const ACTION_GET_REPAY_PART = 7\nexport const ACTION_ACCRUE = 8\n\n// Functions that don't need accrue to be called\nexport const ACTION_ADD_COLLATERAL = 10\nexport const ACTION_UPDATE_EXCHANGE_RATE = 11\n\n// Function on BentoBox\nexport const ACTION_BENTO_DEPOSIT = 20\nexport const ACTION_BENTO_WITHDRAW = 21\nexport const ACTION_BENTO_TRANSFER = 22\nexport const ACTION_BENTO_TRANSFER_MULTIPLE = 23\nexport const ACTION_BENTO_SETAPPROVAL = 24\n\n// Any external call (except to BentoBox)\nexport const ACTION_CALL = 30\n\nexport const MINIMUM_TARGET_UTILIZATION = BigNumber.from('700000000000000000') // 70%\n\nexport const MAXIMUM_TARGET_UTILIZATION = BigNumber.from('800000000000000000') // 80%\n\nexport const UTILIZATION_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION = BigNumber.from('1000000000000000000')\n\nexport const FULL_UTILIZATION_MINUS_MAX = FULL_UTILIZATION.sub(MAXIMUM_TARGET_UTILIZATION)\n\nexport const STARTING_INTEREST_PER_YEAR = BigNumber.from(317097920)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1% APR\n\nexport const MINIMUM_INTEREST_PER_YEAR = BigNumber.from(79274480)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 0.25% APR\n\nexport const MAXIMUM_INTEREST_PER_YEAR = BigNumber.from(317097920000)\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(60))\n  .mul(BigNumber.from(24))\n  .mul(BigNumber.from(365)) // approx 1000% APR\n\nexport const INTEREST_ELASTICITY = BigNumber.from('28800000000000000000000000000000000000000') // Half or double in 28800 seconds (8 hours) if linear\n\nexport const FACTOR_PRECISION = BigNumber.from('1000000000000000000')\n\nexport const PROTOCOL_FEE = BigNumber.from('10000') // 10%\n\nexport const PROTOCOL_FEE_DIVISOR = BigNumber.from('100000')\n","import { Currency } from './Currency'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class AbstractCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { AbstractCurrency } from './AbstractCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends AbstractCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n","import { AbstractCurrency } from './AbstractCurrency'\nimport { ChainId } from '../enums'\nimport { Currency } from './Currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends AbstractCurrency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { USDC_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\n\nimport { ChainId } from '../enums'\nimport { Token } from '../entities/Token'\nimport { TokenMap } from '../types/TokenMap'\n\nexport const USDC: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, USDC_ADDRESS[ChainId.MAINNET], 6, 'USDC', 'USD Coin'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, USDC_ADDRESS[ChainId.AURORA], 6, 'USDC', 'USD Coin')\n}\n\nexport const WETH9: TokenMap = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, WETH9_ADDRESS[ChainId.MAINNET], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ARBITRUM_TESTNET]: new Token(\n    ChainId.ARBITRUM_TESTNET,\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether')\n}\n\nexport const WNATIVE: TokenMap = {\n  [ChainId.MAINNET]: WETH9[ChainId.MAINNET],\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\n  [ChainId.FANTOM_TESTNET]: new Token(\n    ChainId.FANTOM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\n    18,\n    'FTM',\n    'Wrapped FTM'\n  ),\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\n  [ChainId.MOONBEAM_TESTNET]: new Token(\n    ChainId.MOONBEAM_TESTNET,\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\n  [ChainId.AVALANCHE_TESTNET]: new Token(\n    ChainId.AVALANCHE_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\n    18,\n    'WAVAX',\n    'Wrapped AVAX'\n  ),\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECO_TESTNET]: new Token(\n    ChainId.HECO_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\n    18,\n    'WHT',\n    'Wrapped HT'\n  ),\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\n  [ChainId.HARMONY_TESTNET]: new Token(\n    ChainId.HARMONY_TESTNET,\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\n    18,\n    'WONE',\n    'Wrapped ONE'\n  ),\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\n  [ChainId.OKEX_TESTNET]: new Token(\n    ChainId.OKEX_TESTNET,\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\n    18,\n    'WOKT',\n    'Wrapped OKExChain'\n  ),\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\n  [ChainId.MOONRIVER]: new Token(\n    ChainId.MOONRIVER,\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\n    18,\n    'WMOVR',\n    'Wrapped Moonriver'\n  ),\n  [ChainId.AURORA]: new Token(ChainId.AURORA, WNATIVE_ADDRESS[ChainId.AURORA], 18, 'WETH', 'Wrapped ETH'),\n  [ChainId.AURORA_TESTNET]: new Token(\n    ChainId.AURORA_TESTNET,\n    WNATIVE_ADDRESS[ChainId.AURORA_TESTNET],\n    18,\n    'WETH',\n    'Wrapped ETH'\n  ),\n  [ChainId.AURORA_PRIVATENET]: new Token(\n    ChainId.AURORA_PRIVATENET,\n    WNATIVE_ADDRESS[ChainId.AURORA_PRIVATENET],\n    18,\n    'WETH',\n    'Wrapped ETH'\n  )\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Avalanche extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'AVAX', 'Avalanche')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Avalanche } = {}\n\n  public static onChain(chainId: number): Avalanche {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Binance extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'BNB', 'Binance Coin')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Binance } = {}\n\n  public static onChain(chainId: number): Binance {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Celo extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'CELO', 'Celo')\n  }\n\n  public get wrapped(): Token {\n    const wcelo = WNATIVE[this.chainId]\n    invariant(!!wcelo, 'WRAPPED')\n    return wcelo\n  }\n\n  private static _cache: { [chainId: number]: Celo } = {}\n\n  public static onChain(chainId: number): Celo {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WETH9 } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Fantom extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'FTM', 'Fantom')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Fantom } = {}\n\n  public static onChain(chainId: number): Fantom {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Harmony extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ONE', 'Harmony')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Harmony } = {}\n\n  public static onChain(chainId: number): Harmony {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Heco extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'HT', 'Huobi Token')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Heco } = {}\n\n  public static onChain(chainId: number): Heco {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Matic extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MATIC', 'Matic')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Matic } = {}\n\n  public static onChain(chainId: number): Matic {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Movr extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'MOVR', 'Moonriver')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Movr } = {}\n\n  public static onChain(chainId: number): Movr {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Okex extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'OKT', 'OKExChain')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Okex } = {}\n\n  public static onChain(chainId: number): Okex {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class xDai extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'XDAI', 'xDai')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: xDai } = {}\n\n  public static onChain(chainId: number): xDai {\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Palm extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'PALM', 'Palm')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Palm } = {}\n\n  public static onChain(chainId: number): Palm {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency } from '../Currency'\nimport { NativeCurrency } from '../NativeCurrency'\nimport { Token } from '../Token'\nimport { WNATIVE } from '../../constants/tokens'\nimport invariant from 'tiny-invariant'\n\nexport class Aurora extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Aurora')\n  }\n\n  public get wrapped(): Token {\n    const wnative = WNATIVE[this.chainId]\n    invariant(!!wnative, 'WRAPPED')\n    return wnative\n  }\n\n  private static _cache: { [chainId: number]: Aurora } = {}\n\n  public static onChain(chainId: number): Aurora {\n    return this._cache[chainId] ?? (this._cache[chainId] = new Aurora(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import {\n  Aurora,\n  Avalanche,\n  Binance,\n  Celo,\n  Ether,\n  Fantom,\n  Harmony,\n  Heco,\n  Matic,\n  Movr,\n  Okex,\n  Palm,\n  xDai\n} from '../entities/Native'\n\nimport { ChainId } from '../enums'\n\nexport const NATIVE = {\n  [ChainId.MAINNET]: Ether.onChain(ChainId.MAINNET),\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\n  [ChainId.AURORA]: Aurora.onChain(ChainId.AURORA),\n  [ChainId.AURORA_TESTNET]: Aurora.onChain(ChainId.AURORA_TESTNET),\n  [ChainId.AURORA_PRIVATENET]: Aurora.onChain(ChainId.AURORA_PRIVATENET)\n}\n","import JSBI from 'jsbi'\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","import JSBI from 'jsbi'\n\nexport * from './addresses'\nexport * from './kashi'\nexport * from './natives'\nexport * from './numbers'\nexport * from './tokens'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nexport const LAMBDA_URL = 'https://9epjsvomc4.execute-api.us-east-1.amazonaws.com/dev'\n\nexport const SOCKET_URL = 'wss://hfimt374ge.execute-api.us-east-1.amazonaws.com/dev'\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import _Big, { RoundingMode } from 'big.js'\n\nimport { BigintIsh } from '../types'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport _Decimal from 'decimal.js-light'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { MaxUint256 } from '../constants'\nimport { Rounding } from '../enums'\nimport { Token } from './Token'\nimport _Big from 'big.js'\nimport invariant from 'tiny-invariant'\nimport toFormat from 'toformat'\n\nconst Big = toFormat(_Big)\n\nBig.strict = true\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\nimport invariant from 'tiny-invariant'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { defaultAbiCoder } from '@ethersproject/abi'\n\nexport const computePoolInitCodeHash = ({\n  creationCode,\n  deployData,\n  masterDeployerAddress\n}: {\n  creationCode: string\n  deployData: string\n  masterDeployerAddress: string\n}): string =>\n  keccak256(\n    ['bytes'],\n    [\n      pack(\n        ['bytes', 'bytes'],\n        [creationCode, defaultAbiCoder.encode(['bytes', 'address'], [deployData, masterDeployerAddress])]\n      )\n    ]\n  )\n","import { Fee } from '../enums'\nimport { Token } from '../entities'\nimport { computePoolInitCodeHash } from './computePoolInitCodeHash'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { keccak256 } from '@ethersproject/solidity'\n\nconst MASTER_DEPLOYER_ADDRESS = '0xa2A7Aa74cb94f37221FD49F5BA6F3fF876092700'\n\nconst CONSTANT_PRODUCT_POOL_CREATION_CODE =\n  '0x6101806040523480156200001257600080fd5b5060405162004195380380620041958339810160408190526200003591620005d2565b604080518082018252600e81526d29bab9b434902628102a37b5b2b760911b6020918201528151808301835260018152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fc2bf45081e840722410522aa366600d7fe4da5bfb5a5b417f4d5125b4ed180a4918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c0016040516020818303038152906040528051906020012060808181525050506000806000808580602001905181019062000132919062000572565b929650909450925090506001600160a01b038416620001875760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b60448201526064015b60405180910390fd5b826001600160a01b0316846001600160a01b03161415620001eb5760405162461bcd60e51b815260206004820152601360248201527f4944454e544943414c5f4144445245535345530000000000000000000000000060448201526064016200017e565b6001600160a01b038416301415620002365760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b6001600160a01b038316301415620002815760405162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22faa27a5a2a760991b60448201526064016200017e565b612710821115620002c85760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f535741505f46454560801b60448201526064016200017e565b60408051600481526024810182526020810180516001600160e01b03166360a56c0160e11b17905290516000916001600160a01b038816916200030c9190620006b9565b600060405180830381855afa9150503d806000811462000349576040519150601f19603f3d011682016040523d82523d6000602084013e6200034e565b606091505b5060408051600481526024810182526020810180516001600160e01b0316630605066960e11b1790529051919350600092506001600160a01b03891691620003979190620006b9565b600060405180830381855afa9150503d8060008114620003d4576040519150601f19603f3d011682016040523d82523d6000602084013e620003d9565b606091505b5060408051600481526024810182526020810180516001600160e01b0316634da3182760e01b1790529051919350600092506001600160a01b038a1691620004229190620006b9565b600060405180830381855afa9150503d80600081146200045f576040519150601f19603f3d011682016040523d82523d6000602084013e62000464565b606091505b506001600160601b031960608a811b82166101405289901b166101605260a087905261271087900360c0528451909250620004aa9150840160209081019085016200069f565b6004558151620004c490830160209081019084016200054b565b60601b6001600160601b03191660e0528051620004eb90602090830181019083016200054b565b6001600160601b0319606091821b8116610100529089901b1661012052600160095583156200052a57600880546001600160e01b0316600160e01b1790555b50505050505050505062000739565b8051620005468162000720565b919050565b6000602082840312156200055e57600080fd5b81516200056b8162000720565b9392505050565b600080600080608085870312156200058957600080fd5b8451620005968162000720565b6020860151909450620005a98162000720565b6040860151606087015191945092508015158114620005c757600080fd5b939692955090935050565b60008060408385031215620005e657600080fd5b82516001600160401b0380821115620005fe57600080fd5b818501915085601f8301126200061357600080fd5b8151818111156200062857620006286200070a565b604051601f8201601f19908116603f011681019083821181831017156200065357620006536200070a565b816040528281528860208487010111156200066d57600080fd5b62000680836020830160208801620006d7565b8096505050505050620006966020840162000539565b90509250929050565b600060208284031215620006b257600080fd5b5051919050565b60008251620006cd818460208701620006d7565b9190910192915050565b60005b83811015620006f4578181015183820152602001620006da565b8381111562000704576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200073657600080fd5b50565b60805160a05160c05160e05160601c6101005160601c6101205160601c6101405160601c6101605160601c61390062000895600039600081816105b301528181610791015281816108c00152818161096e01528181610ff6015281816110fe01528181611336015281816113a5015281816115e701528181611fc30152818161204a01526129e701526000818161032e0152818161070d01528181610a5301528181610b8201528181610fca01528181611095015281816112e2015281816114860152818161157901528181611d24015281816120830152818161216e01526128e801526000818161058c015281816118070152611c240152600081816103f901528181612650015281816127c6015281816128ac0152612a900152600081816102e20152612eb3015260006125520152600081816104200152818161315501526131c00152600081816103d2015261233901526139006000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c8063627dd56a1161012a578063a69840a8116100bd578063c14ad8021161008c578063d21220a711610071578063d21220a7146105ae578063d505accf146105d5578063dd62ed3e146105e857600080fd5b8063c14ad8021461057e578063cf58879a1461058757600080fd5b8063a69840a81461051e578063a8f1f52e14610545578063a9059cbb14610558578063af8c09bf1461056b57600080fd5b80637ba0e2e7116100f95780637ba0e2e7146104a55780637ecebe00146104b857806392bc3219146104d857806395d89b41146104e257600080fd5b8063627dd56a1461045457806367e4ac2c1461046757806370a082311461047c5780637464fc3d1461049c57600080fd5b80632a07b6c7116101a25780634da31827116101715780634da31827146103f457806354cf2aeb1461041b5780635909c0d5146104425780635a3d54931461044b57600080fd5b80632a07b6c71461036c57806330adf81f1461038c578063313ce567146103b35780633644e515146103cd57600080fd5b80630c0a0cd2116101de5780630c0a0cd2146102dd5780630dfe16811461032957806318160ddd1461035057806323b872dd1461035957600080fd5b8063053da1c81461021057806306fdde03146102365780630902f1ac1461027f578063095ea7b3146102ba575b600080fd5b61022361021e366004613566565b610613565b6040519081526020015b60405180910390f35b6102726040518060400160405280600e81526020017f5375736869204c5020546f6b656e00000000000000000000000000000000000081525081565b60405161022d9190613716565b610287610c3e565b604080516dffffffffffffffffffffffffffff948516815293909216602084015263ffffffff169082015260600161022d565b6102cd6102c8366004613449565b610ca7565b604051901515815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022d565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b61022360005481565b6102cd6103673660046134ae565b610d20565b61037f61037a366004613566565b610e6c565b60405161022d91906136b1565b6102237f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6103bb601281565b60405160ff909116815260200161022d565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b61022360055481565b61022360065481565b610223610462366004613566565b6111e1565b61046f611557565b60405161022d9190613657565b61022361048a36600461327d565b60016020526000908152604090205481565b61022360075481565b6102236104b3366004613566565b611656565b6102236104c636600461327d565b60036020526000908152604090205481565b6104e0611bb2565b005b6102726040518060400160405280600381526020017f534c50000000000000000000000000000000000000000000000000000000000081525081565b6102237f54726964656e743a436f6e7374616e7450726f6475637400000000000000000081565b610223610553366004613566565b611cad565b6102cd610566366004613449565b611de0565b610223610579366004613566565b611e65565b61022360045481565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6103047f000000000000000000000000000000000000000000000000000000000000000081565b6104e06105e33660046134ef565b61220e565b6102236105f6366004613475565b600260209081526000928352604080842090915290825290205481565b6000600954600114610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b4544000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260095560008080808061069d87890189613305565b9450945094509450945060008060006107056008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561096c5761078a85846dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b98506107b87f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b1906107f4908790600401613716565b600060405180830381600087803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b505050506000806108316128a5565b9150915086856dffffffffffffffffffffffffffff16830310156108b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b6108be8282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f60405161095d929190918252602082015260400190565b60405180910390a45050610c2a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b610a4c85836dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661254a565b9850610a7a7f00000000000000000000000000000000000000000000000000000000000000008a89896125ad565b6040517fbd50c7b1000000000000000000000000000000000000000000000000000000008152339063bd50c7b190610ab6908790600401613716565b600060405180830381600087803b158015610ad057600080fd5b505af1158015610ae4573d6000803e3d6000fd5b50505050600080610af36128a5565b9150915086846dffffffffffffffffffffffffffff1682031015610b73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f494e53554646494349454e545f414d4f554e545f494e00000000000000000000604482015260640161067d565b610b808282878787612b1d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e460628a8f604051610c1f929190918252602082015260400190565b60405180910390a450505b505060016009555094979650505050505050565b6000806000610c9c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250909192565b33600081815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d0f9086815260200190565b60405180910390a350600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14610dbd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020908152604080832033845290915281208054849290610db7908490613792565b90915550505b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604081208054849290610df2908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff808416600081815260016020526040908190208054860190555190918616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5a9086815260200190565b60405180910390a35060019392505050565b6060600954600114610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b6002600955600080610eee84860186613414565b915091506000806000610f506008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080610f616128a5565b60008054308252600160205260409091205492945090925090610f85878784612e33565b90910190600082610f968684613755565b610fa09190613741565b9050600083610faf8685613755565b610fb99190613741565b9050610fc53084612ee2565b610ff17f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b61101d7f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b8186039550808503945061103486868b8b8b612b1d565b6110466110418688613755565b612f75565b6007556040805160028082526060820190925290816020015b604080518082019091526000808252602082015281526020019060019003908161105f579050509b5060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001838152508c6000815181106110e6576110e6613847565b602002602001018190525060405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168152602001828152508c60018151811061114f5761114f613847565b60200260200101819052508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d8193649684846040516111c2929190918252602082015260400190565b60405180910390a35050600160095550979a9950505050505050505050565b600060095460011461124f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611264858701876132be565b92509250925060008060006112c86008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806112d96128a5565b915091506000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614156113a3577f00000000000000000000000000000000000000000000000000000000000000009050866dffffffffffffffffffffffffffff168403915061139782886dffffffffffffffffffffffffffff16886dffffffffffffffffffffffffffff1661254a565b9a508a830392506114bf565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614611458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000604482015260640161067d565b50506008546dffffffffffffffffffffffffffff6e01000000000000000000000000000090910481168203907f0000000000000000000000000000000000000000000000000000000000000000906114b7908390888116908a1661254a565b9a508a840393505b6114cb818c8b8b6125ad565b6114d88484898989612b1d565b8073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062858f604051610c1f929190918252602082015260400190565b60408051600280825260608083018452926020830190803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106115ab576115ab613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f00000000000000000000000000000000000000000000000000000000000000008160018151811061161957611619613847565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b60006009546001146116c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560006116d78385018561327d565b905060008060006117376008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b9250925092506000806117486128a5565b600054919350915061175b868683612e33565b0160006117786dffffffffffffffffffffffffffff881685613792565b905060006117966dffffffffffffffffffffffffffff881685613792565b90506000806117c784848c6dffffffffffffffffffffffffffff168c6dffffffffffffffffffffffffffff166130fa565b909250905060006117ef6117db8389613792565b6117e5858b613792565b6110419190613755565b905085611a705761180360006103e86131fd565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637cd07e476040518163ffffffff1660e01b815260040160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a391906132a1565b90503373ffffffffffffffffffffffffffffffffffffffff821614156119dd578073ffffffffffffffffffffffffffffffffffffffff166340dc0e376040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194191906135d8565b9d508d1580159061197257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8e14155b6119d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4241445f444553495245445f4c49515549444954590000000000000000000000604482015260640161067d565b611a6a565b73ffffffffffffffffffffffffffffffffffffffff811615611a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4f4e4c595f4d49475241544f5200000000000000000000000000000000000000604482015260640161067d565b611a676103e883613792565b9d505b50611ab8565b6000611a926110416dffffffffffffffffffffffffffff808e16908f16613755565b90508087611aa08285613792565b611aaa9190613755565b611ab49190613741565b9d50505b8c611b1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f494e53554646494349454e545f4c49515549444954595f4d494e544544000000604482015260640161067d565b611b298c8e6131fd565b611b3688888d8d8d612b1d565b611b43611041888a613755565b600755604080518681526020810186905273ffffffffffffffffffffffffffffffffffffffff8e169133917fdbba30eb0402b389513e87f51f4db2db80bed454384ec6925a24097c3548a02a91015b60405180910390a35050600160095550989b9a5050505050505050505050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc14ad80200000000000000000000000000000000000000000000000000000000179052905160009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691611c4f919061363b565b600060405180830381855afa9150503d8060008114611c8a576040519150601f19603f3d011682016040523d82523d6000602084013e611c8f565b606091505b5091505080806020019051810190611ca791906135d8565b60045550565b60008080611cbd84860186613449565b91509150600080611d1d6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b50915091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611da857611da183836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff1661254a565b9450611dd6565b611dd383826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff1661254a565b94505b5050505092915050565b33600090815260016020526040812080548391908390611e01908490613792565b909155505073ffffffffffffffffffffffffffffffffffffffff8316600081815260016020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d0f9086815260200190565b6000600954600114611ed3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600660248201527f4c4f434b45440000000000000000000000000000000000000000000000000000604482015260640161067d565b600260095560008080611ee8858701876132be565b9250925092506000806000611f4c6008546dffffffffffffffffffffffffffff808216926e01000000000000000000000000000083049091169163ffffffff7c01000000000000000000000000000000000000000000000000000000009091041690565b925092509250600080611f5d6128a5565b60008054308252600160205260409091205492945090925090611f81878784612e33565b90910190600082611f928684613755565b611f9c9190613741565b9050600083611fab8685613755565b611fb59190613741565b9050611fc13084612ee2565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156120815761204482838b6dffffffffffffffffffffffffffff1603838b6dffffffffffffffffffffffffffff160361254a565b016120717f0000000000000000000000000000000000000000000000000000000000000000828d8d6125ad565b9b5050918a90039160008b6121a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614612136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f494e56414c49445f4f55545055545f544f4b454e000000000000000000000000604482015260640161067d565b61216581828a6dffffffffffffffffffffffffffff1603848c6dffffffffffffffffffffffffffff160361254a565b820191506121957f0000000000000000000000000000000000000000000000000000000000000000838d8d6125ad565b509a50928a9003928a60005b6121ae86868b8b8b612b1d565b6121bb6110418688613755565b600755604080518381526020810183905273ffffffffffffffffffffffffffffffffffffffff8d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d819364969101611b92565b42841015612278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff878116600081815260036020908152604080832080546001810190915581517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a084019490945260c08084018990528451808503909101815260e0840190945283519301929092207f19010000000000000000000000000000000000000000000000000000000000006101008301527f000000000000000000000000000000000000000000000000000000000000000061010283015261012282015261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156123f1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81161580159061246c57508873ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6124d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f494e56414c49445f5045524d49545f5349474e41545552450000000000000000604482015260640161067d565b73ffffffffffffffffffffffffffffffffffffffff90811660009081526002602090815260408083208b8516808552908352928190208a905551898152919350918a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000806125777f000000000000000000000000000000000000000000000000000000000000000086613755565b90508061258661271086613755565b6125909190613729565b61259a8483613755565b6125a49190613741565b95945050505050565b801561272f576040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260006084830181905260a48084018890528451808503909101815260c490930184526020830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f97da6d300000000000000000000000000000000000000000000000000000000017905292517f00000000000000000000000000000000000000000000000000000000000000009091169161267c9161363b565b6000604051808303816000865af19150503d80600081146126b9576040519150601f19603f3d011682016040523d82523d6000602084013e6126be565b606091505b5050905080612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f57495448445241575f4641494c45440000000000000000000000000000000000604482015260640161067d565b5061289f565b6040805173ffffffffffffffffffffffffffffffffffffffff8681166024830152306044830152848116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff18d03cc0000000000000000000000000000000000000000000000000000000017905291516000927f000000000000000000000000000000000000000000000000000000000000000016916127f09161363b565b6000604051808303816000865af19150503d806000811461282d576040519150601f19603f3d011682016040523d82523d6000602084013e612832565b606091505b505090508061289d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161067d565b505b50505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7888aec7f00000000000000000000000000000000000000000000000000000000000000003060405160240161293b92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051612989919061363b565b600060405180830381855afa9150503d80600081146129c4576040519150601f19603f3d011682016040523d82523d6000602084013e6129c9565b606091505b50915050808060200190518101906129e191906135d8565b604080517f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811660248301523060448084019190915283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff7888aec0000000000000000000000000000000000000000000000000000000017905291519295506000927f000000000000000000000000000000000000000000000000000000000000000090921691612abd919061363b565b600060405180830381855afa9150503d8060008114612af8576040519150601f19603f3d011682016040523d82523d6000602084013e612afd565b606091505b5091505080806020019051810190612b1591906135d8565b925050509091565b6dffffffffffffffffffffffffffff8511801590612b4957506dffffffffffffffffffffffffffff8411155b612baf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4f564552464c4f57000000000000000000000000000000000000000000000000604482015260640161067d565b6008547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16612c3357600880546dffffffffffffffffffffffffffff8681166e010000000000000000000000000000027fffffffff0000000000000000000000000000000000000000000000000000000090921690881617179055612df3565b6000612c44640100000000426137d5565b90508163ffffffff168163ffffffff1614158015612c7157506dffffffffffffffffffffffffffff841615155b8015612c8c57506dffffffffffffffffffffffffffff831615155b15612d515781810360006dffffffffffffffffffffffffffff86167bffffffffffffffffffffffffffff0000000000000000000000000000607087901b1681612cd757612cd7613818565b600580549290910463ffffffff851681029092019055905060006dffffffffffffffffffffffffffff8616607088901b7bffffffffffffffffffffffffffff00000000000000000000000000001681612d3257612d32613818565b0490508263ffffffff1681026006600082825401925050819055505050505b6008805463ffffffff9092167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff8881166e010000000000000000000000000000027fffffffff00000000000000000000000000000000000000000000000000000000909516908a161793909317929092169190911790555b60408051868152602081018690527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a15050505050565b6007546000908015612eda576000612e616110416dffffffffffffffffffffffffffff808816908916613755565b905081811115612ed857612710816004548484612e7e9190613792565b612e889088613755565b612e929190613755565b612e9c9190613741565b612ea69190613741565b92508215612ed857612ed87f0000000000000000000000000000000000000000000000000000000000000000846131fd565b505b509392505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081208054839290612f17908490613792565b909155505060008054829003815560405182815273ffffffffffffffffffffffffffffffffffffffff8416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600081612f8457506000919050565b8160017001000000000000000000000000000000008210612faa5760809190911c9060401b5b680100000000000000008210612fc55760409190911c9060201b5b6401000000008210612fdc5760209190911c9060101b5b620100008210612ff15760109190911c9060081b5b61010082106130055760089190911c9060041b5b601082106130185760049190911c9060021b5b600882106130245760011b5b600181858161303557613035613818565b048201901c9050600181858161304d5761304d613818565b048201901c9050600181858161306557613065613818565b048201901c9050600181858161307d5761307d613818565b048201901c9050600181858161309557613095613818565b048201901c905060018185816130ad576130ad613818565b048201901c905060018185816130c5576130c5613818565b048201901c905060008185816130dd576130dd613818565b0490508082106130ed57806130ef565b815b93505050505b919050565b600080831580613108575082155b15613118575060009050806131f4565b6000846131258589613755565b61312f9190613741565b905085811161318a576131456127106002613755565b61314f8288613792565b613179907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131839190613741565b91506131f2565b6000846131978789613755565b6131a19190613741565b90506131b06127106002613755565b6131ba828a613792565b6131e4907f0000000000000000000000000000000000000000000000000000000000000000613755565b6131ee9190613741565b9350505b505b94509492505050565b8060008082825461320e9190613729565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000818152600160209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612f69565b803580151581146130f557600080fd5b60006020828403121561328f57600080fd5b813561329a816138a5565b9392505050565b6000602082840312156132b357600080fd5b815161329a816138a5565b6000806000606084860312156132d357600080fd5b83356132de816138a5565b925060208401356132ee816138a5565b91506132fc6040850161326d565b90509250925092565b600080600080600060a0868803121561331d57600080fd5b8535613328816138a5565b94506020860135613338816138a5565b93506133466040870161326d565b925060608601359150608086013567ffffffffffffffff8082111561336a57600080fd5b818801915088601f83011261337e57600080fd5b81358181111561339057613390613876565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133d6576133d6613876565b816040528281528b60208487010111156133ef57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b6000806040838503121561342757600080fd5b8235613432816138a5565b91506134406020840161326d565b90509250929050565b6000806040838503121561345c57600080fd5b8235613467816138a5565b946020939093013593505050565b6000806040838503121561348857600080fd5b8235613493816138a5565b915060208301356134a3816138a5565b809150509250929050565b6000806000606084860312156134c357600080fd5b83356134ce816138a5565b925060208401356134de816138a5565b929592945050506040919091013590565b600080600080600080600060e0888a03121561350a57600080fd5b8735613515816138a5565b96506020880135613525816138a5565b95506040880135945060608801359350608088013560ff8116811461354957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806020838503121561357957600080fd5b823567ffffffffffffffff8082111561359157600080fd5b818501915085601f8301126135a557600080fd5b8135818111156135b457600080fd5b8660208285010111156135c657600080fd5b60209290920196919550909350505050565b6000602082840312156135ea57600080fd5b5051919050565b600081518084526136098160208601602086016137a9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161364d8184602087016137a9565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156136a557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613673565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015613709578151805173ffffffffffffffffffffffffffffffffffffffff1685528601518685015292840192908501906001016136ce565b5091979650505050505050565b60208152600061329a60208301846135f1565b6000821982111561373c5761373c6137e9565b500190565b60008261375057613750613818565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561378d5761378d6137e9565b500290565b6000828210156137a4576137a46137e9565b500390565b60005b838110156137c45781810151838201526020016137ac565b8381111561289f5750506000910152565b6000826137e4576137e4613818565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146138c757600080fd5b5056fea264697066735822122004f193ad403a2048e6ef0c1fc9da9b9f522fe2ad030c99737c73f0f04901cf7464736f6c63430008070033'\n\nexport const computeConstantProductPoolAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  fee,\n  twap\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  fee: Fee\n  twap: boolean\n}): string => {\n  // does safety checks\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n\n  const deployData = defaultAbiCoder.encode(\n    ['address', 'address', 'uint256', 'bool'],\n    [...[token0.address, token1.address].sort(), fee, twap]\n  )\n\n  // Compute init code hash based off the bytecode, deployData & masterDeployerAddress\n  const CONSTANT_PRODUCT_POOL_INIT_CODE_HASH = computePoolInitCodeHash({\n    creationCode: CONSTANT_PRODUCT_POOL_CREATION_CODE,\n    deployData,\n    masterDeployerAddress: MASTER_DEPLOYER_ADDRESS\n  })\n\n  // Compute pool address\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [deployData]), CONSTANT_PRODUCT_POOL_INIT_CODE_HASH)\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fee } from '../enums'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computeConstantProductPoolAddress } from '../functions/computeConstantProductPoolAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class ConstantProductPool {\n  public readonly liquidityToken: Token\n  public readonly fee: Fee\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token, fee: Fee = 25, twap: boolean = true): string {\n    return computeConstantProductPoolAddress({\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\n      tokenA,\n      tokenB,\n      fee,\n      twap\n    })\n  }\n\n  public constructor(\n    currencyAmountA: CurrencyAmount<Token>,\n    currencyAmountB: CurrencyAmount<Token>,\n    fee: Fee = 25,\n    twap: boolean = true\n  ) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      ConstantProductPool.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency, fee, twap),\n      18,\n      'SLP',\n      'Sushi LP Token'\n    )\n    this.fee = fee\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, ConstantProductPool] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.quotient, outputAmount.quotient),\n      _997 // 3%\n    )\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new ConstantProductPool(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { keccak256, pack } from '@ethersproject/solidity'\n\nimport { INIT_CODE_HASH } from '../constants'\nimport { Token } from '../entities'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { ChainId } from 'enums'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB,\n  chainId\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n  chainId: ChainId\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH[chainId]\n  )\n}\n","import {\n  FACTORY_ADDRESS,\n  FIVE,\n  LP_IDENTIFIER_NAME,\n  LP_IDENTIFIER_SYMBOL,\n  MINIMUM_LIQUIDITY,\n  ONE,\n  ZERO,\n  _1000,\n  _997\n} from '../constants'\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\n\nimport { BigintIsh } from '../types'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport JSBI from 'jsbi'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport { computePairAddress } from '../functions/computePairAddress'\nimport invariant from 'tiny-invariant'\nimport { sqrt } from '../functions/sqrt'\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const chainId = tokenA.chainId\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS[chainId],\n      tokenA,\n      tokenB,\n      chainId\n    })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\n      ? [currencyAmountA, currencyAmountB]\n      : [currencyAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      currencyAmounts[0].currency.chainId,\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\n      18,\n      LP_IDENTIFIER_NAME[currencyAmounts[0].currency.chainId],\n      LP_IDENTIFIER_SYMBOL[currencyAmounts[0].currency.chainId]\n    )\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import { BigintIsh } from '../types'\nimport { Fraction } from './Fraction'\nimport JSBI from 'jsbi'\nimport { Rounding } from '../enums'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Currency } from './Currency'\nimport { Pair } from './Pair'\nimport { Price } from './Price'\nimport { Token } from './Token'\nimport invariant from 'tiny-invariant'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import { Currency } from '../entities/Currency'\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\nimport { Percent } from '../entities/Percent'\nimport { Price } from '../entities/Price'\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ONE, ZERO } from '../constants'\n\nimport { Currency } from './Currency'\nimport { CurrencyAmount } from './CurrencyAmount'\nimport { Fraction } from './Fraction'\nimport { Pair } from './Pair'\nimport { Percent } from './Percent'\nimport { Price } from './Price'\nimport { Route } from './Route'\nimport { Token } from './Token'\nimport { TradeType } from '../enums'\nimport { computePriceImpact } from '../functions/computePriceImpact'\nimport invariant from 'tiny-invariant'\nimport { sortedInsert } from '../functions/sortedInsert'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\n\nexport interface RToken {\n  name: string\n  address: string\n}\n\nexport enum PoolType {\n  ConstantProduct = 'ConstantProduct',\n  Weighted = 'Weighted',\n  Hybrid = 'Hybrid',\n  ConcentratedLiquidity = 'ConcentratedLiquidity'\n}\n\nexport interface PoolInfo {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n}\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\ntype PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\ntype PoolInfoWithDefaults = PartialBy<PoolInfo, 'minLiquidity' | 'swapGasCost'>\n\nexport class Pool {\n  address: string\n  token0: RToken\n  token1: RToken\n  type: PoolType\n  reserve0: BigNumber\n  reserve1: BigNumber\n  fee: number\n  minLiquidity: number\n  swapGasCost: number\n\n  constructor(_info: PoolInfoWithDefaults) {\n    const info = {\n      minLiquidity: 1000,\n      swapGasCost: 40_000,\n      ..._info\n    }\n    this.address = info.address\n    this.token0 = info.token0\n    this.token1 = info.token1\n    this.type = info.type\n    this.reserve0 = info.reserve0\n    this.reserve1 = info.reserve1\n    this.fee = info.fee\n    this.minLiquidity = info.minLiquidity\n    this.swapGasCost = info.swapGasCost\n  }\n}\n\ntype PoolInfoNoType = Omit<PoolInfoWithDefaults, 'type'>\n\nexport class RConstantProductPool extends Pool {\n  constructor(info: PoolInfoNoType) {\n    super({\n      type: PoolType.ConstantProduct,\n      ...info\n    })\n  }\n}\n\ntype HybridPoolInfo = PoolInfoNoType & { A: number }\n\nexport class RHybridPool extends Pool {\n  A: number\n  constructor(info: HybridPoolInfo) {\n    super({\n      type: PoolType.Hybrid,\n      ...info\n    })\n    this.A = info.A\n  }\n}\n\ntype WeightedPoolInfo = PoolInfoNoType & { weight0: number; weight1: number }\n\nexport class RWeightedPool extends Pool {\n  weight0: number\n  weight1: number\n  constructor(info: WeightedPoolInfo) {\n    super({\n      type: PoolType.Weighted,\n      ...info\n    })\n    this.weight0 = info.weight0\n    this.weight1 = info.weight1\n  }\n}\n\nexport const CL_MIN_TICK = -887272\nexport const CL_MAX_TICK = -CL_MIN_TICK - 1\ninterface CLTick {\n  index: number\n  DLiquidity: number\n}\n\ninterface CLSpecific {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n}\n\ntype CLPoolInfo = Omit<PoolInfoNoType, 'reserve0' | 'reserve1'> & CLSpecific\n\nexport class RConcentratedLiquidityPool extends Pool {\n  liquidity: number\n  sqrtPrice: number\n  nearestTick: number\n  ticks: CLTick[]\n  constructor(info: CLPoolInfo) {\n    super({\n      type: PoolType.ConcentratedLiquidity,\n      reserve0: BigNumber.from(0),\n      reserve1: BigNumber.from(0),\n      ...info\n    })\n    this.liquidity = info.liquidity\n    this.sqrtPrice = info.sqrtPrice\n    this.nearestTick = info.nearestTick\n    this.ticks = info.ticks\n  }\n}\n\nexport interface RouteLeg {\n  address: string\n  token: RToken\n  swapPortion: number // For router contract\n  absolutePortion: number // To depict at webpage for user\n}\n\nexport enum RouteStatus {\n  Success = 'Success',\n  NoWay = 'NoWay',\n  Partial = 'Partial'\n}\nexport interface MultiRoute {\n  status: RouteStatus\n  amountIn: number\n  amountOut: number\n  legs: RouteLeg[]\n  gasSpent: number\n  totalAmountOut: number\n}\n","export const types = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  LimitOrder: [\n    { name: 'maker', type: 'address' },\n    { name: 'tokenIn', type: 'address' },\n    { name: 'tokenOut', type: 'address' },\n    { name: 'amountIn', type: 'uint256' },\n    { name: 'amountOut', type: 'uint256' },\n    { name: 'recipient', type: 'address' },\n    { name: 'startTime', type: 'uint256' },\n    { name: 'endTime', type: 'uint256' },\n    { name: 'stopPrice', type: 'uint256' },\n    { name: 'oracleAddress', type: 'address' },\n    { name: 'oracleData', type: 'bytes32' }\n  ]\n}\n\nexport const bentoTypes = {\n  EIP712Domain: [\n    { name: 'name', type: 'string' },\n    { name: 'chainId', type: 'uint256' },\n    { name: 'verifyingContract', type: 'address' }\n  ],\n  SetMasterContractApproval: [\n    { name: 'warning', type: 'string' },\n    { name: 'user', type: 'address' },\n    { name: 'masterContract', type: 'address' },\n    { name: 'approved', type: 'bool' },\n    { name: 'nonce', type: 'uint256' }\n  ]\n}\nexport const name = 'LimitOrder'\n","import { BENTOBOX_ADDRESS, STOP_LIMIT_ORDER_ADDRESS } from '../constants'\nimport { bentoTypes, name, types } from '../types'\n\nimport { ChainId } from 'enums'\nimport { SigningKey } from '@ethersproject/signing-key'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getMessage } from 'eip-712'\nimport { splitSignature } from '@ethersproject/bytes'\n\nexport interface Domain {\n  name: string\n  chainId: ChainId\n  verifyingContract: string\n}\n\nexport interface Message {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string\n  endTime: string\n  stopPrice: string\n  oracleAddress: string\n  oracleData: string\n}\n\nexport interface BentoApprovalMessage {\n  warning: string\n  user: string\n  masterContract: string\n  approved: boolean\n  nonce: number\n}\n\nexport const getSignature = (message: Message, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return sign({ types, primaryType: 'LimitOrder', domain, message }, privateKey)\n}\n\nexport const getTypedData = (message: Message, chainId: ChainId) => {\n  let domain: Domain = {\n    name: name,\n    chainId: chainId,\n    verifyingContract: STOP_LIMIT_ORDER_ADDRESS[chainId]\n  }\n  return { types, primaryType: 'LimitOrder', domain, message }\n}\n\nexport const getTypedDataBento = (message: BentoApprovalMessage, chainId: ChainId) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return {\n    types: bentoTypes,\n    primaryType: 'SetMasterContractApproval',\n    domain,\n    message\n  }\n}\n\nexport const getTypeHash = (typedData: any) => {\n  let message = getMessage(typedData, true).toString()\n  return `0x${message}`\n}\n\nconst sign = (typedData: any, privateKey: string) => {\n  let message = getMessage(typedData, true)\n  const signingKey = new SigningKey(privateKey)\n  const { v, r, s } = signingKey.signDigest(message)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProvider = async (\n  message: Message,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedData(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.maker, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureWithProviderBentobox = async (\n  message: BentoApprovalMessage,\n  chainId: ChainId,\n  provider: Web3Provider\n): Promise<{ v: number; r: string; s: string }> => {\n  const typedData = getTypedDataBento(message, chainId)\n  const signature = await provider.send('eth_signTypedData_v4', [message.user, JSON.stringify(typedData)])\n  const { v, r, s } = splitSignature(signature)\n  return { v, r, s }\n}\n\nexport const getSignatureBento = async (bentoApproval: BentoApprovalMessage, chainId: ChainId, privateKey: string) => {\n  let domain: Domain = {\n    name: 'BentoBox V1',\n    chainId: chainId,\n    verifyingContract: BENTOBOX_ADDRESS[chainId]\n  }\n  return sign(\n    {\n      types: bentoTypes,\n      primaryType: 'SetMasterContractApproval',\n      domain,\n      message: bentoApproval\n    },\n    privateKey\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport {\n  Pool,\n  PoolType,\n  RHybridPool,\n  RWeightedPool,\n  RConcentratedLiquidityPool,\n  CL_MIN_TICK,\n  CL_MAX_TICK\n} from '../types/MultiRouterTypes'\n\nconst A_PRECISION = 100\n\nconst DCacheBN = new Map<Pool, BigNumber>()\nexport function HybridComputeLiquidity(pool: RHybridPool): BigNumber {\n  const res = DCacheBN.get(pool)\n  if (res !== undefined) return res\n\n  const r0 = pool.reserve0\n  const r1 = pool.reserve1\n\n  if (r0.isZero() && r1.isZero()) {\n    DCacheBN.set(pool, BigNumber.from(0))\n    return BigNumber.from(0)\n  }\n  const s = r0.add(r1)\n\n  const nA = BigNumber.from(pool.A * 2)\n\n  let prevD\n\n  let D = s\n  for (let i = 0; i < 256; i++) {\n    const dP = D.mul(D)\n      .div(r0)\n      .mul(D)\n      .div(r1)\n      .div(4)\n    prevD = D\n    D = nA\n      .mul(s)\n      .div(A_PRECISION)\n      .add(dP.mul(2))\n      .mul(D)\n      .div(\n        nA\n          .div(A_PRECISION)\n          .sub(1)\n          .mul(D)\n          .add(dP.mul(3))\n      )\n    if (\n      D.sub(prevD)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  DCacheBN.set(pool, D)\n  return D\n}\n\nexport function HybridgetY(pool: RHybridPool, x: BigNumber): BigNumber {\n  const D = HybridComputeLiquidity(pool)\n\n  const nA = pool.A * 2\n\n  let c = D.mul(D)\n    .div(x.mul(2))\n    .mul(D)\n    .div((nA * 2) / A_PRECISION)\n  let b = D.mul(A_PRECISION)\n    .div(nA)\n    .add(x)\n\n  let yPrev\n  let y = D\n  for (let i = 0; i < 256; i++) {\n    yPrev = y\n\n    y = y\n      .mul(y)\n      .add(c)\n      .div(\n        y\n          .mul(2)\n          .add(b)\n          .sub(D)\n      )\n    if (\n      y\n        .sub(yPrev)\n        .abs()\n        .lte(1)\n    ) {\n      break\n    }\n  }\n  return y\n}\n\nexport function calcOutByIn(pool: Pool, amountIn: number, direction = true): number {\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      return (y * amountIn) / (x / (1 - pool.fee) + amountIn)\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      const actualIn = amountIn * (1 - pool.fee)\n      const out = y * (1 - Math.pow(x / (x + actualIn), weightRatio))\n      return out\n    }\n    case PoolType.Hybrid: {\n      // const xNew = x + amountIn*(1-pool.fee);\n      // const yNew = HybridgetY(pool, xNew);\n      // const dy = y - yNew;\n\n      const xNewBN = xBN.add(getBigNumber(undefined, amountIn * (1 - pool.fee)))\n      const yNewBN = HybridgetY(pool as RHybridPool, xNewBN)\n      const dy = parseInt(yBN.sub(yNewBN).toString())\n\n      return dy\n    }\n    case PoolType.ConcentratedLiquidity: {\n      return ConcentratedLiquidityOutByIn(pool as RConcentratedLiquidityPool, amountIn, direction)\n    }\n  }\n}\n\nexport class OutOfLiquidity extends Error {}\n\nfunction ConcentratedLiquidityOutByIn(pool: RConcentratedLiquidityPool, inAmount: number, direction: boolean) {\n  if (pool.ticks.length === 0) return 0\n  if (pool.ticks[0].index > CL_MIN_TICK) pool.ticks.unshift({ index: CL_MIN_TICK, DLiquidity: 0 })\n  if (pool.ticks[pool.ticks.length - 1].index < CL_MAX_TICK) pool.ticks.push({ index: CL_MAX_TICK, DLiquidity: 0 })\n\n  let nextTickToCross = direction ? pool.nearestTick : pool.nearestTick + 1\n  let currentPrice = pool.sqrtPrice\n  let currentLiquidity = pool.liquidity\n  let outAmount = 0\n  let input = inAmount\n\n  while (input > 0) {\n    if (nextTickToCross < 0 || nextTickToCross >= pool.ticks.length) throw new OutOfLiquidity()\n\n    const nextTickPrice = Math.sqrt(Math.pow(1.0001, pool.ticks[nextTickToCross].index))\n    // console.log('L, P, tick, nextP', currentLiquidity,\n    //     currentPrice, pool.ticks[nextTickToCross].index, nextTickPrice);\n    let output = 0\n\n    if (direction) {\n      const maxDx = (currentLiquidity * (currentPrice - nextTickPrice)) / currentPrice / nextTickPrice\n      //console.log('input, maxDx', input, maxDx);\n\n      if (input <= maxDx) {\n        output = (currentLiquidity * currentPrice * input) / (input + currentLiquidity / currentPrice)\n        input = 0\n      } else {\n        output = currentLiquidity * (currentPrice - nextTickPrice)\n        currentPrice = nextTickPrice\n        input -= maxDx\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross--\n      }\n    } else {\n      const maxDy = currentLiquidity * (nextTickPrice - currentPrice)\n      //console.log('input, maxDy', input, maxDy);\n      if (input <= maxDy) {\n        output = input / currentPrice / (currentPrice + input / currentLiquidity)\n        input = 0\n      } else {\n        output = (currentLiquidity * (nextTickPrice - currentPrice)) / currentPrice / nextTickPrice\n        currentPrice = nextTickPrice\n        input -= maxDy\n        if (pool.ticks[nextTickToCross].index % 2 === 0) {\n          currentLiquidity += pool.ticks[nextTickToCross].DLiquidity\n        } else {\n          currentLiquidity -= pool.ticks[nextTickToCross].DLiquidity\n        }\n        nextTickToCross++\n      }\n    }\n\n    outAmount += output * (1 - pool.fee)\n    //console.log('out', outAmount);\n  }\n\n  return outAmount\n}\n\nexport function calcInByOut(pool: Pool, amountOut: number, direction: boolean): number {\n  let input = 0\n  const xBN = direction ? pool.reserve0 : pool.reserve1\n  const yBN = direction ? pool.reserve1 : pool.reserve0\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      input = (x * amountOut) / (1 - pool.fee) / (y - amountOut)\n      break\n    }\n    case PoolType.Weighted: {\n      const x = parseInt(xBN.toString())\n      const y = parseInt(yBN.toString())\n      const wPool = pool as RWeightedPool\n      const weightRatio = direction ? wPool.weight0 / wPool.weight1 : wPool.weight1 / wPool.weight0\n      input = x * (1 - pool.fee) * (Math.pow(1 - amountOut / y, -weightRatio) - 1)\n      break\n    }\n    case PoolType.Hybrid: {\n      let yNewBN = yBN.sub(getBigNumber(undefined, amountOut))\n      if (yNewBN.lt(1))\n        // lack of precision\n        yNewBN = BigNumber.from(1)\n\n      const xNewBN = HybridgetY(pool as RHybridPool, yNewBN)\n      input = Math.round(parseInt(xNewBN.sub(xBN).toString()) / (1 - pool.fee))\n\n      // const yNew = y - amountOut;\n      // const xNew = HybridgetY(pool, yNew);\n      // input = (xNew - x)/(1-pool.fee);\n      break\n    }\n    default:\n      console.error('Unknown pool type')\n  }\n\n  // ASSERT(() => {\n  //   const amount2 = calcOutByIn(pool, input, direction);\n  //   const res = closeValues(amountOut, amount2, 1e-6);\n  //   if (!res) console.log(\"Error 138:\", amountOut, amount2, Math.abs(amountOut/amount2 - 1));\n  //   return res;\n  // });\n  if (input < 1) input = 1\n  return input\n}\n\nexport function calcPrice(pool: Pool, amountIn: number, takeFeeIntoAccount = true): number {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const oneMinusFee = takeFeeIntoAccount ? 1 - pool.fee : 1\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const x = r0 / oneMinusFee\n      return (r1 * x) / (x + amountIn) / (x + amountIn)\n    }\n    case PoolType.Weighted: {\n      const wPool = pool as RWeightedPool\n      const weightRatio = wPool.weight0 / wPool.weight1\n      const x = r0 + amountIn * oneMinusFee\n      return (r1 * weightRatio * oneMinusFee * Math.pow(r0 / x, weightRatio)) / x\n    }\n    case PoolType.Hybrid: {\n      const hPool = pool as RHybridPool\n      const D = parseInt(HybridComputeLiquidity(hPool).toString())\n      const A = hPool.A / A_PRECISION\n      const x = r0 + amountIn\n      const b = 4 * A * x + D - 4 * A * D\n      const ac4 = (D * D * D) / x\n      const Ds = Math.sqrt(b * b + 4 * A * ac4)\n      const res = (0.5 - (2 * b - ac4 / x) / Ds / 4) * oneMinusFee\n      return res\n    }\n  }\n  return 0\n}\n\nfunction calcInputByPriceConstantMean(pool: RWeightedPool, price: number) {\n  const r0 = parseInt(pool.reserve0.toString())\n  const r1 = parseInt(pool.reserve1.toString())\n  const weightRatio = pool.weight0 / pool.weight1\n  const t = r1 * price * weightRatio * (1 - pool.fee) * Math.pow(r0, weightRatio)\n  return (Math.pow(t, 1 / (weightRatio + 1)) - r0) / (1 - pool.fee)\n}\n\nexport function calcInputByPrice(pool: Pool, priceEffective: number, hint = 1): number {\n  switch (pool.type) {\n    case PoolType.ConstantProduct: {\n      const r0 = parseInt(pool.reserve0.toString())\n      const r1 = parseInt(pool.reserve1.toString())\n      const x = r0 / (1 - pool.fee)\n      const res = Math.sqrt(r1 * x * priceEffective) - x\n      return res\n    }\n    case PoolType.Weighted: {\n      const res = calcInputByPriceConstantMean(pool as RWeightedPool, priceEffective)\n      return res\n    }\n    case PoolType.Hybrid: {\n      return revertPositive((x: number) => 1 / calcPrice(pool, x), priceEffective, hint)\n    }\n  }\n  return 0\n}\n\n//================================= Utils ====================================\n\nexport function ASSERT(f: () => boolean, t?: string) {\n  if (!f() && t) console.error(t)\n}\n\nexport function closeValues(a: number, b: number, accuracy: number): boolean {\n  if (accuracy === 0) return a === b\n  if (a < 1 / accuracy) return Math.abs(a - b) <= 10\n  return Math.abs(a / b - 1) < accuracy\n}\n\nexport function calcSquareEquation(a: number, b: number, c: number): [number, number] {\n  const D = b * b - 4 * a * c\n  console.assert(D >= 0, `Discriminant is negative! ${a} ${b} ${c}`)\n  const sqrtD = Math.sqrt(D)\n  return [(-b - sqrtD) / 2 / a, (-b + sqrtD) / 2 / a]\n}\n\n// returns such x > 0 that f(x) = out or 0 if there is no such x or f defined not everywhere\n// hint - approximation of x to spead up the algorithm\n// f assumed to be continues monotone growth function defined everywhere\nexport function revertPositive(f: (x: number) => number, out: number, hint = 1) {\n  try {\n    if (out <= f(0)) return 0\n    let min, max\n    if (f(hint) > out) {\n      min = hint / 2\n      while (f(min) > out) min /= 2\n      max = min * 2\n    } else {\n      max = hint * 2\n      while (f(max) < out) max *= 2\n      min = max / 2\n    }\n\n    while (max / min - 1 > 1e-4) {\n      const x0: number = (min + max) / 2\n      const y0 = f(x0)\n      if (out === y0) return x0\n      if (out < y0) max = x0\n      else min = x0\n    }\n    return (min + max) / 2\n  } catch (e) {\n    return 0\n  }\n}\n\nexport function getBigNumber(valueBN: BigNumber | undefined, value: number): BigNumber {\n  if (valueBN !== undefined) return valueBN\n\n  if (value < Number.MAX_SAFE_INTEGER) return BigNumber.from(Math.round(value))\n\n  const exp = Math.floor(Math.log(value) / Math.LN2)\n  console.assert(exp >= 51, 'Internal Error 314')\n  const shift = exp - 51\n  const mant = Math.round(value / Math.pow(2, shift))\n  const res = BigNumber.from(mant).mul(BigNumber.from(2).pow(shift))\n  return res\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Pool, RToken, RouteLeg, MultiRoute, RouteStatus } from '../types/MultiRouterTypes'\nimport { ASSERT, calcInByOut, calcOutByIn, closeValues, calcPrice } from '../utils/MultiRouterMath'\n\nexport class Edge {\n  readonly GasConsumption = 40_000\n  readonly MINIMUM_LIQUIDITY = 1000\n  pool: Pool\n  vert0: Vertice\n  vert1: Vertice\n\n  canBeUsed: boolean\n  direction: boolean\n  amountInPrevious: number // How many liquidity were passed from vert0 to vert1\n  amountOutPrevious: number // How many liquidity were passed from vert0 to vert1\n  bestEdgeIncome: number // debug data\n\n  constructor(p: Pool, v0: Vertice, v1: Vertice) {\n    this.pool = p\n    this.vert0 = v0\n    this.vert1 = v1\n    this.amountInPrevious = 0\n    this.amountOutPrevious = 0\n    this.canBeUsed = true\n    this.direction = true\n    this.bestEdgeIncome = 0\n  }\n\n  reserve(v: Vertice): BigNumber {\n    return v === this.vert0 ? this.pool.reserve0 : this.pool.reserve1\n  }\n\n  calcOutput(v: Vertice, amountIn: number) {\n    const pool = this.pool\n    let out,\n      gas = this.amountInPrevious ? 0 : this.GasConsumption\n    if (v === this.vert1) {\n      if (this.direction) {\n        if (amountIn < this.amountOutPrevious) {\n          out = this.amountInPrevious - calcInByOut(pool, this.amountOutPrevious - amountIn, true)\n        } else {\n          out = calcOutByIn(pool, amountIn - this.amountOutPrevious, false) + this.amountInPrevious\n        }\n        if (amountIn === this.amountOutPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption\n        }\n      } else {\n        out = calcOutByIn(pool, this.amountOutPrevious + amountIn, false) - this.amountInPrevious\n      }\n    } else {\n      if (this.direction) {\n        out = calcOutByIn(pool, this.amountInPrevious + amountIn, true) - this.amountOutPrevious\n      } else {\n        if (amountIn === this.amountInPrevious) {\n          // TODO: accuracy?\n          gas = -this.GasConsumption\n        }\n        if (amountIn < this.amountInPrevious) {\n          out = this.amountOutPrevious - calcInByOut(pool, this.amountInPrevious - amountIn, false)\n        } else {\n          out = calcOutByIn(pool, amountIn - this.amountInPrevious, true) + this.amountOutPrevious\n        }\n      }\n    }\n\n    // this.testApply(v, amountIn, out);\n\n    return [out, gas]\n  }\n\n  checkMinimalLiquidityExceededAfterSwap(from: Vertice, amountOut: number): boolean {\n    if (from === this.vert0) {\n      const r1 = parseInt(this.pool.reserve1.toString())\n      if (this.direction) {\n        return r1 - amountOut - this.amountOutPrevious < this.MINIMUM_LIQUIDITY\n      } else {\n        return r1 - amountOut + this.amountOutPrevious < this.MINIMUM_LIQUIDITY\n      }\n    } else {\n      const r0 = parseInt(this.pool.reserve0.toString())\n      if (this.direction) {\n        return r0 - amountOut + this.amountInPrevious < this.MINIMUM_LIQUIDITY\n      } else {\n        return r0 - amountOut - this.amountInPrevious < this.MINIMUM_LIQUIDITY\n      }\n    }\n  }\n\n  // doesn't used in production - just for testing\n  testApply(from: Vertice, amountIn: number, amountOut: number) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    let directionNew,\n      amountInNew = 0,\n      amountOutNew = 0\n    if (to) {\n      const inInc = from === this.vert0 ? amountIn : -amountOut\n      const outInc = from === this.vert0 ? amountOut : -amountIn\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      if (inNew * outNew < 0) console.log('333')\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        directionNew = true\n        amountInNew = inNew\n        amountOutNew = outNew\n      } else {\n        directionNew = false\n        amountInNew = -inNew\n        amountOutNew = -outNew\n      }\n    } else console.error('Error 221')\n\n    if (directionNew) {\n      const calc = calcOutByIn(this.pool, amountInNew, directionNew)\n      const res = closeValues(amountOutNew, calc, 1e-6)\n      if (!res) console.log('Err 225-1 !!', amountOutNew, calc, Math.abs(calc / amountOutNew - 1))\n      return res\n    } else {\n      const calc = calcOutByIn(this.pool, amountOutNew, directionNew)\n      const res = closeValues(amountInNew, calc, 1e-6)\n      if (!res) console.log('Err 225-2!!', amountInNew, calc, Math.abs(calc / amountInNew - 1))\n      return res\n    }\n  }\n\n  applySwap(from: Vertice) {\n    console.assert(this.amountInPrevious * this.amountOutPrevious >= 0)\n    const inPrev = this.direction ? this.amountInPrevious : -this.amountInPrevious\n    const outPrev = this.direction ? this.amountOutPrevious : -this.amountOutPrevious\n    const to = from.getNeibour(this)\n    if (to) {\n      const inInc = from === this.vert0 ? from.bestIncome : -to.bestIncome\n      const outInc = from === this.vert0 ? to.bestIncome : -from.bestIncome\n      const inNew = inPrev + inInc\n      const outNew = outPrev + outInc\n      console.assert(inNew * outNew >= 0)\n      if (inNew >= 0) {\n        this.direction = true\n        this.amountInPrevious = inNew\n        this.amountOutPrevious = outNew\n      } else {\n        this.direction = false\n        this.amountInPrevious = -inNew\n        this.amountOutPrevious = -outNew\n      }\n    } else console.error('Error 221')\n\n    ASSERT(() => {\n      if (this.direction)\n        return closeValues(this.amountOutPrevious, calcOutByIn(this.pool, this.amountInPrevious, this.direction), 1e-6)\n      else {\n        return closeValues(this.amountInPrevious, calcOutByIn(this.pool, this.amountOutPrevious, this.direction), 1e-6)\n      }\n    }, `Error 225`)\n  }\n}\n\nexport class Vertice {\n  token: RToken\n  edges: Edge[]\n\n  price: number\n  gasPrice: number\n\n  bestIncome: number // temp data used for findBestPath algorithm\n  gasSpent: number // temp data used for findBestPath algorithm\n  bestTotal: number // temp data used for findBestPath algorithm\n  bestSource?: Edge // temp data used for findBestPath algorithm\n  checkLine: number // debug data\n\n  constructor(t: RToken) {\n    this.token = t\n    this.edges = []\n    this.price = 0\n    this.gasPrice = 0\n    this.bestIncome = 0\n    this.gasSpent = 0\n    this.bestTotal = 0\n    this.bestSource = undefined\n    this.checkLine = -1\n  }\n\n  getNeibour(e?: Edge) {\n    if (!e) return\n    return e.vert0 === this ? e.vert1 : e.vert0\n  }\n}\n\nexport class Graph {\n  vertices: Vertice[]\n  edges: Edge[]\n  tokens: Map<RToken, Vertice>\n\n  constructor(pools: Pool[], baseToken: RToken, gasPrice: number) {\n    this.vertices = []\n    this.edges = []\n    this.tokens = new Map()\n    pools.forEach(p => {\n      const v0 = this.getOrCreateVertice(p.token0)\n      const v1 = this.getOrCreateVertice(p.token1)\n      const edge = new Edge(p, v0, v1)\n      v0.edges.push(edge)\n      v1.edges.push(edge)\n      this.edges.push(edge)\n    })\n    const baseVert = this.tokens.get(baseToken)\n    if (baseVert) {\n      this.setPrices(baseVert, 1, gasPrice)\n    }\n  }\n\n  setPrices(from: Vertice, price: number, gasPrice: number) {\n    if (from.price !== 0) return\n    from.price = price\n    from.gasPrice = gasPrice\n    const edges = from.edges\n      .map((e): [Edge, number] => [e, parseInt(e.reserve(from).toString())])\n      .sort(([_1, r1], [_2, r2]) => r2 - r1)\n    edges.forEach(([e, _]) => {\n      const v = e.vert0 === from ? e.vert1 : e.vert0\n      if (v.price !== 0) return\n      let p = calcPrice(e.pool, 0, false)\n      if (from === e.vert0) p = 1 / p\n      this.setPrices(v, price * p, gasPrice / p)\n    })\n  }\n\n  getOrCreateVertice(token: RToken) {\n    let vert = this.tokens.get(token)\n    if (vert) return vert\n    vert = new Vertice(token)\n    this.vertices.push(vert)\n    this.tokens.set(token, vert)\n    return vert\n  }\n\n  exportPath(from: RToken, to: RToken) {\n    //}, _route: MultiRoute) {\n    // const allPools = new Map<string, Pool>();\n    // this.edges.forEach(p => allPools.set(p.address, p));\n    // const usedPools = new Map<string, boolean>();\n    // route.legs.forEach(l => usedPools.set(l.address, l.token === allPools.get(l.address)?.token0))\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    // const initValue = (fromVert.bestIncome * fromVert.price) / toVert.price\n\n    const route = new Set<Edge>()\n    for (let v = toVert; v !== fromVert; v = v.getNeibour(v.bestSource) as Vertice) {\n      if (v.bestSource) route.add(v.bestSource)\n    }\n\n    // function edgeStyle(e: Edge) {\n    //   const finish = e.vert1.bestSource === e\n    //   const start = e.vert0.bestSource === e\n    //   let label\n    //   if (e.bestEdgeIncome === -1) label = 'label: \"low_liq\"'\n    //   if (e.bestEdgeIncome !== 0) label = `label: \"${print((e.bestEdgeIncome / initValue - 1) * 100, 3)}%\"`\n    //   const edgeValue = route.has(e) ? 'value: 2' : undefined\n    //   let arrow\n    //   if (finish && start) arrow = 'arrows: \"from,to\"'\n    //   if (finish) arrow = 'arrows: \"to\"'\n    //   if (start) arrow = 'arrows: \"from\"'\n    //   return ['', label, edgeValue, arrow].filter(a => a !== undefined).join(', ')\n    // }\n\n    // function print(n: number, digits: number) {\n    //   let out\n    //   if (n === 0) out = '0'\n    //   else {\n    //     const n0 = n > 0 ? n : -n\n    //     const shift = digits - Math.ceil(Math.log(n0) / Math.LN10)\n    //     if (shift <= 0) out = `${Math.round(n0)}`\n    //     else {\n    //       const mult = Math.pow(10, shift)\n    //       out = `${Math.round(n0 * mult) / mult}`\n    //     }\n    //     if (n < 0) out = -out\n    //   }\n    //   return out\n    // }\n\n    // function nodeLabel(v: Vertice) {\n    //   const value = (v.bestIncome * v.price) / toVert.price\n    //   const income = `${print(value, 3)}`\n    //   const total = `${print(v.bestTotal, 3)}`\n    //   // const income = `${print((value/initValue-1)*100, 3)}%`\n    //   // const total = `${print((v.bestTotal/initValue-1)*100, 3)}%`\n    //   const checkLine = v.checkLine === -1 ? undefined : `${v.checkLine}`\n    //   return [checkLine, income, total].filter(a => a !== undefined).join(':')\n    // }\n\n    // const nodes = `var nodes = new vis.DataSet([\n    //   ${this.vertices.map(t => `{ id: ${t.token.name}, label: \"${nodeLabel(t)}\"}`).join(',\\n\\t\\t')}\n    // ]);\\n`\n    // const edges = `var edges = new vis.DataSet([\n    //   ${this.edges.map(p => `{ from: ${p.vert0.token.name}, to: ${p.vert1.token.name}${edgeStyle(p)}}`).join(',\\n\\t\\t')}\n    // ]);\\n`\n    // const data = `var data = {\n    //     nodes: nodes,\n    //     edges: edges,\n    // };\\n`\n\n    // const fs = require('fs')\n    // fs.writeFileSync('D:/Info/Notes/GraphVisualization/data.js', nodes + edges + data)\n  }\n\n  findBestPath(\n    from: RToken,\n    to: RToken,\n    amountIn: number\n  ):\n    | {\n        path: Edge[]\n        output: number\n        gasSpent: number\n        totalOutput: number\n      }\n    | undefined {\n    const start = this.tokens.get(from)\n    const finish = this.tokens.get(to)\n    if (!start || !finish) return\n\n    this.edges.forEach(e => (e.bestEdgeIncome = 0))\n    this.vertices.forEach(v => {\n      v.bestIncome = 0\n      v.gasSpent = 0\n      v.bestTotal = 0\n      v.bestSource = undefined\n      v.checkLine = -1\n    })\n    start.bestIncome = amountIn\n    start.bestTotal = amountIn\n    const processedVert = new Set<Vertice>()\n    const nextVertList = [start] // TODO: Use sorted Set!\n\n    let checkLine = 0\n    for (;;) {\n      let closestVert: Vertice | undefined\n      let closestTotal = -1\n      let closestPosition = 0\n      nextVertList.forEach((v, i) => {\n        if (v.bestTotal > closestTotal) {\n          closestTotal = v.bestTotal\n          closestVert = v\n          closestPosition = i\n        }\n      })\n\n      if (!closestVert) return\n\n      closestVert.checkLine = checkLine++\n\n      if (closestVert === finish) {\n        const bestPath = []\n        for (let v: Vertice | undefined = finish; v?.bestSource; v = v.getNeibour(v.bestSource)) {\n          bestPath.unshift(v.bestSource)\n        }\n        return {\n          path: bestPath,\n          output: finish.bestIncome,\n          gasSpent: finish.gasSpent,\n          totalOutput: finish.bestTotal\n        }\n      }\n      nextVertList.splice(closestPosition, 1)\n\n      closestVert.edges.forEach(e => {\n        const v2 = closestVert === e.vert0 ? e.vert1 : e.vert0\n        if (processedVert.has(v2)) return\n        let newIncome, gas\n        try {\n          ;[newIncome, gas] = e.calcOutput(closestVert as Vertice, (closestVert as Vertice).bestIncome)\n        } catch (e) {\n          // Any arithmetic error or out-of-liquidity\n          return\n        }\n        if (e.checkMinimalLiquidityExceededAfterSwap(closestVert as Vertice, newIncome)) {\n          e.bestEdgeIncome = -1\n          return\n        }\n        const newGasSpent = (closestVert as Vertice).gasSpent + gas\n        const price = v2.price / finish.price\n        const newTotal = newIncome * price - newGasSpent * finish.gasPrice\n\n        console.assert(e.bestEdgeIncome === 0, 'Error 373')\n        e.bestEdgeIncome = newIncome * price\n\n        if (!v2.bestSource) nextVertList.push(v2)\n        if (!v2.bestSource || newTotal > v2.bestTotal) {\n          v2.bestIncome = newIncome\n          v2.gasSpent = newGasSpent\n          v2.bestTotal = newTotal\n          v2.bestSource = e\n        }\n      })\n      processedVert.add(closestVert)\n    }\n  }\n\n  addPath(from: Vertice | undefined, to: Vertice | undefined, path: Edge[]) {\n    let _from = from\n    path.forEach(e => {\n      if (_from) {\n        e.applySwap(_from)\n        _from = _from.getNeibour(e)\n      } else {\n        console.error('Unexpected 315')\n      }\n    })\n\n    ASSERT(() => {\n      const res = this.vertices.every(v => {\n        let total = 0\n        let totalModule = 0\n        v.edges.forEach(e => {\n          if (e.vert0 === v) {\n            if (e.direction) {\n              total -= e.amountInPrevious\n            } else {\n              total += e.amountInPrevious\n            }\n            totalModule += e.amountInPrevious\n          } else {\n            if (e.direction) {\n              total += e.amountOutPrevious\n            } else {\n              total -= e.amountOutPrevious\n            }\n            totalModule += e.amountOutPrevious\n          }\n        })\n        if (v === from) return total <= 0\n        if (v === to) return total >= 0\n        if (totalModule === 0) return total === 0\n        return Math.abs(total / totalModule) < 1e10\n      })\n      return res\n    }, 'Error 290')\n  }\n\n  findBestRoute(from: RToken, to: RToken, amountIn: number, mode: number | number[]): MultiRoute {\n    let routeValues = []\n    if (Array.isArray(mode)) {\n      const sum = mode.reduce((a, b) => a + b, 0)\n      routeValues = mode.map(e => e / sum)\n    } else {\n      for (let i = 0; i < mode; ++i) routeValues.push(1 / mode)\n    }\n\n    this.edges.forEach(e => {\n      e.amountInPrevious = 0\n      e.amountOutPrevious = 0\n      e.direction = true\n    })\n    let output = 0\n    let gasSpentInit = 0\n    //let totalOutput = 0\n    let totalrouted = 0\n    let step\n    for (step = 0; step < routeValues.length; ++step) {\n      const p = this.findBestPath(from, to, amountIn * routeValues[step])\n      if (!p) {\n        break\n      } else {\n        output += p.output\n        gasSpentInit += p.gasSpent\n        //totalOutput += p.totalOutput\n        this.addPath(this.tokens.get(from), this.tokens.get(to), p.path)\n        totalrouted += routeValues[step]\n      }\n    }\n    if (step == 0)\n      return {\n        status: RouteStatus.NoWay,\n        amountIn: 0,\n        amountOut: 0,\n        legs: [],\n        gasSpent: 0,\n        totalAmountOut: 0\n      }\n    let status\n    if (step < routeValues.length) status = RouteStatus.Partial\n    else status = RouteStatus.Success\n\n    const fromVert = this.tokens.get(from) as Vertice\n    const toVert = this.tokens.get(to) as Vertice\n    const [legs, gasSpent, topologyWasChanged] = this.getRouteLegs(fromVert, toVert)\n    console.assert(gasSpent <= gasSpentInit, 'Internal Error 491')\n\n    if (topologyWasChanged) {\n      output = this.calcLegsAmountOut(legs, amountIn, to)\n    }\n\n    return {\n      status,\n      amountIn: amountIn * totalrouted,\n      amountOut: output,\n      legs,\n      gasSpent,\n      totalAmountOut: output - gasSpent * toVert.gasPrice\n    }\n  }\n\n  getRouteLegs(from: Vertice, to: Vertice): [RouteLeg[], number, boolean] {\n    const [nodes, topologyWasChanged] = this.cleanTopology(from, to)\n    const legs: RouteLeg[] = []\n    let gasSpent = 0\n    nodes.forEach(n => {\n      const outEdges = this.getOutputEdges(n).map(e => {\n        const from = this.edgeFrom(e)\n        return from ? [e, from[0], from[1]] : [e]\n      })\n\n      let outAmount = outEdges.reduce((a, b) => a + (b[2] as number), 0)\n      if (outAmount <= 0) return\n\n      const total = outAmount\n      outEdges.forEach((e, i) => {\n        const p = e[2] as number\n        const quantity = i + 1 === outEdges.length ? 1 : p / outAmount\n        legs.push({\n          address: (e[0] as Edge).pool.address,\n          token: n.token,\n          swapPortion: quantity,\n          absolutePortion: p / total\n        })\n        gasSpent += (e[0] as Edge).pool.swapGasCost\n        outAmount -= p\n      })\n      console.assert(outAmount / total < 1e-12, 'Error 281')\n    })\n    return [legs, gasSpent, topologyWasChanged]\n  }\n\n  edgeFrom(e: Edge): [Vertice, number] | undefined {\n    if (e.amountInPrevious === 0) return undefined\n    return e.direction ? [e.vert0, e.amountInPrevious] : [e.vert1, e.amountOutPrevious]\n  }\n\n  getOutputEdges(v: Vertice): Edge[] {\n    return v.edges.filter(e => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction !== (e.vert0 === v)) return false\n      return true\n    })\n  }\n\n  getInputEdges(v: Vertice): Edge[] {\n    return v.edges.filter(e => {\n      if (!e.canBeUsed) return false\n      if (e.amountInPrevious === 0) return false\n      if (e.direction === (e.vert0 === v)) return false\n      return true\n    })\n  }\n\n  calcLegsAmountOut(legs: RouteLeg[], amountIn: number, to: RToken) {\n    const amounts = new Map<RToken, number>()\n    amounts.set(legs[0].token, amountIn)\n    legs.forEach(l => {\n      const vert = this.tokens.get(l.token)\n      console.assert(vert !== undefined, 'Internal Error 570')\n      const edge = (vert as Vertice).edges.find(e => e.pool.address === l.address)\n      console.assert(edge !== undefined, 'Internel Error 569')\n      const pool = (edge as Edge).pool\n      const direction = vert === (edge as Edge).vert0\n\n      const inputTotal = amounts.get(l.token)\n      console.assert(inputTotal !== undefined, 'Internal Error 564')\n      const input = (inputTotal as number) * l.swapPortion\n      amounts.set(l.token, (inputTotal as number) - input)\n      const output = calcOutByIn(pool, input, direction)\n\n      const vertNext = (vert as Vertice).getNeibour(edge) as Vertice\n      const prevAmount = amounts.get(vertNext.token)\n      amounts.set(vertNext.token, (prevAmount || 0) + output)\n    })\n    return amounts.get(to) || 0\n  }\n\n  // removes all cycles if there are any, then removes all dead end could appear after cycle removing\n  // Returns clean result topologically sorted\n  cleanTopology(from: Vertice, to: Vertice): [Vertice[], boolean] {\n    let topologyWasChanged = false\n    let result = this.topologySort(from, to)\n    if (result[0] !== 2) {\n      topologyWasChanged = true\n      console.assert(result[0] === 0, 'Internal Error 554')\n      while (result[0] === 0) {\n        this.removeWeakestEdge(result[1])\n        result = this.topologySort(from, to)\n      }\n      if (result[0] === 3) {\n        this.removeDeadEnds(result[1])\n        result = this.topologySort(from, to)\n      }\n      console.assert(result[0] === 2, 'Internal Error 563')\n      if (result[0] !== 2) return [[], topologyWasChanged]\n    }\n    return [result[1], topologyWasChanged]\n  }\n\n  removeDeadEnds(verts: Vertice[]) {\n    verts.forEach(v => {\n      this.getInputEdges(v).forEach(e => {\n        e.canBeUsed = false\n      })\n    })\n  }\n\n  removeWeakestEdge(verts: Vertice[]) {\n    let minVert: Vertice, minVertNext: Vertice\n    let minOutput = Number.MAX_VALUE\n    verts.forEach((v1, i) => {\n      const v2 = i === 0 ? verts[verts.length - 1] : verts[i - 1]\n      let out = 0\n      this.getOutputEdges(v1).forEach(e => {\n        if (v1.getNeibour(e) !== v2) return\n        out += e.direction ? e.amountOutPrevious : e.amountInPrevious\n      })\n      if (out < minOutput) {\n        minVert = v1\n        minVertNext = v2\n        minOutput = out\n      }\n    })\n    // @ts-ignore\n    this.getOutputEdges(minVert).forEach(e => {\n      if (minVert.getNeibour(e) !== minVertNext) return\n      e.canBeUsed = false\n    })\n  }\n\n  // topological sort\n  // if there is a cycle - returns [0, <List of envolved vertices in the cycle>]\n  // if there are no cycles but deadends- returns [3, <List of all envolved deadend vertices>]\n  // if there are no cycles or deadends- returns [2, <List of all envolved vertices topologically sorted>]\n  topologySort(from: Vertice, to: Vertice): [number, Vertice[]] {\n    // undefined or 0 - not processed, 1 - in process, 2 - finished, 3 - dedend\n    const vertState = new Map<Vertice, number>()\n    const vertsFinished: Vertice[] = []\n    const foundCycle: Vertice[] = []\n    const foundDeadEndVerts: Vertice[] = []\n\n    const that = this\n    // 0 - cycle was found and created, return\n    // 1 - during cycle creating\n    // 2 - vertex is processed ok\n    // 3 - dead end vertex\n    function topSortRecursive(current: Vertice): number {\n      const state = vertState.get(current)\n      if (state === 2 || state === 3) return state\n      if (state === 1) {\n        console.assert(foundCycle.length == 0, 'Internal Error 566')\n        foundCycle.push(current)\n        return 1\n      }\n      vertState.set(current, 1)\n\n      let successors2Exist = false\n      const outEdges = that.getOutputEdges(current)\n      for (let i = 0; i < outEdges.length; ++i) {\n        const e = outEdges[i]\n        const res = topSortRecursive(current.getNeibour(e) as Vertice)\n        if (res === 0) return 0\n        if (res === 1) {\n          if (foundCycle[0] === current) return 0\n          else {\n            foundCycle.push(current)\n            return 1\n          }\n        }\n        if (res === 2) successors2Exist = true // Ok successors\n      }\n      if (successors2Exist) {\n        console.assert(current !== to, 'Internal Error 589')\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      } else {\n        if (current !== to) {\n          foundDeadEndVerts.push(current)\n          vertState.set(current, 3)\n          return 3\n        }\n        vertsFinished.push(current)\n        vertState.set(current, 2)\n        return 2\n      }\n    }\n\n    const res = topSortRecursive(from)\n    if (res === 0) return [0, foundCycle]\n    if (foundDeadEndVerts.length) return [3, foundDeadEndVerts]\n    ASSERT(() => {\n      if (vertsFinished[0] !== to) return false\n      if (vertsFinished[vertsFinished.length - 1] !== from) return false\n      return true\n    }, 'Internal Error 614')\n    if (res === 2) return [2, vertsFinished.reverse()]\n    console.assert(true, 'Internal Error 612')\n    return [1, []]\n  }\n}\n\nexport function findMultiRouting(\n  from: RToken,\n  to: RToken,\n  amountIn: number,\n  pools: Pool[],\n  baseToken: RToken,\n  gasPrice: number,\n  steps: number | number[] = 12\n): MultiRoute {\n  const g = new Graph(pools, baseToken, gasPrice)\n  const fromV = g.tokens.get(from)\n  if (fromV?.price === 0) {\n    g.setPrices(fromV, 1, 0)\n  }\n  const out = g.findBestRoute(from, to, amountIn, steps)\n  return out\n}\n","import { SOLIDITY_TYPE_MAXIMA, SolidityType, ZERO } from '../constants'\n\nimport JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n","import { Currency } from './entities/Currency'\nimport { CurrencyAmount } from './entities/CurrencyAmount'\nimport { Percent } from './entities/Percent'\nimport { Token } from './entities/Token'\nimport { Trade } from './entities/Trade'\nimport { TradeType } from './enums/TradeType'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { CurrencyAmount, Price, Token } from './entities'\nimport { LAMBDA_URL, STOP_LIMIT_ORDER_ADDRESS } from './constants'\nimport { Message, getSignature, getSignatureWithProvider, getTypeHash, getTypedData } from './entities'\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId } from './enums'\nimport { Contract } from '@ethersproject/contracts'\nimport { NonceManager } from '@ethersproject/experimental'\nimport { Signer } from '@ethersproject/abstract-signer'\nimport { Transaction } from '@ethersproject/transactions'\nimport { Web3Provider } from '@ethersproject/providers'\nimport abi from './abis/StopLimitOrder.json'\nimport { defaultAbiCoder } from '@ethersproject/abi'\nimport fetch from 'isomorphic-unfetch'\nimport { keccak256 } from '@ethersproject/solidity'\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\n\nexport interface ILimitOrderData {\n  maker: string\n  tokenIn: string\n  tokenOut: string\n  tokenInDecimals: number\n  tokenOutDecimals: number\n  tokenInSymbol: string\n  tokenOutSymbol: string\n  amountIn: string\n  amountOut: string\n  recipient: string\n  startTime: string | number\n  endTime: string | number\n  stopPrice?: string\n  oracleAddress?: string\n  oracleData?: string\n  v: number\n  r: string\n  s: string\n  chainId: ChainId\n  orderTypeHash?: string\n}\n\nexport class LimitOrder {\n  public readonly maker: string\n  public readonly amountIn: CurrencyAmount<Token>\n  public readonly amountOut: CurrencyAmount<Token>\n  public readonly recipient: string\n  public readonly startTime: string\n  public readonly endTime: string\n  public readonly stopPrice: string\n  public readonly oracleAddress: string\n  public readonly oracleData: string\n  public v: number\n  public r: string\n  public s: string\n\n  static getLimitOrder(data: ILimitOrderData): LimitOrder {\n    return new LimitOrder(\n      data.maker,\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenIn, data.tokenInDecimals, data.tokenInSymbol),\n        data.amountIn\n      ),\n      CurrencyAmount.fromRawAmount(\n        new Token(data.chainId, data.tokenOut, data.tokenOutDecimals, data.tokenOutSymbol),\n        data.amountOut\n      ),\n      data.recipient,\n      data.startTime,\n      data.endTime,\n      data.stopPrice,\n      data.oracleAddress,\n      data.oracleData,\n      data.v,\n      data.r,\n      data.s\n    )\n  }\n\n  constructor(\n    maker: string,\n    amountIn: CurrencyAmount<Token>,\n    amountOut: CurrencyAmount<Token>,\n    recipient: string,\n    startTime: string | number,\n    endTime: string | number,\n    stopPrice = '0',\n    oracleAddress = '0x0000000000000000000000000000000000000000',\n    oracleData = '0x00000000000000000000000000000000000000000000000000000000000000',\n    v = 0,\n    r = '',\n    s = ''\n  ) {\n    this.maker = validateAndParseAddress(maker)\n    this.amountIn = amountIn\n    this.amountOut = amountOut\n    this.recipient = validateAndParseAddress(recipient)\n    this.startTime = startTime.toString()\n    this.endTime = endTime.toString()\n    this.stopPrice = stopPrice\n    this.oracleAddress = validateAndParseAddress(oracleAddress)\n    this.oracleData = oracleData\n    this.v = v\n    this.r = r\n    this.s = s\n  }\n\n  get amountInRaw(): string {\n    return this.amountIn.quotient.toString()\n  }\n\n  get amountOutRaw(): string {\n    return this.amountOut.quotient.toString()\n  }\n\n  get tokenInAddress(): string {\n    return this.amountIn.currency.address\n  }\n\n  get tokenOutAddress(): string {\n    return this.amountOut.currency.address\n  }\n\n  get tokenInDecimals(): number {\n    return this.amountIn.currency.decimals\n  }\n\n  get tokenOutDecimals(): number {\n    return this.amountOut.currency.decimals\n  }\n\n  get tokenInSymbol(): string {\n    return this.amountIn.currency.symbol || ''\n  }\n\n  get tokenOutSymbol(): string {\n    return this.amountOut.currency.symbol || ''\n  }\n\n  get chainId(): ChainId {\n    return this.amountIn.currency.chainId\n  }\n\n  usePrice(price: Price<Token, Token>): LimitOrder {\n    return new LimitOrder(\n      this.maker,\n      this.amountIn,\n      CurrencyAmount.fromRawAmount(this.amountOut.currency, price.quote(this.amountIn).quotient.toString()),\n      this.recipient,\n      this.startTime,\n      this.endTime,\n      this.stopPrice,\n      this.oracleAddress,\n      this.oracleData\n    )\n  }\n\n  signdOrderWithPrivatekey(chainId: ChainId, privateKey: string) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = getSignature(order, chainId, privateKey)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  async signOrderWithProvider(chainId: ChainId, provider: Web3Provider) {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    const { v, r, s } = await getSignatureWithProvider(order, chainId, provider)\n\n    this.v = v\n    this.r = r\n    this.s = s\n\n    return { v, r, s }\n  }\n\n  getTypedData() {\n    let order: Message = {\n      maker: this.maker,\n      tokenIn: this.tokenInAddress,\n      tokenOut: this.tokenOutAddress,\n      amountIn: this.amountInRaw,\n      amountOut: this.amountOutRaw,\n      recipient: this.recipient,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      stopPrice: this.stopPrice,\n      oracleAddress: this.oracleAddress,\n      oracleData: keccak256(['bytes'], [this.oracleData])\n    }\n\n    return getTypedData(order, this.chainId)\n  }\n\n  getTypeHash() {\n    let typedData = this.getTypedData()\n    let digest = getTypeHash(typedData)\n    return digest\n  }\n\n  async send() {\n    const resp = await fetch(`${LAMBDA_URL}/orders/create`, {\n      method: 'POST',\n      body: JSON.stringify({\n        maker: this.maker,\n        tokenIn: this.tokenInAddress,\n        tokenOut: this.tokenOutAddress,\n        tokenInDecimals: this.tokenInDecimals,\n        tokenOutDecimals: this.tokenOutDecimals,\n        tokenInSymbol: this.tokenInSymbol,\n        tokenOutSymbol: this.tokenOutSymbol,\n        amountIn: this.amountInRaw,\n        amountOut: this.amountOutRaw,\n        recipient: this.recipient,\n        startTime: this.startTime,\n        endTime: this.endTime,\n        stopPrice: this.stopPrice,\n        oracleAddress: this.oracleAddress,\n        oracleData: this.oracleData,\n        v: this.v,\n        r: this.r,\n        s: this.s,\n        chainId: this.amountIn.currency.chainId\n      })\n    })\n\n    return resp.json()\n  }\n}\n\nexport class FillLimitOrder {\n  public readonly order: LimitOrder\n  public readonly path: string[]\n  public readonly amountExternal: BigNumber\n  public readonly amountToFill: BigNumber\n  public readonly limitOrderReceiver: string\n  public readonly to: string\n  public readonly tokenIn: string\n  public readonly tokenOut: string\n  public readonly limitOrderReceiverData: string\n\n  constructor(\n    order: LimitOrder,\n    path: string[],\n    amountExternal: BigNumber,\n    amountToFill: BigNumber,\n    limitOrderReceiver: string,\n    to: string,\n    keepTokenIn = false\n  ) {\n    this.order = order\n    this.path = path.map(validateAndParseAddress)\n    this.amountExternal = amountExternal\n    this.amountToFill = amountToFill\n    this.limitOrderReceiver = validateAndParseAddress(limitOrderReceiver)\n    this.to = validateAndParseAddress(to)\n    this.tokenIn = order.amountIn.currency.address\n    this.tokenOut = order.amountOut.currency.address\n\n    this.limitOrderReceiverData = defaultAbiCoder.encode(\n      ['address[]', 'uint256', 'address', 'bool'],\n      [this.path, this.amountExternal.toString(), this.to, keepTokenIn]\n    )\n  }\n\n  public fillOrderOpen(\n    signer: Signer,\n    extra: {\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      nonce?: number\n      debug?: boolean\n      open?: boolean\n    }\n  ) {\n    extra.open = true\n    return this.fillOrder(signer, extra)\n  }\n\n  public async fillOrder(\n    signer: Signer | NonceManager,\n    extra: {\n      debug?: boolean\n      forceExecution?: boolean\n      gasPrice?: BigNumber\n      open?: boolean\n      nonce?: number\n    }\n  ): Promise<{ executed: boolean; transaction?: Transaction }> {\n    const { gasPrice, nonce, forceExecution = false, open = false } = extra\n\n    const func = open ? 'fillOrderOpen' : 'fillOrder'\n\n    const orderArg = [\n      this.order.maker,\n      this.order.amountInRaw,\n      this.order.amountOutRaw,\n      this.order.recipient,\n      this.order.startTime,\n      this.order.endTime,\n      this.order.stopPrice,\n      this.order.oracleAddress,\n      this.order.oracleData,\n      this.amountToFill.toString(),\n      this.order.v,\n      this.order.r,\n      this.order.s\n    ]\n\n    const limitOrderContract = new Contract(STOP_LIMIT_ORDER_ADDRESS[this.order.chainId], abi, signer)\n\n    let gasLimit\n    let executed = true\n\n    if (extra.debug) console.log(orderArg, this.path, this.limitOrderReceiver, this.limitOrderReceiverData)\n\n    try {\n      gasLimit = await limitOrderContract.estimateGas[func](\n        orderArg,\n        this.path[0],\n        this.path[this.path.length - 1],\n        this.limitOrderReceiver,\n        this.limitOrderReceiverData\n      )\n      gasLimit = gasLimit.mul(11).div(10)\n    } catch (e) {\n      if (forceExecution) {\n        console.log('Failed to estimate gas, forcing execution')\n        gasLimit = BigNumber.from('400000') // 400k\n        executed = true\n      } else {\n        return { executed: false }\n      }\n    }\n\n    const transaction: Transaction = await limitOrderContract.fillOrder(\n      orderArg,\n      this.path[0],\n      this.path[this.path.length - 1],\n      this.limitOrderReceiver,\n      this.limitOrderReceiverData,\n      { gasLimit, gasPrice, nonce }\n    )\n\n    return { executed, transaction }\n  }\n}\n"],"names":["ChainId","Rounding","TradeType","KashiAction","Fee","OrderStatus","USDC_ADDRESS","MAINNET","ROPSTEN","KOVAN","MATIC","FANTOM","BSC","HARMONY","HECO","OKEX","XDAI","ARBITRUM","AURORA","FACTORY_ADDRESS","RINKEBY","GÖRLI","FANTOM_TESTNET","MATIC_TESTNET","BSC_TESTNET","ARBITRUM_TESTNET","MOONBEAM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","OKEX_TESTNET","CELO","PALM","PALM_TESTNET","MOONRIVER","AURORA_TESTNET","AURORA_PRIVATENET","ROUTER_ADDRESS","SUSHI_ADDRESS","MASTERCHEF_ADDRESS","BAR_ADDRESS","MAKER_ADDRESS","MULTICALL2_ADDRESS","WETH9_ADDRESS","WNATIVE_ADDRESS","CELL_WNEAR","CELL_WETH","CELL_RUSD","CELL_WBTC","WETH_USDC","TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","SUSHISWAP_MULTISWAPPER_ADDRESS","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","BORING_HELPER_ADDRESS","STOP_LIMIT_ORDER_ADDRESS","ARCHER_ROUTER_ADDRESS","MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","ENS_REGISTRAR_ADDRESS","ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","INIT_CODE_HASH","LP_IDENTIFIER_NAME","LP_IDENTIFIER_SYMBOL","ACTION_ADD_ASSET","ACTION_REPAY","ACTION_REMOVE_ASSET","ACTION_REMOVE_COLLATERAL","ACTION_BORROW","ACTION_GET_REPAY_SHARE","ACTION_GET_REPAY_PART","ACTION_ACCRUE","ACTION_ADD_COLLATERAL","ACTION_UPDATE_EXCHANGE_RATE","ACTION_BENTO_DEPOSIT","ACTION_BENTO_WITHDRAW","ACTION_BENTO_TRANSFER","ACTION_BENTO_TRANSFER_MULTIPLE","ACTION_BENTO_SETAPPROVAL","ACTION_CALL","MINIMUM_TARGET_UTILIZATION","BigNumber","from","MAXIMUM_TARGET_UTILIZATION","UTILIZATION_PRECISION","FULL_UTILIZATION","FULL_UTILIZATION_MINUS_MAX","sub","STARTING_INTEREST_PER_YEAR","mul","MINIMUM_INTEREST_PER_YEAR","MAXIMUM_INTEREST_PER_YEAR","INTEREST_ELASTICITY","FACTOR_PRECISION","PROTOCOL_FEE","PROTOCOL_FEE_DIVISOR","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","NativeCurrency","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","equals","other","isToken","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","USDC","WETH9","WNATIVE","Avalanche","onChain","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Palm","Aurora","NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","LAMBDA_URL","SOCKET_URL","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","wrapped","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePoolInitCodeHash","creationCode","deployData","masterDeployerAddress","keccak256","pack","defaultAbiCoder","encode","MASTER_DEPLOYER_ADDRESS","CONSTANT_PRODUCT_POOL_CREATION_CODE","computeConstantProductPoolAddress","factoryAddress","tokenA","tokenB","fee","twap","token0","token1","sort","CONSTANT_PRODUCT_POOL_INIT_CODE_HASH","getCreate2Address","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","ConstantProductPool","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","computePairAddress","Pair","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","Array","EXACT_INPUT","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","PoolType","Pool","_info","info","minLiquidity","swapGasCost","type","RConstantProductPool","ConstantProduct","RHybridPool","Hybrid","A","RWeightedPool","Weighted","weight0","weight1","CL_MIN_TICK","CL_MAX_TICK","RConcentratedLiquidityPool","ConcentratedLiquidity","sqrtPrice","nearestTick","ticks","RouteStatus","types","EIP712Domain","LimitOrder","bentoTypes","SetMasterContractApproval","getSignature","message","privateKey","domain","verifyingContract","sign","primaryType","getTypedData","getTypedDataBento","getTypeHash","typedData","getMessage","signingKey","SigningKey","signDigest","v","r","s","getSignatureWithProvider","provider","send","maker","JSON","stringify","signature","splitSignature","getSignatureWithProviderBentobox","user","getSignatureBento","bentoApproval","A_PRECISION","DCacheBN","Map","HybridComputeLiquidity","pool","res","get","undefined","r0","r1","isZero","nA","prevD","D","dP","abs","lte","HybridgetY","c","yPrev","y","calcOutByIn","direction","xBN","yBN","parseInt","wPool","weightRatio","actualIn","out","pow","xNewBN","getBigNumber","yNewBN","dy","ConcentratedLiquidityOutByIn","OutOfLiquidity","inAmount","index","unshift","DLiquidity","nextTickToCross","currentPrice","currentLiquidity","outAmount","nextTickPrice","maxDx","maxDy","calcInByOut","lt","round","console","calcPrice","takeFeeIntoAccount","oneMinusFee","hPool","ac4","Ds","calcInputByPriceConstantMean","price","t","calcInputByPrice","priceEffective","hint","revertPositive","ASSERT","f","closeValues","accuracy","calcSquareEquation","assert","sqrtD","min","max","x0","y0","e","valueBN","exp","log","LN2","shift","mant","Edge","p","v0","v1","vert0","vert1","amountInPrevious","amountOutPrevious","canBeUsed","bestEdgeIncome","reserve","calcOutput","gas","GasConsumption","checkMinimalLiquidityExceededAfterSwap","testApply","inPrev","outPrev","to","getNeibour","directionNew","amountInNew","amountOutNew","inInc","outInc","inNew","outNew","calc","applySwap","bestIncome","Vertice","edges","gasPrice","gasSpent","bestTotal","bestSource","checkLine","Graph","pools","baseToken","vertices","tokens","forEach","getOrCreateVertice","edge","baseVert","setPrices","map","r2","vert","exportPath","fromVert","toVert","Set","findBestPath","start","finish","processedVert","nextVertList","closestVert","closestTotal","closestPosition","bestPath","totalOutput","v2","has","newIncome","newGasSpent","newTotal","addPath","_from","total","totalModule","findBestRoute","mode","routeValues","isArray","sum","gasSpentInit","totalrouted","step","status","NoWay","legs","totalAmountOut","Partial","Success","getRouteLegs","topologyWasChanged","calcLegsAmountOut","cleanTopology","nodes","n","outEdges","getOutputEdges","edgeFrom","quantity","swapPortion","absolutePortion","filter","getInputEdges","amounts","l","find","inputTotal","vertNext","prevAmount","topologySort","removeWeakestEdge","removeDeadEnds","verts","minVert","minVertNext","minOutput","MAX_VALUE","vertState","vertsFinished","foundCycle","foundDeadEndVerts","that","topSortRecursive","current","state","successors2Exist","reverse","findMultiRouting","steps","g","fromV","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","startTime","endTime","stopPrice","oracleAddress","oracleData","getLimitOrder","data","tokenInDecimals","tokenInSymbol","tokenOutDecimals","tokenOutSymbol","usePrice","signdOrderWithPrivatekey","order","tokenInAddress","tokenOutAddress","amountInRaw","amountOutRaw","signOrderWithProvider","digest","fetch","method","body","resp","json","FillLimitOrder","amountExternal","amountToFill","limitOrderReceiver","keepTokenIn","limitOrderReceiverData","fillOrderOpen","signer","extra","open","fillOrder","nonce","forceExecution","func","orderArg","limitOrderContract","Contract","abi","executed","debug","estimateGas","gasLimit","transaction"],"mappings":"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"}